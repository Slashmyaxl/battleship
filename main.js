(()=>{var n={365:(n,e,t)=>{"use strict";t.d(e,{A:()=>s});var r=t(354),o=t.n(r),a=t(314),i=t.n(a)()(o());i.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Notable&display=swap);"]),i.push([n.id,"* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box\n}\n\n:root {\n    background: #222;\n    font-size: 18px;\n    font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\n}\n\n.container {\n    background: linear-gradient(178deg, hsl(46, 50%, 75%), hsl(36, 44%, 64%) 12%, hsl(36, 40%, 43%) 108%);\n    background-repeat: no-repeat;\n    margin: 0 auto;\n    min-height: 100vh;\n    width: clamp(430px, 95%, 1280px);\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 0.6rem;\n}\n\nh1 {\n    font-family: \"Notable\";\n    font-size: 3rem;\n    letter-spacing: 0.2rem;\n    text-align: center;\n    margin-top: 0.5rem;\n    \n}\n\n.marquee {\n    padding: 0.5rem;\n    color: #333;\n    background: #fefefe;\n    text-align: center;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 0.25rem;\n    box-shadow: inset 2px 2px 4px #888,\n                inset -2px -2px 2px lightgray;\n    width: 400px;\n    height: 4rem;\n    font-size: 1.2rem;\n}\n\n.button#start {\n    padding: 5px 8px;\n    border-radius: 10px;\n    box-shadow: 1px 1px 4px #888;\n    font-weight: bold;\n    background: #fff;\n    border: 1px solid black;\n}\n\n.button#start:active {\n  transform: translateX(1px) translateY(1px); \n  box-shadow: 0 0 2px #888;\n}\n\n.button#start:hover {\n  cursor: pointer;\n  background-color: rgb(146, 252, 155);\n}\n\n.ship-container {\n    width: min(500px, 98%);\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n    gap: 0.6rem;\n}\n\n.ship:hover {\n    transform: translate(-1px, -2px);\n}\n\n.rotated {\n    transform-origin: 20px 20px;\n    transform: rotate(90deg);\n}\n\n.boards-container {\n    width: min(98%, 920px);\n    display: grid;\n    grid-template-columns: repeat(auto-fit, 412px);\n    justify-content: center;\n    gap: 0.8rem;\n    padding: 0.25rem 0.75rem;\n}\n\n#p2 .cell:hover {\n    background-color: rgba(20, 20, 20, 0.05);\n    cursor: pointer;\n}\n\n.board-container {\n    border: 6px solid #222;\n    border-radius: 6px;\n    box-shadow: 1px 2px 4px #888;\n    letter-spacing: 0.025rem;\n    background-color: skyblue\n}\n\n.board-header {\n    height: 40px;\n    background: #ddd;\n    padding: 4px;\n    font-size: 1.3rem;\n    font-weight: bold;\n    border-bottom: 3px solid black;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.board {\n    background: inherit;\n    height: min-content;\n    display: flex;\n    flex-wrap: wrap;\n}\n\n.cell {\n    height: 40px;\n    width: 40px;\n    outline: 1px dotted black;\n    border-radius: 8px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.ship > .cell {\n    background-color: #888;;\n    color: #fefefe;\n    font-weight: bold;\n    outline: 1px solid #444;\n    box-shadow: 1px 2px 3px #555;\n}\n\n.marker {\n    width: 55%;\n    height: 55%;\n    border-radius: 50%;\n    box-shadow: 0px 1px 4px #333;\n}\n\n.log-container {\n    background: #111;\n    width: min(98%, 600px);\n    height: 196px;\n    border: 2px solid #eee;\n    border-radius: 4px;\n    box-shadow: 1px 1px 4px #888;\n    letter-spacing: 0.025rem;\n    margin-bottom: 0.25rem;\n    display: grid;\n    grid-template-rows: min-content 1fr;\n}\n\n.log-header {\n    color: #fefefe;\n    font-family: monospace;\n    text-align: center;\n    padding: 0.1rem;\n    border-bottom: 1px solid #eee;\n}\n\n.log {\n    color: hsl(310, 100%, 88%);\n    font-size: 0.85rem;\n    padding: 3px 5px;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    overflow: hidden;\n}\n\n.log-span {\n  font-weight: bold;\n}\n\n.log-line-sunk {\n  font-style: italic;\n  color: yellow;\n  font-weight: bold;\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;IACV;AACJ;;AAEA;IACI,gBAAgB;IAChB,eAAe;IACf,wEAAwE;AAC5E;;AAIA;IACI,qGAAqG;IACrG,4BAA4B;IAC5B,cAAc;IACd,iBAAiB;IACjB,gCAAgC;IAChC,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,WAAW;AACf;;AAEA;IACI,sBAAsB;IACtB,eAAe;IACf,sBAAsB;IACtB,kBAAkB;IAClB,kBAAkB;;AAEtB;;AAEA;IACI,eAAe;IACf,WAAW;IACX,mBAAmB;IACnB,kBAAkB;IAClB,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,sBAAsB;IACtB;6CACyC;IACzC,YAAY;IACZ,YAAY;IACZ,iBAAiB;AACrB;;AAEA;IACI,gBAAgB;IAChB,mBAAmB;IACnB,4BAA4B;IAC5B,iBAAiB;IACjB,gBAAgB;IAChB,uBAAuB;AAC3B;;AAEA;EACE,0CAA0C;EAC1C,wBAAwB;AAC1B;;AAEA;EACE,eAAe;EACf,oCAAoC;AACtC;;AAEA;IACI,sBAAsB;IACtB,aAAa;IACb,uBAAuB;IACvB,eAAe;IACf,WAAW;AACf;;AAEA;IACI,gCAAgC;AACpC;;AAEA;IACI,2BAA2B;IAC3B,wBAAwB;AAC5B;;AAEA;IACI,sBAAsB;IACtB,aAAa;IACb,8CAA8C;IAC9C,uBAAuB;IACvB,WAAW;IACX,wBAAwB;AAC5B;;AAEA;IACI,wCAAwC;IACxC,eAAe;AACnB;;AAEA;IACI,sBAAsB;IACtB,kBAAkB;IAClB,4BAA4B;IAC5B,wBAAwB;IACxB;AACJ;;AAEA;IACI,YAAY;IACZ,gBAAgB;IAChB,YAAY;IACZ,iBAAiB;IACjB,iBAAiB;IACjB,8BAA8B;IAC9B,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,mBAAmB;IACnB,mBAAmB;IACnB,aAAa;IACb,eAAe;AACnB;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,yBAAyB;IACzB,kBAAkB;IAClB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,sBAAsB;IACtB,cAAc;IACd,iBAAiB;IACjB,uBAAuB;IACvB,4BAA4B;AAChC;;AAEA;IACI,UAAU;IACV,WAAW;IACX,kBAAkB;IAClB,4BAA4B;AAChC;;AAEA;IACI,gBAAgB;IAChB,sBAAsB;IACtB,aAAa;IACb,sBAAsB;IACtB,kBAAkB;IAClB,4BAA4B;IAC5B,wBAAwB;IACxB,sBAAsB;IACtB,aAAa;IACb,mCAAmC;AACvC;;AAEA;IACI,cAAc;IACd,sBAAsB;IACtB,kBAAkB;IAClB,eAAe;IACf,6BAA6B;AACjC;;AAEA;IACI,0BAA0B;IAC1B,kBAAkB;IAClB,gBAAgB;IAChB,aAAa;IACb,sBAAsB;IACtB,yBAAyB;IACzB,gBAAgB;AACpB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,aAAa;EACb,iBAAiB;AACnB",sourcesContent:["* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box\n}\n\n:root {\n    background: #222;\n    font-size: 18px;\n    font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\n}\n\n@import url('https://fonts.googleapis.com/css2?family=Notable&display=swap');\n\n.container {\n    background: linear-gradient(178deg, hsl(46, 50%, 75%), hsl(36, 44%, 64%) 12%, hsl(36, 40%, 43%) 108%);\n    background-repeat: no-repeat;\n    margin: 0 auto;\n    min-height: 100vh;\n    width: clamp(430px, 95%, 1280px);\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 0.6rem;\n}\n\nh1 {\n    font-family: \"Notable\";\n    font-size: 3rem;\n    letter-spacing: 0.2rem;\n    text-align: center;\n    margin-top: 0.5rem;\n    \n}\n\n.marquee {\n    padding: 0.5rem;\n    color: #333;\n    background: #fefefe;\n    text-align: center;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 0.25rem;\n    box-shadow: inset 2px 2px 4px #888,\n                inset -2px -2px 2px lightgray;\n    width: 400px;\n    height: 4rem;\n    font-size: 1.2rem;\n}\n\n.button#start {\n    padding: 5px 8px;\n    border-radius: 10px;\n    box-shadow: 1px 1px 4px #888;\n    font-weight: bold;\n    background: #fff;\n    border: 1px solid black;\n}\n\n.button#start:active {\n  transform: translateX(1px) translateY(1px); \n  box-shadow: 0 0 2px #888;\n}\n\n.button#start:hover {\n  cursor: pointer;\n  background-color: rgb(146, 252, 155);\n}\n\n.ship-container {\n    width: min(500px, 98%);\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n    gap: 0.6rem;\n}\n\n.ship:hover {\n    transform: translate(-1px, -2px);\n}\n\n.rotated {\n    transform-origin: 20px 20px;\n    transform: rotate(90deg);\n}\n\n.boards-container {\n    width: min(98%, 920px);\n    display: grid;\n    grid-template-columns: repeat(auto-fit, 412px);\n    justify-content: center;\n    gap: 0.8rem;\n    padding: 0.25rem 0.75rem;\n}\n\n#p2 .cell:hover {\n    background-color: rgba(20, 20, 20, 0.05);\n    cursor: pointer;\n}\n\n.board-container {\n    border: 6px solid #222;\n    border-radius: 6px;\n    box-shadow: 1px 2px 4px #888;\n    letter-spacing: 0.025rem;\n    background-color: skyblue\n}\n\n.board-header {\n    height: 40px;\n    background: #ddd;\n    padding: 4px;\n    font-size: 1.3rem;\n    font-weight: bold;\n    border-bottom: 3px solid black;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.board {\n    background: inherit;\n    height: min-content;\n    display: flex;\n    flex-wrap: wrap;\n}\n\n.cell {\n    height: 40px;\n    width: 40px;\n    outline: 1px dotted black;\n    border-radius: 8px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.ship > .cell {\n    background-color: #888;;\n    color: #fefefe;\n    font-weight: bold;\n    outline: 1px solid #444;\n    box-shadow: 1px 2px 3px #555;\n}\n\n.marker {\n    width: 55%;\n    height: 55%;\n    border-radius: 50%;\n    box-shadow: 0px 1px 4px #333;\n}\n\n.log-container {\n    background: #111;\n    width: min(98%, 600px);\n    height: 196px;\n    border: 2px solid #eee;\n    border-radius: 4px;\n    box-shadow: 1px 1px 4px #888;\n    letter-spacing: 0.025rem;\n    margin-bottom: 0.25rem;\n    display: grid;\n    grid-template-rows: min-content 1fr;\n}\n\n.log-header {\n    color: #fefefe;\n    font-family: monospace;\n    text-align: center;\n    padding: 0.1rem;\n    border-bottom: 1px solid #eee;\n}\n\n.log {\n    color: hsl(310, 100%, 88%);\n    font-size: 0.85rem;\n    padding: 3px 5px;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    overflow: hidden;\n}\n\n.log-span {\n  font-weight: bold;\n}\n\n.log-line-sunk {\n  font-style: italic;\n  color: yellow;\n  font-weight: bold;\n}"],sourceRoot:""}]);const s=i},314:n=>{"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var A=0;A<n.length;A++){var d=[].concat(n[A]);r&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),e.push(d))}},e}},354:n=>{"use strict";n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},72:n=>{"use strict";var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],s=0;s<n.length;s++){var l=n[s],A=r.base?l[0]+r.base:l[0],d=a[A]||0,c="".concat(A," ").concat(d);a[A]=d+1;var p=t(c),u={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var f=o(u,r);r.byIndex=s,e.splice(s,0,{identifier:c,updater:f,references:1})}i.push(c)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var l=r(n,o),A=0;A<a.length;A++){var d=t(a[A]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=l}}},659:n=>{"use strict";var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},540:n=>{"use strict";n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,t)=>{"use strict";n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},825:n=>{"use strict";n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{"use strict";n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},785:n=>{const e=["A","B","C","D","E","F","G","H","I","J"];n.exports={row:n=>{if(n>10||n<1)throw new Error("Out of bounds!");return n-1},column:n=>{const t=e.indexOf(n);if(t>9||t<0)throw new Error("Out of bounds!");return t},cols:e}},414:(n,e,t)=>{const{isOccupied:r}=t(89),{cols:o,row:a,column:i}=t(785),s=t(906);function l(n,e,t){const r=document.createElement(n);return e&&e.forEach((n=>r.classList.add(n))),t&&r.setAttribute("id",t),r}n.exports={createDOMElement:l,renderBoard:n=>{const e=s().readBoard(),t=l("div",["board"],n);let r;return e.forEach((a=>a.forEach(((i,s)=>{r=l("div","p1"===n?["cell","droppable"]:["cell"]),r.dataset.column=o[s],r.dataset.row=e.indexOf(a)+1,t.appendChild(r)})))),t},renderCells:(n,e,t=!0)=>{const a=n.readBoard();let i;for(;e.firstChild;)e.removeChild(e.lastChild);a.forEach((n=>n.forEach(((s,A)=>{if(i="p2"===e.id?l("div",["cell"]):l("div",["cell","droppable"]),i.dataset.column=o[A],i.dataset.row=a.indexOf(n)+1,r(s)&&t&&(i.style.backgroundColor="#888"),"X"===s){const e=l("div",["marker"]);e.dataset.column=o[A],e.dataset.row=a.indexOf(n)+1,e.style.backgroundColor="rgb(255, 60, 20)",i.appendChild(e)}if("O"===s){const e=l("div",["marker"]);e.dataset.column=o[A],e.dataset.row=a.indexOf(n)+1,e.style.backgroundColor="#eee",i.appendChild(e)}e.appendChild(i)}))))},addToLog:(n,e,t,r,o,s)=>{const A=r.readBoard()[a(e[1])][i(e[0])],d=l("p",["log-line"]);d.textContent=`${n.getName()} attacked ${e.join(", ")} ... it's a `;const c=l("span",["log-span"]);if("X"===A?(c.textContent="HIT!",c.style.color="rgb(255, 60, 20)"):"O"===A&&(c.textContent="MISS!",c.style.color="#eee"),d.appendChild(c),s.appendChild(d),o){const n=l("p",["log-line-sunk"]);n.textContent=`${t.getPossessive()} ${o} has been sunk!`,setTimeout((()=>{s.appendChild(n)}),150)}},changeMarquee:(n,e,t)=>{const r=n.toString(),o=e;return r.includes("Error")?(o.style.color="orangered",o.textContent=r+" Try again."):(o.textContent=r,o.style.color="#333"),o.style.fontSize=`${t}px`,o},createShip:function(n,e){const t=l("div",["ship"],n);t.style.cursor="move",t.style.display="flex";let r=0;for(;e>0;){const o=l("div",["cell"]);r<3&&(o.textContent=n.toString().substring(r,r+1).toUpperCase()),t.appendChild(o),e--,r++}return t}}},34:(n,e,t)=>{const{renderBoard:r,renderCells:o,addToLog:a,changeMarquee:i,createShip:s}=t(414),l=document.querySelector(".marquee"),A=document.getElementById("p1Container"),d=document.getElementById("p2Container"),c=document.getElementById("p1Header"),p=document.getElementById("p2Header"),u=document.querySelector(".log"),f=document.querySelector(".ship-container");let h,m;const g={renderBoards(){for(;A.contains(document.getElementById("p1"));)A.removeChild(document.getElementById("p1"));for(A.appendChild(r("p1"));d.contains(document.getElementById("p2"));)d.removeChild(document.getElementById("p2"));d.appendChild(r("p2")),c.textContent="You",p.textContent="Computer",u.textContent="",h=document.getElementById("p1"),m=document.getElementById("p2")},startGame(){this.renderBoards(),this.renderShips(),l.textContent="Place your ships by dragging them onto your board (press R to rotate).",l.style.fontSize="20px"},renderShips(){const n=[s("Carrier",5),s("Battleship",4),s("Cruiser",3),s("Submarine",3),s("Destroyer",2)];for(;f.firstChild;)f.removeChild(f.lastChild);n.forEach((n=>f.appendChild(n)))},p1UpdateBoard(n){o(n,h)},p2UpdateBoard(n){o(n,m,!1)},updateDisplay(n,e,t,r,o){this.updateMarquee(`${t.getPossessive()} turn`,26),setTimeout((()=>{a(n,e,t,r,o,u)}),100)},updateMarquee(n,e){i(n,l,e)},gameOver(n){l.textContent=`Winner: ${n.getName()}`}};n.exports=g},906:(n,e,t)=>{const{row:r,column:o}=t(785),{checkCollisions:a,isOccupied:i}=t(89);n.exports=()=>{const n=[];!function(){for(let e=0;e<10;e++){const e=[];for(let n=0;n<10;n++)e.push(" ");n.push(e)}}();const e=[];return{readBoard:()=>n,receiveAttack:function(e,t){let a=null;const s=n[r(t)][o(e)];if("X"===s||"O"===s)throw new Error("Cell already hit!");return i(s)?(s.hit(),s.isSunk()&&(a=s.name),n[r(t)][o(e)]="X"):n[r(t)][o(e)]="O",{cell:[e,t],sunkShip:a}},placeShip:function(t,i,s,l){if(e.length>4)throw new Error("Ship limit exceeded.");let A=o(i),d=r(s);try{a(n,i,s,l,t)}catch(n){return n}if(e.push(t),"vertical"===l)for(let e=1;e<=t.getShipLength();e++)n[d][A]=t,d++;else for(let e=1;e<=t.getShipLength();e++)n[d][A]=t,A++;return!0},allShipsSunk:function(){return!(e.length<5)&&5===e.filter((n=>n.isSunk())).length},getAllShips:()=>e}}},138:(n,e,t)=>{const r=t(211),{startPlacementPhase:o,placementPhaseOver:a}=t(742),i=t(34),s=t(906);n.exports=function(){i.startGame();const n=r("You"),e=r("Computer",!0),t=s(),l=s();let A=n;o();const d=document.getElementById("p2");function c(){return l.allShipsSunk()||t.allShipsSunk()}n.placeShips(t),e.placeShips(l,"random"),i.p2UpdateBoard(l),d.addEventListener("click",(r=>{if(!a()||A!==n||c())return null;{const t=r.target.dataset,o=l.receiveAttack(t.column,t.row);if(i.p2UpdateBoard(l),i.updateDisplay(n,o.cell,e,l,o.sunkShip),c())return i.gameOver(n);A=e}setTimeout((()=>{const r=e.randomAttack(t),o=t.receiveAttack(r[0],r[1]);if(i.p1UpdateBoard(t),i.updateDisplay(e,o.cell,n,t,o.sunkShip),c())return i.gameOver(e);A=n}),500)}))}},89:(n,e,t)=>{const{row:r,column:o}=t(785);function a(n){return"object"==typeof n}n.exports={checkCollisions:function(n,e,t,i,s){const l=[];let A=o(e),d=r(t);if("vertical"===i)for(let e=1;e<=s.getShipLength();e++){if(A>9||d>9)throw new Error("Out of bounds!");l.push(n[d][A]),d++}else for(let e=1;e<=s.getShipLength();e++){if(A>9||d>9)throw new Error("Out of bounds!");l.push(n[d][A]),A++}if(l.find(a))throw new Error("Ship Collision!");return Error},isOccupied:a}},211:(n,e,t)=>{const{isOccupied:r}=t(89),{placeAllShips:o,placeRandomShips:a}=t(742),{cols:i}=t(785);n.exports=function(n,e=!1){return{getName:()=>n,getPossessive:()=>"You"===n?"Your":`${n}'s`,isComputer:()=>!0===e,randomAttack:n=>{const e=n.readBoard(),t=[];return e.forEach((n=>n.forEach(((o,a)=>{(r(o)||" "===o)&&t.push([i[a],e.indexOf(n)+1])})))),t[Math.floor(Math.random()*t.length)]},placeShips:(n,e=!1)=>{e?a(n):o(n)}}}},742:(n,e,t)=>{const r=t(432),o=t(34),{cols:a}=t(785),i=["Carrier","Battleship","Cruiser","Submarine","Destroyer"];let s=!0;n.exports={placeAllShips:function(n){document.querySelectorAll(".ship").forEach((e=>{e.onmousedown=function(t){const a=document.querySelector(".ship-container");let i="";function l(n,t){e.style.left=n-20+"px",e.style.top=t-e.offsetHeight/2+"px"}function A(n){l(n.pageX,n.pageY)}function d(n){"r"===n.key&&"vertical"!==i?(i="vertical",e.classList.add("rotated")):(i="",e.classList.remove("rotated"))}e.style.position="absolute",e.style.zIndex=10,l(t.pageX,t.pageY),document.addEventListener("mousemove",A),window.addEventListener("keydown",d),e.onmouseup=t=>{e.style.display="none";const l=document.elementFromPoint(t.clientX,t.clientY);if(e.style.display="flex",document.removeEventListener("mousemove",A),!l.classList.contains("droppable"))return;const c=n.placeShip(r(e.id),l.dataset.column,l.dataset.row,i);!0===c?(o.p1UpdateBoard(n),a.removeChild(e),o.updateMarquee("Place your ships by dragging them onto your board (press R to rotate).",20),a.hasChildNodes()||(s=!1,o.updateMarquee("You're up, Admiral! Choose a cell on your opponent's board to attack.",20))):(e.style.position="static",e.classList.remove("rotated"),window.removeEventListener("keydown",d),o.updateMarquee(c,24))}}}))},placeRandomShips:function n(e,t=0){if(t>=i.length)return;const o=["horizonal","vertical"][Math.floor(2*Math.random())],s=a[Math.floor(10*Math.random())],l=Math.floor(10*Math.random())+1,A=e.placeShip(r(i[t]),s,l,o);n(e,!0===A?++t:t)},startPlacementPhase:function(){s=!0},placementPhaseOver:()=>!s}},432:n=>{n.exports=n=>{let e;switch(n){case"Carrier":e=5;break;case"Battleship":e=4;break;case"Cruiser":case"Submarine":e=3;break;case"Destroyer":e=2;break;default:throw new Error("Unexpected ship name.")}let t=0;const r=()=>t===e;return{name:n,readHits:()=>t,getShipLength:()=>e,hit:()=>{r()||(t+=1)},isSunk:r}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{"use strict";var n=t(72),e=t.n(n),r=t(825),o=t.n(r),a=t(659),i=t.n(a),s=t(56),l=t.n(s),A=t(540),d=t.n(A),c=t(113),p=t.n(c),u=t(365),f={};f.styleTagTransform=p(),f.setAttributes=l(),f.insert=i().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=d(),e()(u.A,f),u.A&&u.A.locals&&u.A.locals;const h=t(34),m=t(138),g=document.querySelector("button#start");h.renderBoards(),g.addEventListener("click",m)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,