(()=>{var n={365:(n,e,t)=>{"use strict";t.d(e,{A:()=>s});var o=t(354),r=t.n(o),a=t(314),i=t.n(a)()(r());i.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Notable&display=swap);"]),i.push([n.id,"* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box\n}\n\n:root {\n    background: #222;\n    font-size: 18px;\n    font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\n}\n\n.container {\n    background: linear-gradient(178deg, hsl(46, 50%, 75%), hsl(36, 44%, 64%) 12%, hsl(36, 40%, 43%) 108%);\n    background-repeat: no-repeat;\n    margin: 0 auto;\n    min-height: 100vh;\n    width: clamp(430px, 95%, 1280px);\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 0.6rem;\n}\n\nh1 {\n    font-family: \"Notable\";\n    font-size: 3rem;\n    letter-spacing: 0.2rem;\n    text-align: center;\n    margin-top: 0.5rem;\n    \n}\n\n.marquee {\n    padding: 0.5rem;\n    color: #333;\n    background: #fefefe;\n    text-align: center;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 0.25rem;\n    box-shadow: inset 2px 2px 4px #888,\n                inset -2px -2px 2px lightgray;\n    width: 400px;\n    height: 4rem;\n    font-size: 1.2rem;\n}\n\n.button#start {\n    padding: 5px 8px;\n    border-radius: 10px;\n    box-shadow: 1px 1px 4px #888;\n    font-weight: bold;\n    background: #fff;\n    border: 1px solid black;\n}\n\n.button#start:hover {\n  cursor: pointer;\n  background-color: rgb(146, 252, 155);\n  transform: translateX(1px) translateY(1px); \n  box-shadow: 0 0 2px #888;\n}\n\n.button#start:active {\n    box-shadow: inset -1px -1px 4px #666,\n                inset 1px 1px 4px #666;\n  }\n\n.ships-container {\n    width: min(500px, 98%);\n    justify-content: center;\n    flex-wrap: wrap;\n    gap: 0.6rem;\n}\n\n.rotated {\n    transform-origin: 20px 20px;\n    transform: rotate(90deg);\n}\n\n.boards-container {\n    width: min(98%, 920px);\n    display: grid;\n    grid-template-columns: repeat(auto-fit, 412px);\n    justify-content: center;\n    gap: 0.8rem;\n    padding: 0.25rem 0.75rem;\n}\n\n#p2 .cell:hover {\n    background-color: rgba(20, 20, 20, 0.05);\n    cursor: pointer;\n}\n\n.board-container {\n    border: 6px solid #222;\n    border-radius: 6px;\n    box-shadow: 1px 2px 4px #888;\n    letter-spacing: 0.025rem;\n    background-color: skyblue\n}\n\n.board-header {\n    height: 40px;\n    background: #ddd;\n    padding: 4px;\n    font-size: 1.3rem;\n    font-weight: bold;\n    border-bottom: 3px solid black;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.board {\n    background: inherit;\n    height: min-content;\n    display: flex;\n    flex-wrap: wrap;\n}\n\n.cell {\n    height: 40px;\n    width: 40px;\n    outline: 1px dotted black;\n    border-radius: 8px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.ship > .cell {\n    background-color: #888;;\n    color: #fefefe;\n    font-weight: bold;\n    outline: 1px solid #444;\n    box-shadow: 1px 2px 3px #555;\n}\n\n.ship:hover > .cell {\n    box-shadow: 2px 3px 3px #444;\n    opacity: 0.9;\n}\n\n.marker {\n    width: 55%;\n    height: 55%;\n    border-radius: 50%;\n    box-shadow: 0px 1px 4px #333;\n}\n\n.log-container {\n    background: #111;\n    width: min(98%, 600px);\n    height: 196px;\n    border: 2px solid #eee;\n    border-radius: 4px;\n    box-shadow: 1px 1px 4px #888;\n    letter-spacing: 0.025rem;\n    margin-bottom: 0.25rem;\n    display: grid;\n    grid-template-rows: min-content 1fr;\n}\n\n.log-header {\n    color: #fefefe;\n    font-family: monospace;\n    text-align: center;\n    padding: 0.1rem;\n    border-bottom: 1px solid #eee;\n}\n\n.log {\n    color: hsl(310, 100%, 88%);\n    font-size: 0.85rem;\n    padding: 3px 5px;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    overflow: hidden;\n}\n\n.log-span {\n  font-weight: bold;\n}\n\n.log-line-sunk {\n  font-style: italic;\n  color: yellow;\n  font-weight: bold;\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;IACV;AACJ;;AAEA;IACI,gBAAgB;IAChB,eAAe;IACf,wEAAwE;AAC5E;;AAIA;IACI,qGAAqG;IACrG,4BAA4B;IAC5B,cAAc;IACd,iBAAiB;IACjB,gCAAgC;IAChC,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,WAAW;AACf;;AAEA;IACI,sBAAsB;IACtB,eAAe;IACf,sBAAsB;IACtB,kBAAkB;IAClB,kBAAkB;;AAEtB;;AAEA;IACI,eAAe;IACf,WAAW;IACX,mBAAmB;IACnB,kBAAkB;IAClB,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,sBAAsB;IACtB;6CACyC;IACzC,YAAY;IACZ,YAAY;IACZ,iBAAiB;AACrB;;AAEA;IACI,gBAAgB;IAChB,mBAAmB;IACnB,4BAA4B;IAC5B,iBAAiB;IACjB,gBAAgB;IAChB,uBAAuB;AAC3B;;AAEA;EACE,eAAe;EACf,oCAAoC;EACpC,0CAA0C;EAC1C,wBAAwB;AAC1B;;AAEA;IACI;sCACkC;EACpC;;AAEF;IACI,sBAAsB;IACtB,uBAAuB;IACvB,eAAe;IACf,WAAW;AACf;;AAEA;IACI,2BAA2B;IAC3B,wBAAwB;AAC5B;;AAEA;IACI,sBAAsB;IACtB,aAAa;IACb,8CAA8C;IAC9C,uBAAuB;IACvB,WAAW;IACX,wBAAwB;AAC5B;;AAEA;IACI,wCAAwC;IACxC,eAAe;AACnB;;AAEA;IACI,sBAAsB;IACtB,kBAAkB;IAClB,4BAA4B;IAC5B,wBAAwB;IACxB;AACJ;;AAEA;IACI,YAAY;IACZ,gBAAgB;IAChB,YAAY;IACZ,iBAAiB;IACjB,iBAAiB;IACjB,8BAA8B;IAC9B,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,mBAAmB;IACnB,mBAAmB;IACnB,aAAa;IACb,eAAe;AACnB;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,yBAAyB;IACzB,kBAAkB;IAClB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,sBAAsB;IACtB,cAAc;IACd,iBAAiB;IACjB,uBAAuB;IACvB,4BAA4B;AAChC;;AAEA;IACI,4BAA4B;IAC5B,YAAY;AAChB;;AAEA;IACI,UAAU;IACV,WAAW;IACX,kBAAkB;IAClB,4BAA4B;AAChC;;AAEA;IACI,gBAAgB;IAChB,sBAAsB;IACtB,aAAa;IACb,sBAAsB;IACtB,kBAAkB;IAClB,4BAA4B;IAC5B,wBAAwB;IACxB,sBAAsB;IACtB,aAAa;IACb,mCAAmC;AACvC;;AAEA;IACI,cAAc;IACd,sBAAsB;IACtB,kBAAkB;IAClB,eAAe;IACf,6BAA6B;AACjC;;AAEA;IACI,0BAA0B;IAC1B,kBAAkB;IAClB,gBAAgB;IAChB,aAAa;IACb,sBAAsB;IACtB,yBAAyB;IACzB,gBAAgB;AACpB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,aAAa;EACb,iBAAiB;AACnB",sourcesContent:["* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box\n}\n\n:root {\n    background: #222;\n    font-size: 18px;\n    font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\n}\n\n@import url('https://fonts.googleapis.com/css2?family=Notable&display=swap');\n\n.container {\n    background: linear-gradient(178deg, hsl(46, 50%, 75%), hsl(36, 44%, 64%) 12%, hsl(36, 40%, 43%) 108%);\n    background-repeat: no-repeat;\n    margin: 0 auto;\n    min-height: 100vh;\n    width: clamp(430px, 95%, 1280px);\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 0.6rem;\n}\n\nh1 {\n    font-family: \"Notable\";\n    font-size: 3rem;\n    letter-spacing: 0.2rem;\n    text-align: center;\n    margin-top: 0.5rem;\n    \n}\n\n.marquee {\n    padding: 0.5rem;\n    color: #333;\n    background: #fefefe;\n    text-align: center;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 0.25rem;\n    box-shadow: inset 2px 2px 4px #888,\n                inset -2px -2px 2px lightgray;\n    width: 400px;\n    height: 4rem;\n    font-size: 1.2rem;\n}\n\n.button#start {\n    padding: 5px 8px;\n    border-radius: 10px;\n    box-shadow: 1px 1px 4px #888;\n    font-weight: bold;\n    background: #fff;\n    border: 1px solid black;\n}\n\n.button#start:hover {\n  cursor: pointer;\n  background-color: rgb(146, 252, 155);\n  transform: translateX(1px) translateY(1px); \n  box-shadow: 0 0 2px #888;\n}\n\n.button#start:active {\n    box-shadow: inset -1px -1px 4px #666,\n                inset 1px 1px 4px #666;\n  }\n\n.ships-container {\n    width: min(500px, 98%);\n    justify-content: center;\n    flex-wrap: wrap;\n    gap: 0.6rem;\n}\n\n.rotated {\n    transform-origin: 20px 20px;\n    transform: rotate(90deg);\n}\n\n.boards-container {\n    width: min(98%, 920px);\n    display: grid;\n    grid-template-columns: repeat(auto-fit, 412px);\n    justify-content: center;\n    gap: 0.8rem;\n    padding: 0.25rem 0.75rem;\n}\n\n#p2 .cell:hover {\n    background-color: rgba(20, 20, 20, 0.05);\n    cursor: pointer;\n}\n\n.board-container {\n    border: 6px solid #222;\n    border-radius: 6px;\n    box-shadow: 1px 2px 4px #888;\n    letter-spacing: 0.025rem;\n    background-color: skyblue\n}\n\n.board-header {\n    height: 40px;\n    background: #ddd;\n    padding: 4px;\n    font-size: 1.3rem;\n    font-weight: bold;\n    border-bottom: 3px solid black;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.board {\n    background: inherit;\n    height: min-content;\n    display: flex;\n    flex-wrap: wrap;\n}\n\n.cell {\n    height: 40px;\n    width: 40px;\n    outline: 1px dotted black;\n    border-radius: 8px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.ship > .cell {\n    background-color: #888;;\n    color: #fefefe;\n    font-weight: bold;\n    outline: 1px solid #444;\n    box-shadow: 1px 2px 3px #555;\n}\n\n.ship:hover > .cell {\n    box-shadow: 2px 3px 3px #444;\n    opacity: 0.9;\n}\n\n.marker {\n    width: 55%;\n    height: 55%;\n    border-radius: 50%;\n    box-shadow: 0px 1px 4px #333;\n}\n\n.log-container {\n    background: #111;\n    width: min(98%, 600px);\n    height: 196px;\n    border: 2px solid #eee;\n    border-radius: 4px;\n    box-shadow: 1px 1px 4px #888;\n    letter-spacing: 0.025rem;\n    margin-bottom: 0.25rem;\n    display: grid;\n    grid-template-rows: min-content 1fr;\n}\n\n.log-header {\n    color: #fefefe;\n    font-family: monospace;\n    text-align: center;\n    padding: 0.1rem;\n    border-bottom: 1px solid #eee;\n}\n\n.log {\n    color: hsl(310, 100%, 88%);\n    font-size: 0.85rem;\n    padding: 3px 5px;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    overflow: hidden;\n}\n\n.log-span {\n  font-weight: bold;\n}\n\n.log-line-sunk {\n  font-style: italic;\n  color: yellow;\n  font-weight: bold;\n}"],sourceRoot:""}]);const s=i},314:n=>{"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var d=0;d<n.length;d++){var A=[].concat(n[d]);o&&i[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),r&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=r):A[4]="".concat(r)),e.push(A))}},e}},354:n=>{"use strict";n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},72:n=>{"use strict";var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var a={},i=[],s=0;s<n.length;s++){var l=n[s],d=o.base?l[0]+o.base:l[0],A=a[d]||0,c="".concat(d," ").concat(A);a[d]=A+1;var p=t(c),u={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var h=r(u,o);o.byIndex=s,e.splice(s,0,{identifier:c,updater:h,references:1})}i.push(c)}return i}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var a=o(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var l=o(n,r),d=0;d<a.length;d++){var A=t(a[d]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}a=l}}},659:n=>{"use strict";var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},540:n=>{"use strict";n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,t)=>{"use strict";n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},825:n=>{"use strict";n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{"use strict";n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},785:n=>{const e=["A","B","C","D","E","F","G","H","I","J"];n.exports={row:n=>{if(n>10||n<1)throw new Error("Out of bounds!");return n-1},column:n=>{const t=e.indexOf(n);if(t>9||t<0)throw new Error("Out of bounds!");return t},cols:e}},414:(n,e,t)=>{const{isOccupied:o}=t(89),{cols:r,row:a,column:i}=t(785),s=t(906);function l(n,e,t){const o=document.createElement(n);return e&&e.forEach((n=>o.classList.add(n))),t&&o.setAttribute("id",t),o}n.exports={createDOMElement:l,renderBoard:n=>{const e=s().readBoard(),t=l("div",["board"],n);let o;return e.forEach((a=>a.forEach(((i,s)=>{o=l("div","p1"===n?["cell","droppable"]:["cell"]),o.dataset.column=r[s],o.dataset.row=e.indexOf(a)+1,t.appendChild(o)})))),t},renderCells:(n,e,t=!0)=>{const a=n.readBoard();let i;for(;e.firstChild;)e.removeChild(e.lastChild);a.forEach((n=>n.forEach(((s,d)=>{if(i="p2"===e.id?l("div",["cell"]):l("div",["cell","droppable"]),i.dataset.column=r[d],i.dataset.row=a.indexOf(n)+1,o(s)&&t&&(i.style.backgroundColor="#888"),"X"===s){const e=l("div",["marker"]);e.dataset.column=r[d],e.dataset.row=a.indexOf(n)+1,e.style.backgroundColor="rgb(255, 60, 20)",i.appendChild(e)}if("O"===s){const e=l("div",["marker"]);e.dataset.column=r[d],e.dataset.row=a.indexOf(n)+1,e.style.backgroundColor="#eee",i.appendChild(e)}e.appendChild(i)}))))},addToLog:(n,e,t,o,r,s)=>{const d=o.readBoard()[a(e[1])][i(e[0])],A=l("p",["log-line"]);A.textContent=`${n.getName()} attacked ${e.join(", ")} ... it's a `;const c=l("span",["log-span"]);if("X"===d?(c.textContent="HIT!",c.style.color="rgb(255, 60, 20)"):"O"===d&&(c.textContent="MISS!",c.style.color="#eee"),A.appendChild(c),s.appendChild(A),r){const n=l("p",["log-line-sunk"]);n.textContent=`${t.getPossessive()} ${r} has been SUNK!`,setTimeout((()=>{s.appendChild(n)}),150)}},changeMarquee:(n,e,t)=>{const o=n.toString(),r=e;return o.includes("Error")?(r.style.color="orangered",r.textContent=o+" Try again."):(r.textContent=o,r.style.color="#333"),r.style.fontSize=`${t}px`,r},createShip:function(n,e){const t=l("div",["ship-container"],`${n}-container`);t.style.height="42px",t.style.width=40*e+"px";const o=l("div",["ship"],n);o.style.cursor="move",o.style.display="flex";let r=0;for(;e>0;){const t=l("div",["cell"]);r<3&&(t.textContent=n.toString().substring(r,r+1).toUpperCase()),o.appendChild(t),e--,r++}return t.appendChild(o),t}}},34:(n,e,t)=>{const{renderBoard:o,renderCells:r,addToLog:a,changeMarquee:i,createShip:s}=t(414),l=document.querySelector(".marquee"),d=document.getElementById("p1Container"),A=document.getElementById("p2Container"),c=document.getElementById("p1Header"),p=document.getElementById("p2Header"),u=document.querySelector(".log"),h=document.querySelector(".ships-container");let m,f;const B={renderBoards(){for(;d.contains(document.getElementById("p1"));)d.removeChild(document.getElementById("p1"));for(d.appendChild(o("p1"));A.contains(document.getElementById("p2"));)A.removeChild(document.getElementById("p2"));A.appendChild(o("p2")),c.textContent="You",p.textContent="Computer",u.textContent="",m=document.getElementById("p1"),f=document.getElementById("p2")},startGame(){this.renderBoards(),this.renderShips(),l.textContent="Place your ships by dragging them onto your board (press R to rotate).",l.style.fontSize="20px"},renderShips(){const n=[s("Carrier",5),s("Battleship",4),s("Cruiser",3),s("Submarine",3),s("Destroyer",2)];for(;h.firstChild;)h.removeChild(h.lastChild);h.style.display="flex",n.forEach((n=>h.appendChild(n)))},p1UpdateBoard(n){r(n,m)},p2UpdateBoard(n){r(n,f,!1)},updateDisplay(n,e,t,o,r){this.updateMarquee(`${t.getPossessive()} turn`,26),setTimeout((()=>{a(n,e,t,o,r,u)}),100)},updateMarquee(n,e){i(n,l,e)},gameOver(n){l.textContent=`Winner: ${n.getName()}`}};n.exports=B},906:(n,e,t)=>{const{row:o,column:r}=t(785),{checkCollisions:a,isOccupied:i}=t(89);n.exports=()=>{const n=[];!function(){for(let e=0;e<10;e++){const e=[];for(let n=0;n<10;n++)e.push(" ");n.push(e)}}();const e=[];return{readBoard:()=>n,receiveAttack:function(e,t){let a=null;const s=n[o(t)][r(e)];if("X"===s||"O"===s)throw new Error("Cell already hit!");return i(s)?(s.hit(),s.isSunk()&&(a=s.name),n[o(t)][r(e)]="X"):n[o(t)][r(e)]="O",{cell:[e,t],sunkShip:a}},placeShip:function(t,i,s,l){if(e.length>4)throw new Error("Ship limit exceeded.");let d=r(i),A=o(s);try{a(n,i,s,l,t)}catch(n){return n}if(e.push(t),"vertical"===l)for(let e=1;e<=t.getShipLength();e++)n[A][d]=t,A++;else for(let e=1;e<=t.getShipLength();e++)n[A][d]=t,d++;return!0},allShipsSunk:function(){return!(e.length<5)&&5===e.filter((n=>n.isSunk())).length},getAllShips:()=>e}}},138:(n,e,t)=>{const o=t(211),{startPlacementPhase:r,placementPhaseOver:a}=t(742),i=t(34),s=t(906);n.exports=function(){i.startGame();const n=o("You"),e=o("Computer",!0),t=s(),l=s();let d=n;r();const A=document.getElementById("p2");function c(){return l.allShipsSunk()||t.allShipsSunk()}n.placeShips(t),e.placeShips(l,"random"),i.p2UpdateBoard(l),A.addEventListener("click",(o=>{if(!a()||d!==n||c())return null;{const t=o.target.dataset,r=l.receiveAttack(t.column,t.row);if(i.p2UpdateBoard(l),i.updateDisplay(n,r.cell,e,l,r.sunkShip),c())return i.gameOver(n);d=e}setTimeout((()=>{const o=e.randomAttack(t),r=t.receiveAttack(o[0],o[1]);if(i.p1UpdateBoard(t),i.updateDisplay(e,r.cell,n,t,r.sunkShip),c())return i.gameOver(e);d=n}),500)}))}},89:(n,e,t)=>{const{row:o,column:r}=t(785);function a(n){return"object"==typeof n}n.exports={checkCollisions:function(n,e,t,i,s){const l=[];let d=r(e),A=o(t);if("vertical"===i)for(let e=1;e<=s.getShipLength();e++){if(d>9||A>9)throw new Error("Out of bounds!");l.push(n[A][d]),A++}else for(let e=1;e<=s.getShipLength();e++){if(d>9||A>9)throw new Error("Out of bounds!");l.push(n[A][d]),d++}if(l.find(a))throw new Error("Ship Collision!");return Error},isOccupied:a}},211:(n,e,t)=>{const{isOccupied:o}=t(89),{placeAllShips:r,placeRandomShips:a}=t(742),{cols:i}=t(785);n.exports=function(n,e=!1){return{getName:()=>n,getPossessive:()=>"You"===n?"Your":`${n}'s`,isComputer:()=>!0===e,randomAttack:n=>{const e=n.readBoard(),t=[];return e.forEach((n=>n.forEach(((r,a)=>{(o(r)||" "===r)&&t.push([i[a],e.indexOf(n)+1])})))),t[Math.floor(Math.random()*t.length)]},placeShips:(n,e=!1)=>{e?a(n):r(n)}}}},742:(n,e,t)=>{const o=t(432),r=t(34),{cols:a}=t(785),i=["Carrier","Battleship","Cruiser","Submarine","Destroyer"];let s=!0;n.exports={placeAllShips:function(n){const e=document.querySelector(".ships-container"),t=document.querySelectorAll(".ship"),a=[];t.forEach((t=>{function l(){t.style.transform="translate(-1px, -2px)"}t.onmouseover=l,t.onmouseout=()=>{t.style.transform=""},t.onmousedown=function(d){const A=document.querySelector(`#${t.id}-container`);let c="";function p(n,e){t.style.left=n-20+"px",t.style.top=e-t.offsetHeight/2+"px"}function u(n){p(n.pageX,n.pageY)}function h(n){"r"===n.key&&"vertical"!==c?(c="vertical",t.classList.add("rotated")):(c="",t.classList.remove("rotated"))}t.style.transform="",t.onmouseover=null,t.style.position="absolute",t.style.zIndex=10,p(d.pageX,d.pageY),document.addEventListener("mousemove",u),window.addEventListener("keydown",h),t.onmouseup=d=>{t.style.display="none";const p=document.elementFromPoint(d.clientX,d.clientY);if(t.style.display="flex",document.removeEventListener("mousemove",u),!p.classList.contains("droppable"))return t.style.position="static",t.classList.remove("rotated"),t.onmouseover=l,void window.removeEventListener("keydown",h);const m=n.placeShip(o(t.id),p.dataset.column,p.dataset.row,c);!0===m?(r.p1UpdateBoard(n),a.push(t.id),console.log(a),A.removeChild(t),r.updateMarquee("Place your ships by dragging them onto your board (press R to rotate).",20),a.length===i.length&&(e.style.display="none",s=!1,r.updateMarquee("You're up, Admiral! Choose a cell on your opponent's board to attack.",20))):(t.style.position="static",t.classList.remove("rotated"),window.removeEventListener("keydown",h),r.updateMarquee(m,24),t.onmouseover=l)}}}))},placeRandomShips:function n(e,t=0){if(t>=i.length)return;const r=["horizonal","vertical"][Math.floor(2*Math.random())],s=a[Math.floor(10*Math.random())],l=Math.floor(10*Math.random())+1,d=e.placeShip(o(i[t]),s,l,r);n(e,!0===d?++t:t)},startPlacementPhase:function(){s=!0},placementPhaseOver:()=>!s}},432:n=>{n.exports=n=>{let e;switch(n){case"Carrier":e=5;break;case"Battleship":e=4;break;case"Cruiser":case"Submarine":e=3;break;case"Destroyer":e=2;break;default:throw new Error("Unexpected ship name.")}let t=0;const o=()=>t===e;return{name:n,readHits:()=>t,getShipLength:()=>e,hit:()=>{o()||(t+=1)},isSunk:o}}}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var a=e[o]={id:o,exports:{}};return n[o](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{"use strict";var n=t(72),e=t.n(n),o=t(825),r=t.n(o),a=t(659),i=t.n(a),s=t(56),l=t.n(s),d=t(540),A=t.n(d),c=t(113),p=t.n(c),u=t(365),h={};h.styleTagTransform=p(),h.setAttributes=l(),h.insert=i().bind(null,"head"),h.domAPI=r(),h.insertStyleElement=A(),e()(u.A,h),u.A&&u.A.locals&&u.A.locals;const m=t(34),f=t(138),B=document.querySelector("button#start");m.renderBoards(),B.addEventListener("click",f)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,