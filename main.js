(()=>{var n={365:(n,e,t)=>{"use strict";t.d(e,{A:()=>s});var r=t(354),o=t.n(r),a=t(314),i=t.n(a)()(o());i.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Notable&display=swap);"]),i.push([n.id,"* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box\n}\n\n:root {\n    background: #222;\n    font-size: 18px;\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\n}\n\n.container {\n    background: linear-gradient(178deg, hsl(46, 50%, 75%), hsl(36, 44%, 64%) 12%, hsl(36, 40%, 43%) 108%);\n    background-repeat: no-repeat;\n    margin: 0 auto;\n    min-height: 100vh;\n    width: clamp(430px, 95%, 1280px);\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 0.6rem;\n}\n\nh1 {\n    font-family: \"Notable\";\n    font-size: 3rem;\n    color: rgb(0, 0, 100);\n    letter-spacing: 0.2rem;\n    text-align: center;\n    text-shadow: 1px 1px 2px #666;\n}\n\n.marquee {\n    padding: 0.5rem;\n    color: #333;\n    background: #fefefe;\n    text-align: center;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 0.25rem;\n    box-shadow: inset 2px 2px 4px #888,\n                inset -1px -1px 3px lightgray;\n    width: 400px;\n    height: 4rem;\n    font-size: 1.2rem;\n}\n\n.button#start {\n    padding: 8px 14px;\n    border-radius: 24px;\n    box-shadow: 2px 2px 4px #777;\n    font-size: 0.9rem;\n    font-weight: bold;\n    background-color: hsl(120, 70%, 70%);\n    border: 1px solid #555;\n}\n\n.button#start:hover {\n  cursor: pointer;\n  \n  transform: translate(1px, 1px); \n  box-shadow: 1px 1px 2px #777;\n}\n\n.button#start:active {\n    box-shadow: 0px 0px 1px #888;\n    transform: translateX(2px) translateY(2px); \n  }\n\n.ships-container {\n    width: min(500px, 98%);\n    justify-content: center;\n    flex-wrap: wrap;\n    gap: 0.6rem;\n}\n\n.rotated {\n    transform-origin: 20px 20px;\n    transform: rotate(90deg);\n}\n\n.boards-container {\n    width: min(98%, 920px);\n    display: grid;\n    grid-template-columns: repeat(auto-fit, 412px);\n    justify-content: center;\n    gap: 0.8rem;\n    padding: 0.25rem 0.75rem;\n}\n\n#p2 .cell:hover {\n    background-color: rgba(20, 20, 20, 0.05);\n    cursor: pointer;\n}\n\n.board-container {\n    border: 6px solid #222;\n    border-radius: 6px;\n    box-shadow: 1px 2px 4px #888;\n    letter-spacing: 0.025rem;\n    background-color: skyblue\n}\n\n.board-header {\n    height: 40px;\n    background: #ddd;\n    padding: 4px;\n    font-size: 1.3rem;\n    font-weight: bold;\n    border-bottom: 3px solid black;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.board {\n    background: inherit;\n    height: min-content;\n    display: flex;\n    flex-wrap: wrap;\n}\n\n.cell {\n    height: 40px;\n    width: 40px;\n    outline: 1px dotted black;\n    border-radius: 8px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.ship > .cell {\n    background-color: #888;;\n    color: #fefefe;\n    font-weight: bold;\n    outline: 1px solid #444;\n    box-shadow: 1px 2px 3px #555;\n}\n\n.ship:hover > .cell {\n    box-shadow: 2px 3px 3px #444;\n    opacity: 0.9;\n}\n\n.marker {\n    width: 50%;\n    height: 50%;\n    border-radius: 50%;\n    box-shadow: 0px 1px 4px #333;\n}\n\n.log-container {\n    background: #111;\n    width: min(98%, 520px);\n    height: 196px;\n    border: 2px solid #eee;\n    border-radius: 4px;\n    box-shadow: 1px 1px 4px #888;\n    letter-spacing: 0.025rem;\n    margin-bottom: 0.25rem;\n    display: grid;\n    grid-template-rows: min-content 1fr;\n}\n\n.log-header {\n    color: #fefefe;\n    font-family: monospace;\n    text-align: center;\n    padding: 0.1rem;\n    border-bottom: 1px solid #eee;\n}\n\n.log {\n    color: hsl(310, 100%, 88%);\n    font-size: 0.85rem;\n    padding: 3px 5px;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    overflow: hidden;\n    letter-spacing: 0.12rem;\n}\n\n.log-span {\n  font-weight: bold;\n}\n\n.log-line-sunk {\n  font-style: italic;\n  color: yellow;\n  font-weight: bold;\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;IACV;AACJ;;AAEA;IACI,gBAAgB;IAChB,eAAe;IACf;AACJ;;AAIA;IACI,qGAAqG;IACrG,4BAA4B;IAC5B,cAAc;IACd,iBAAiB;IACjB,gCAAgC;IAChC,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,WAAW;AACf;;AAEA;IACI,sBAAsB;IACtB,eAAe;IACf,qBAAqB;IACrB,sBAAsB;IACtB,kBAAkB;IAClB,6BAA6B;AACjC;;AAEA;IACI,eAAe;IACf,WAAW;IACX,mBAAmB;IACnB,kBAAkB;IAClB,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,sBAAsB;IACtB;6CACyC;IACzC,YAAY;IACZ,YAAY;IACZ,iBAAiB;AACrB;;AAEA;IACI,iBAAiB;IACjB,mBAAmB;IACnB,4BAA4B;IAC5B,iBAAiB;IACjB,iBAAiB;IACjB,oCAAoC;IACpC,sBAAsB;AAC1B;;AAEA;EACE,eAAe;;EAEf,8BAA8B;EAC9B,4BAA4B;AAC9B;;AAEA;IACI,4BAA4B;IAC5B,0CAA0C;EAC5C;;AAEF;IACI,sBAAsB;IACtB,uBAAuB;IACvB,eAAe;IACf,WAAW;AACf;;AAEA;IACI,2BAA2B;IAC3B,wBAAwB;AAC5B;;AAEA;IACI,sBAAsB;IACtB,aAAa;IACb,8CAA8C;IAC9C,uBAAuB;IACvB,WAAW;IACX,wBAAwB;AAC5B;;AAEA;IACI,wCAAwC;IACxC,eAAe;AACnB;;AAEA;IACI,sBAAsB;IACtB,kBAAkB;IAClB,4BAA4B;IAC5B,wBAAwB;IACxB;AACJ;;AAEA;IACI,YAAY;IACZ,gBAAgB;IAChB,YAAY;IACZ,iBAAiB;IACjB,iBAAiB;IACjB,8BAA8B;IAC9B,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,mBAAmB;IACnB,mBAAmB;IACnB,aAAa;IACb,eAAe;AACnB;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,yBAAyB;IACzB,kBAAkB;IAClB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,sBAAsB;IACtB,cAAc;IACd,iBAAiB;IACjB,uBAAuB;IACvB,4BAA4B;AAChC;;AAEA;IACI,4BAA4B;IAC5B,YAAY;AAChB;;AAEA;IACI,UAAU;IACV,WAAW;IACX,kBAAkB;IAClB,4BAA4B;AAChC;;AAEA;IACI,gBAAgB;IAChB,sBAAsB;IACtB,aAAa;IACb,sBAAsB;IACtB,kBAAkB;IAClB,4BAA4B;IAC5B,wBAAwB;IACxB,sBAAsB;IACtB,aAAa;IACb,mCAAmC;AACvC;;AAEA;IACI,cAAc;IACd,sBAAsB;IACtB,kBAAkB;IAClB,eAAe;IACf,6BAA6B;AACjC;;AAEA;IACI,0BAA0B;IAC1B,kBAAkB;IAClB,gBAAgB;IAChB,aAAa;IACb,sBAAsB;IACtB,yBAAyB;IACzB,gBAAgB;IAChB,uBAAuB;AAC3B;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,aAAa;EACb,iBAAiB;AACnB",sourcesContent:["* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box\n}\n\n:root {\n    background: #222;\n    font-size: 18px;\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\n}\n\n@import url('https://fonts.googleapis.com/css2?family=Notable&display=swap');\n\n.container {\n    background: linear-gradient(178deg, hsl(46, 50%, 75%), hsl(36, 44%, 64%) 12%, hsl(36, 40%, 43%) 108%);\n    background-repeat: no-repeat;\n    margin: 0 auto;\n    min-height: 100vh;\n    width: clamp(430px, 95%, 1280px);\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 0.6rem;\n}\n\nh1 {\n    font-family: \"Notable\";\n    font-size: 3rem;\n    color: rgb(0, 0, 100);\n    letter-spacing: 0.2rem;\n    text-align: center;\n    text-shadow: 1px 1px 2px #666;\n}\n\n.marquee {\n    padding: 0.5rem;\n    color: #333;\n    background: #fefefe;\n    text-align: center;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 0.25rem;\n    box-shadow: inset 2px 2px 4px #888,\n                inset -1px -1px 3px lightgray;\n    width: 400px;\n    height: 4rem;\n    font-size: 1.2rem;\n}\n\n.button#start {\n    padding: 8px 14px;\n    border-radius: 24px;\n    box-shadow: 2px 2px 4px #777;\n    font-size: 0.9rem;\n    font-weight: bold;\n    background-color: hsl(120, 70%, 70%);\n    border: 1px solid #555;\n}\n\n.button#start:hover {\n  cursor: pointer;\n  \n  transform: translate(1px, 1px); \n  box-shadow: 1px 1px 2px #777;\n}\n\n.button#start:active {\n    box-shadow: 0px 0px 1px #888;\n    transform: translateX(2px) translateY(2px); \n  }\n\n.ships-container {\n    width: min(500px, 98%);\n    justify-content: center;\n    flex-wrap: wrap;\n    gap: 0.6rem;\n}\n\n.rotated {\n    transform-origin: 20px 20px;\n    transform: rotate(90deg);\n}\n\n.boards-container {\n    width: min(98%, 920px);\n    display: grid;\n    grid-template-columns: repeat(auto-fit, 412px);\n    justify-content: center;\n    gap: 0.8rem;\n    padding: 0.25rem 0.75rem;\n}\n\n#p2 .cell:hover {\n    background-color: rgba(20, 20, 20, 0.05);\n    cursor: pointer;\n}\n\n.board-container {\n    border: 6px solid #222;\n    border-radius: 6px;\n    box-shadow: 1px 2px 4px #888;\n    letter-spacing: 0.025rem;\n    background-color: skyblue\n}\n\n.board-header {\n    height: 40px;\n    background: #ddd;\n    padding: 4px;\n    font-size: 1.3rem;\n    font-weight: bold;\n    border-bottom: 3px solid black;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.board {\n    background: inherit;\n    height: min-content;\n    display: flex;\n    flex-wrap: wrap;\n}\n\n.cell {\n    height: 40px;\n    width: 40px;\n    outline: 1px dotted black;\n    border-radius: 8px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.ship > .cell {\n    background-color: #888;;\n    color: #fefefe;\n    font-weight: bold;\n    outline: 1px solid #444;\n    box-shadow: 1px 2px 3px #555;\n}\n\n.ship:hover > .cell {\n    box-shadow: 2px 3px 3px #444;\n    opacity: 0.9;\n}\n\n.marker {\n    width: 50%;\n    height: 50%;\n    border-radius: 50%;\n    box-shadow: 0px 1px 4px #333;\n}\n\n.log-container {\n    background: #111;\n    width: min(98%, 520px);\n    height: 196px;\n    border: 2px solid #eee;\n    border-radius: 4px;\n    box-shadow: 1px 1px 4px #888;\n    letter-spacing: 0.025rem;\n    margin-bottom: 0.25rem;\n    display: grid;\n    grid-template-rows: min-content 1fr;\n}\n\n.log-header {\n    color: #fefefe;\n    font-family: monospace;\n    text-align: center;\n    padding: 0.1rem;\n    border-bottom: 1px solid #eee;\n}\n\n.log {\n    color: hsl(310, 100%, 88%);\n    font-size: 0.85rem;\n    padding: 3px 5px;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    overflow: hidden;\n    letter-spacing: 0.12rem;\n}\n\n.log-span {\n  font-weight: bold;\n}\n\n.log-line-sunk {\n  font-style: italic;\n  color: yellow;\n  font-weight: bold;\n}"],sourceRoot:""}]);const s=i},314:n=>{"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var d=0;d<n.length;d++){var A=[].concat(n[d]);r&&i[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),e.push(A))}},e}},354:n=>{"use strict";n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},72:n=>{"use strict";var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],s=0;s<n.length;s++){var l=n[s],d=r.base?l[0]+r.base:l[0],A=a[d]||0,c="".concat(d," ").concat(A);a[d]=A+1;var p=t(c),u={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var h=o(u,r);r.byIndex=s,e.splice(s,0,{identifier:c,updater:h,references:1})}i.push(c)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var l=r(n,o),d=0;d<a.length;d++){var A=t(a[d]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}a=l}}},659:n=>{"use strict";var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},540:n=>{"use strict";n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,t)=>{"use strict";n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},825:n=>{"use strict";n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{"use strict";n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},785:n=>{const e=["A","B","C","D","E","F","G","H","I","J"];n.exports={row:n=>{if(n>10||n<1)throw new Error("Out of bounds!");return n-1},column:n=>{const t=e.indexOf(n);if(t>9||t<0)throw new Error("Out of bounds!");return t},cols:e}},414:(n,e,t)=>{const{isOccupied:r}=t(89),{cols:o,row:a,column:i}=t(785),s=t(906);function l(n,e,t){const r=document.createElement(n);return e&&e.forEach((n=>r.classList.add(n))),t&&r.setAttribute("id",t),r}n.exports={createDOMElement:l,renderBoard:n=>{const e=s().readBoard(),t=l("div",["board"],n);let r;return e.forEach((a=>a.forEach(((i,s)=>{r=l("div","p1"===n?["cell","droppable"]:["cell"]),r.dataset.column=o[s],r.dataset.row=e.indexOf(a)+1,t.appendChild(r)})))),t},renderCells:(n,e,t=!0)=>{const a=n.readBoard();let i;for(;e.firstChild;)e.removeChild(e.lastChild);a.forEach((n=>n.forEach(((s,d)=>{if(i="p2"===e.id?l("div",["cell"]):l("div",["cell","droppable"]),i.dataset.column=o[d],i.dataset.row=a.indexOf(n)+1,r(s)&&t&&(i.style.backgroundColor="#888"),"X"===s){const e=l("div",["marker"]);e.dataset.column=o[d],e.dataset.row=a.indexOf(n)+1,e.style.backgroundColor="rgb(255, 60, 20)",i.appendChild(e)}if("O"===s){const e=l("div",["marker"]);e.dataset.column=o[d],e.dataset.row=a.indexOf(n)+1,e.style.backgroundColor="#eee",i.appendChild(e)}e.appendChild(i)}))))},addToLog:(n,e,t,r,o,s)=>{const d=r.readBoard()[a(e[1])][i(e[0])],A=l("p",["log-line"]);A.textContent=`${n.getName()} attacked ${e.join(", ")} ... it's a `;const c=l("span",["log-span"]);if("X"===d?(c.textContent="HIT!",c.style.color="rgb(255, 60, 20)"):"O"===d&&(c.textContent="MISS!",c.style.color="#eee"),A.appendChild(c),s.appendChild(A),o){const n=l("p",["log-line-sunk"]);n.textContent=`${t.getPossessive()} ${o} has been SUNK!`,setTimeout((()=>{s.appendChild(n)}),150)}},changeMarquee:(n,e,t,r)=>{const o=n.toString(),a=e;return o.includes("Error")?a.textContent=o+" Try again":a.textContent=o,a.style.backgroundColor=r,a.style.fontSize=`${t}px`,a},createShip:function(n,e){const t=l("div",["ship-container"],`${n}-container`);t.style.height="42px",t.style.width=40*e+"px";const r=l("div",["ship"],n);r.style.cursor="grab",r.style.display="flex";let o=0;for(;e>0;){const t=l("div",["cell"]);o<3&&(t.textContent=n.toString().substring(o,o+1).toUpperCase()),r.appendChild(t),e--,o++}return t.appendChild(r),t}}},34:(n,e,t)=>{const{renderBoard:r,renderCells:o,addToLog:a,changeMarquee:i,createShip:s}=t(414),l=document.querySelector(".marquee"),d=document.getElementById("p1Container"),A=document.getElementById("p2Container"),c=document.getElementById("p1Header"),p=document.getElementById("p2Header"),u=document.querySelector(".log"),h=document.querySelector(".ships-container");let m,f;const B={renderBoards(){for(;d.contains(document.getElementById("p1"));)d.removeChild(document.getElementById("p1"));for(d.appendChild(r("p1"));A.contains(document.getElementById("p2"));)A.removeChild(document.getElementById("p2"));A.appendChild(r("p2")),c.textContent="You",p.textContent="Computer",u.textContent="",m=document.getElementById("p1"),f=document.getElementById("p2")},startGame(){this.renderBoards(),this.renderShips(),this.updateMarquee("Place your ships by dragging them onto your board (press R to rotate).",20)},renderShips(){const n=[s("Carrier",5),s("Battleship",4),s("Cruiser",3),s("Submarine",3),s("Destroyer",2)];for(;h.firstChild;)h.removeChild(h.lastChild);h.style.display="flex",n.forEach((n=>h.appendChild(n)))},p1UpdateBoard(n){o(n,m)},p2UpdateBoard(n){o(n,f,!1)},updateDisplay(n,e,t,r,o){setTimeout((()=>{this.updateMarquee(`${t.getPossessive()} turn`,28),a(n,e,t,r,o,u)}),200)},updateMarquee(n,e,t){t||(t="#fefefe"),i(n,l,e,t)},gameOver(n){let e;e=n.isComputer()?"rgb(255, 140, 140)":"rgb(180, 235, 180",i(`Winner: ${n.getName()}`,l,30,e)}};n.exports=B},906:(n,e,t)=>{const{row:r,column:o}=t(785),{checkCollisions:a,isOccupied:i}=t(89);n.exports=()=>{const n=[];!function(){for(let e=0;e<10;e++){const e=[];for(let n=0;n<10;n++)e.push(" ");n.push(e)}}();const e=[];return{readBoard:()=>n,receiveAttack:function(e,t){let a=null;const s=n[r(t)][o(e)];if("X"===s||"O"===s)throw new Error("Cell already hit!");return i(s)?(s.hit(),s.isSunk()&&(a=s.name),n[r(t)][o(e)]="X"):n[r(t)][o(e)]="O",{cell:[e,t],sunkShip:a}},placeShip:function(t,i,s,l){if(e.length>4)throw new Error("Ship limit exceeded.");let d=o(i),A=r(s);try{a(n,i,s,l,t)}catch(n){return n}if(e.push(t),"vertical"===l)for(let e=1;e<=t.getShipLength();e++)n[A][d]=t,A++;else for(let e=1;e<=t.getShipLength();e++)n[A][d]=t,d++;return!0},allShipsSunk:function(){return!(e.length<5)&&5===e.filter((n=>n.isSunk())).length},getAllShips:()=>e}}},138:(n,e,t)=>{const r=t(211),{startPlacementPhase:o,placementPhaseOver:a}=t(742),i=t(34),s=t(906);n.exports=function(){i.startGame();const n=r("You"),e=r("Computer",!0),t=s(),l=s();let d=n;o();const A=document.getElementById("p2");function c(){return l.allShipsSunk()||t.allShipsSunk()}n.placeShips(t),e.placeShips(l,"random"),i.p2UpdateBoard(l),A.addEventListener("click",(r=>{if(!a()||d!==n||c())return null;{const t=r.target.dataset,o=l.receiveAttack(t.column,t.row);if(i.p2UpdateBoard(l),i.updateDisplay(n,o.cell,e,l,o.sunkShip),c())return i.gameOver(n);d=e}setTimeout((()=>{const r=e.randomAttack(t),o=t.receiveAttack(r[0],r[1]);if(i.p1UpdateBoard(t),i.updateDisplay(e,o.cell,n,t,o.sunkShip),c())return i.gameOver(e);d=n}),800)}))}},89:(n,e,t)=>{const{row:r,column:o}=t(785);function a(n){return"object"==typeof n}n.exports={checkCollisions:function(n,e,t,i,s){const l=[];let d=o(e),A=r(t);if("vertical"===i)for(let e=1;e<=s.getShipLength();e++){if(d>9||A>9)throw new Error("Out of bounds!");l.push(n[A][d]),A++}else for(let e=1;e<=s.getShipLength();e++){if(d>9||A>9)throw new Error("Out of bounds!");l.push(n[A][d]),d++}if(l.find(a))throw new Error("Ship Collision!");return Error},isOccupied:a}},211:(n,e,t)=>{const{isOccupied:r}=t(89),{placeAllShips:o,placeRandomShips:a}=t(742),{cols:i}=t(785);n.exports=function(n,e=!1){return{getName:()=>n,getPossessive:()=>"You"===n?"Your":`${n}'s`,isComputer:()=>!0===e,randomAttack:n=>{const e=n.readBoard(),t=[];return e.forEach((n=>n.forEach(((o,a)=>{(r(o)||" "===o)&&t.push([i[a],e.indexOf(n)+1])})))),t[Math.floor(Math.random()*t.length)]},placeShips:(n,e=!1)=>{e?a(n):o(n)}}}},742:(n,e,t)=>{const r=t(432),o=t(34),{cols:a}=t(785),i=["Carrier","Battleship","Cruiser","Submarine","Destroyer"];let s=!0;n.exports={placeAllShips:function(n){const e=document.querySelector(".ships-container"),t=document.querySelectorAll(".ship"),a=[];t.forEach((t=>{function l(){t.style.transform="translate(-1px, -2px)"}t.onmouseover=l,t.onmouseout=()=>t.style.transform="",t.onmousedown=function(d){const A=document.querySelector(`#${t.id}-container`);let c="";function p(n,e){t.style.left=n-20+"px",t.style.top=e-t.offsetHeight/2+"px"}function u(n){p(n.pageX,n.pageY)}function h(n){"r"===n.key&&"vertical"!==c?(c="vertical",t.classList.add("rotated")):(c="",t.classList.remove("rotated"))}t.style.transform="",t.onmouseover=null,t.style.cursor="grabbing",t.style.position="absolute",t.style.zIndex=10,p(d.pageX,d.pageY),document.addEventListener("mousemove",u),window.addEventListener("keydown",h),t.onmouseup=d=>{t.style.display="none";const p=document.elementFromPoint(d.clientX,d.clientY);if(t.style.display="flex",document.removeEventListener("mousemove",u),!p.classList.contains("droppable"))return t.style.position="static",t.classList.remove("rotated"),t.onmouseover=l,void window.removeEventListener("keydown",h);const m=n.placeShip(r(t.id),p.dataset.column,p.dataset.row,c);!0===m?(o.p1UpdateBoard(n),a.push(t.id),A.removeChild(t),o.updateMarquee("Place your ships by dragging them onto your board (press R to rotate).",20),a.length===i.length&&(e.style.display="none",s=!1,o.updateMarquee("You're up, Admiral! Choose a cell on your opponent's board to attack.",20))):(t.style.position="static",t.classList.remove("rotated"),window.removeEventListener("keydown",h),o.updateMarquee(m,24,"rgb(255, 140, 140)"),t.onmouseover=l)}}}))},placeRandomShips:function n(e,t=0){if(t>=i.length)return;const o=["horizonal","vertical"][Math.floor(2*Math.random())],s=a[Math.floor(10*Math.random())],l=Math.floor(10*Math.random())+1,d=e.placeShip(r(i[t]),s,l,o);n(e,!0===d?++t:t)},startPlacementPhase:function(){s=!0},placementPhaseOver:()=>!s}},432:n=>{n.exports=n=>{let e;switch(n){case"Carrier":e=5;break;case"Battleship":e=4;break;case"Cruiser":case"Submarine":e=3;break;case"Destroyer":e=2;break;default:throw new Error("Unexpected ship name.")}let t=0;const r=()=>t===e;return{name:n,readHits:()=>t,getShipLength:()=>e,hit:()=>{r()||(t+=1)},isSunk:r}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{"use strict";var n=t(72),e=t.n(n),r=t(825),o=t.n(r),a=t(659),i=t.n(a),s=t(56),l=t.n(s),d=t(540),A=t.n(d),c=t(113),p=t.n(c),u=t(365),h={};h.styleTagTransform=p(),h.setAttributes=l(),h.insert=i().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=A(),e()(u.A,h),u.A&&u.A.locals&&u.A.locals;const m=t(34),f=t(138),B=document.querySelector("button#start");m.renderBoards(),B.addEventListener("click",f)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFPN1EsRUFBaUIsUUFDeEIsSUFBTSxFQUVQLE9BREF3USxFQUFvQk0sRUFBRUYsRUFBUSxDQUFFRyxFQUFHSCxJQUM1QkEsQ0FBTSxFQ0xkSixFQUFvQk0sRUFBSSxDQUFDNVEsRUFBUzhRLEtBQ2pDLElBQUksSUFBSXhCLEtBQU93QixFQUNYUixFQUFvQlMsRUFBRUQsRUFBWXhCLEtBQVNnQixFQUFvQlMsRUFBRS9RLEVBQVNzUCxJQUM1RTBCLE9BQU9DLGVBQWVqUixFQUFTc1AsRUFBSyxDQUFFNEIsWUFBWSxFQUFNQyxJQUFLTCxFQUFXeEIsSUFFMUUsRUNORGdCLEVBQW9CUyxFQUFJLENBQUNyTyxFQUFLME8sSUFBVUosT0FBT0ssVUFBVUMsZUFBZUMsS0FBSzdPLEVBQUswTyxHQ0FsRmQsRUFBb0JrQixRQUFLdFEsRSwwSUNXckJrQixFQUFVLENBQUMsRUFFZkEsRUFBUWdELGtCQUFvQixJQUM1QmhELEVBQVEwQyxjQUFnQixJQUVsQjFDLEVBQVEwQixPQUFTLFNBQWMsS0FBTSxRQUUzQzFCLEVBQVFlLE9BQVMsSUFDakJmLEVBQVErQyxtQkFBcUIsSUFFaEIsSUFBSSxJQUFTL0MsR0FLSixLQUFXLElBQVFxUCxRQUFTLElBQVFBLE9BQW5ELE1DeEJEckgsRUFBVSxFQUFRLElBQ2xCc0gsRUFBTyxFQUFRLEtBRWZDLEVBQWN6TixTQUFTQyxjQUFjLGdCQUUzQ2lHLEVBQVFDLGVBRVJzSCxFQUFZMUUsaUJBQWlCLFFBQVN5RSxFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVtcGxhdGUtd2VicGFjay1iYXNpYy8uL3NyYy9zdHlsZXMuY3NzIiwid2VicGFjazovL3RlbXBsYXRlLXdlYnBhY2stYmFzaWMvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3RlbXBsYXRlLXdlYnBhY2stYmFzaWMvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly90ZW1wbGF0ZS13ZWJwYWNrLWJhc2ljLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3RlbXBsYXRlLXdlYnBhY2stYmFzaWMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL3RlbXBsYXRlLXdlYnBhY2stYmFzaWMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vdGVtcGxhdGUtd2VicGFjay1iYXNpYy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly90ZW1wbGF0ZS13ZWJwYWNrLWJhc2ljLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vdGVtcGxhdGUtd2VicGFjay1iYXNpYy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL3RlbXBsYXRlLXdlYnBhY2stYmFzaWMvLi9zcmMvY29udmVyc2lvbnMuanMiLCJ3ZWJwYWNrOi8vdGVtcGxhdGUtd2VicGFjay1iYXNpYy8uL3NyYy9kaXNwbGF5LWhlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vdGVtcGxhdGUtd2VicGFjay1iYXNpYy8uL3NyYy9kaXNwbGF5LmpzIiwid2VicGFjazovL3RlbXBsYXRlLXdlYnBhY2stYmFzaWMvLi9zcmMvZ2FtZWJvYXJkLmpzIiwid2VicGFjazovL3RlbXBsYXRlLXdlYnBhY2stYmFzaWMvLi9zcmMvZ2FtZXBsYXkuanMiLCJ3ZWJwYWNrOi8vdGVtcGxhdGUtd2VicGFjay1iYXNpYy8uL3NyYy9oZWxwZXJzLmpzIiwid2VicGFjazovL3RlbXBsYXRlLXdlYnBhY2stYmFzaWMvLi9zcmMvcGxheWVyLmpzIiwid2VicGFjazovL3RlbXBsYXRlLXdlYnBhY2stYmFzaWMvLi9zcmMvc2hpcC1wbGFjZW1lbnQuanMiLCJ3ZWJwYWNrOi8vdGVtcGxhdGUtd2VicGFjay1iYXNpYy8uL3NyYy9zaGlwLmpzIiwid2VicGFjazovL3RlbXBsYXRlLXdlYnBhY2stYmFzaWMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdGVtcGxhdGUtd2VicGFjay1iYXNpYy93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly90ZW1wbGF0ZS13ZWJwYWNrLWJhc2ljL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly90ZW1wbGF0ZS13ZWJwYWNrLWJhc2ljL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdGVtcGxhdGUtd2VicGFjay1iYXNpYy93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vdGVtcGxhdGUtd2VicGFjay1iYXNpYy8uL3NyYy9zdHlsZXMuY3NzPzQ0YjIiLCJ3ZWJwYWNrOi8vdGVtcGxhdGUtd2VicGFjay1iYXNpYy8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PU5vdGFibGUmZGlzcGxheT1zd2FwKTtcIl0pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAqIHtcbiAgICBtYXJnaW46IDA7XG4gICAgcGFkZGluZzogMDtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94XG59XG5cbjpyb290IHtcbiAgICBiYWNrZ3JvdW5kOiAjMjIyO1xuICAgIGZvbnQtc2l6ZTogMThweDtcbiAgICBmb250LWZhbWlseTogJ1NlZ29lIFVJJywgVGFob21hLCBHZW5ldmEsIFZlcmRhbmEsIHNhbnMtc2VyaWZcbn1cblxuLmNvbnRhaW5lciB7XG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDE3OGRlZywgaHNsKDQ2LCA1MCUsIDc1JSksIGhzbCgzNiwgNDQlLCA2NCUpIDEyJSwgaHNsKDM2LCA0MCUsIDQzJSkgMTA4JSk7XG4gICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgICBtYXJnaW46IDAgYXV0bztcbiAgICBtaW4taGVpZ2h0OiAxMDB2aDtcbiAgICB3aWR0aDogY2xhbXAoNDMwcHgsIDk1JSwgMTI4MHB4KTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBnYXA6IDAuNnJlbTtcbn1cblxuaDEge1xuICAgIGZvbnQtZmFtaWx5OiBcIk5vdGFibGVcIjtcbiAgICBmb250LXNpemU6IDNyZW07XG4gICAgY29sb3I6IHJnYigwLCAwLCAxMDApO1xuICAgIGxldHRlci1zcGFjaW5nOiAwLjJyZW07XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIHRleHQtc2hhZG93OiAxcHggMXB4IDJweCAjNjY2O1xufVxuXG4ubWFycXVlZSB7XG4gICAgcGFkZGluZzogMC41cmVtO1xuICAgIGNvbG9yOiAjMzMzO1xuICAgIGJhY2tncm91bmQ6ICNmZWZlZmU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBib3JkZXItcmFkaXVzOiAwLjI1cmVtO1xuICAgIGJveC1zaGFkb3c6IGluc2V0IDJweCAycHggNHB4ICM4ODgsXG4gICAgICAgICAgICAgICAgaW5zZXQgLTFweCAtMXB4IDNweCBsaWdodGdyYXk7XG4gICAgd2lkdGg6IDQwMHB4O1xuICAgIGhlaWdodDogNHJlbTtcbiAgICBmb250LXNpemU6IDEuMnJlbTtcbn1cblxuLmJ1dHRvbiNzdGFydCB7XG4gICAgcGFkZGluZzogOHB4IDE0cHg7XG4gICAgYm9yZGVyLXJhZGl1czogMjRweDtcbiAgICBib3gtc2hhZG93OiAycHggMnB4IDRweCAjNzc3O1xuICAgIGZvbnQtc2l6ZTogMC45cmVtO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGJhY2tncm91bmQtY29sb3I6IGhzbCgxMjAsIDcwJSwgNzAlKTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjNTU1O1xufVxuXG4uYnV0dG9uI3N0YXJ0OmhvdmVyIHtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMXB4LCAxcHgpOyBcbiAgYm94LXNoYWRvdzogMXB4IDFweCAycHggIzc3Nztcbn1cblxuLmJ1dHRvbiNzdGFydDphY3RpdmUge1xuICAgIGJveC1zaGFkb3c6IDBweCAwcHggMXB4ICM4ODg7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDJweCkgdHJhbnNsYXRlWSgycHgpOyBcbiAgfVxuXG4uc2hpcHMtY29udGFpbmVyIHtcbiAgICB3aWR0aDogbWluKDUwMHB4LCA5OCUpO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGZsZXgtd3JhcDogd3JhcDtcbiAgICBnYXA6IDAuNnJlbTtcbn1cblxuLnJvdGF0ZWQge1xuICAgIHRyYW5zZm9ybS1vcmlnaW46IDIwcHggMjBweDtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7XG59XG5cbi5ib2FyZHMtY29udGFpbmVyIHtcbiAgICB3aWR0aDogbWluKDk4JSwgOTIwcHgpO1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoYXV0by1maXQsIDQxMnB4KTtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBnYXA6IDAuOHJlbTtcbiAgICBwYWRkaW5nOiAwLjI1cmVtIDAuNzVyZW07XG59XG5cbiNwMiAuY2VsbDpob3ZlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyMCwgMjAsIDIwLCAwLjA1KTtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbi5ib2FyZC1jb250YWluZXIge1xuICAgIGJvcmRlcjogNnB4IHNvbGlkICMyMjI7XG4gICAgYm9yZGVyLXJhZGl1czogNnB4O1xuICAgIGJveC1zaGFkb3c6IDFweCAycHggNHB4ICM4ODg7XG4gICAgbGV0dGVyLXNwYWNpbmc6IDAuMDI1cmVtO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHNreWJsdWVcbn1cblxuLmJvYXJkLWhlYWRlciB7XG4gICAgaGVpZ2h0OiA0MHB4O1xuICAgIGJhY2tncm91bmQ6ICNkZGQ7XG4gICAgcGFkZGluZzogNHB4O1xuICAgIGZvbnQtc2l6ZTogMS4zcmVtO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGJvcmRlci1ib3R0b206IDNweCBzb2xpZCBibGFjaztcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG59XG5cbi5ib2FyZCB7XG4gICAgYmFja2dyb3VuZDogaW5oZXJpdDtcbiAgICBoZWlnaHQ6IG1pbi1jb250ZW50O1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC13cmFwOiB3cmFwO1xufVxuXG4uY2VsbCB7XG4gICAgaGVpZ2h0OiA0MHB4O1xuICAgIHdpZHRoOiA0MHB4O1xuICAgIG91dGxpbmU6IDFweCBkb3R0ZWQgYmxhY2s7XG4gICAgYm9yZGVyLXJhZGl1czogOHB4O1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cblxuLnNoaXAgPiAuY2VsbCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzg4ODs7XG4gICAgY29sb3I6ICNmZWZlZmU7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgb3V0bGluZTogMXB4IHNvbGlkICM0NDQ7XG4gICAgYm94LXNoYWRvdzogMXB4IDJweCAzcHggIzU1NTtcbn1cblxuLnNoaXA6aG92ZXIgPiAuY2VsbCB7XG4gICAgYm94LXNoYWRvdzogMnB4IDNweCAzcHggIzQ0NDtcbiAgICBvcGFjaXR5OiAwLjk7XG59XG5cbi5tYXJrZXIge1xuICAgIHdpZHRoOiA1MCU7XG4gICAgaGVpZ2h0OiA1MCU7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIGJveC1zaGFkb3c6IDBweCAxcHggNHB4ICMzMzM7XG59XG5cbi5sb2ctY29udGFpbmVyIHtcbiAgICBiYWNrZ3JvdW5kOiAjMTExO1xuICAgIHdpZHRoOiBtaW4oOTglLCA1MjBweCk7XG4gICAgaGVpZ2h0OiAxOTZweDtcbiAgICBib3JkZXI6IDJweCBzb2xpZCAjZWVlO1xuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICBib3gtc2hhZG93OiAxcHggMXB4IDRweCAjODg4O1xuICAgIGxldHRlci1zcGFjaW5nOiAwLjAyNXJlbTtcbiAgICBtYXJnaW4tYm90dG9tOiAwLjI1cmVtO1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBtaW4tY29udGVudCAxZnI7XG59XG5cbi5sb2ctaGVhZGVyIHtcbiAgICBjb2xvcjogI2ZlZmVmZTtcbiAgICBmb250LWZhbWlseTogbW9ub3NwYWNlO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBwYWRkaW5nOiAwLjFyZW07XG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlZWU7XG59XG5cbi5sb2cge1xuICAgIGNvbG9yOiBoc2woMzEwLCAxMDAlLCA4OCUpO1xuICAgIGZvbnQtc2l6ZTogMC44NXJlbTtcbiAgICBwYWRkaW5nOiAzcHggNXB4O1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgbGV0dGVyLXNwYWNpbmc6IDAuMTJyZW07XG59XG5cbi5sb2ctc3BhbiB7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuXG4ubG9nLWxpbmUtc3VuayB7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcbiAgY29sb3I6IHllbGxvdztcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLFNBQVM7SUFDVCxVQUFVO0lBQ1Y7QUFDSjs7QUFFQTtJQUNJLGdCQUFnQjtJQUNoQixlQUFlO0lBQ2Y7QUFDSjs7QUFJQTtJQUNJLHFHQUFxRztJQUNyRyw0QkFBNEI7SUFDNUIsY0FBYztJQUNkLGlCQUFpQjtJQUNqQixnQ0FBZ0M7SUFDaEMsYUFBYTtJQUNiLHNCQUFzQjtJQUN0QixtQkFBbUI7SUFDbkIsV0FBVztBQUNmOztBQUVBO0lBQ0ksc0JBQXNCO0lBQ3RCLGVBQWU7SUFDZixxQkFBcUI7SUFDckIsc0JBQXNCO0lBQ3RCLGtCQUFrQjtJQUNsQiw2QkFBNkI7QUFDakM7O0FBRUE7SUFDSSxlQUFlO0lBQ2YsV0FBVztJQUNYLG1CQUFtQjtJQUNuQixrQkFBa0I7SUFDbEIsYUFBYTtJQUNiLG1CQUFtQjtJQUNuQix1QkFBdUI7SUFDdkIsc0JBQXNCO0lBQ3RCOzZDQUN5QztJQUN6QyxZQUFZO0lBQ1osWUFBWTtJQUNaLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLGlCQUFpQjtJQUNqQixtQkFBbUI7SUFDbkIsNEJBQTRCO0lBQzVCLGlCQUFpQjtJQUNqQixpQkFBaUI7SUFDakIsb0NBQW9DO0lBQ3BDLHNCQUFzQjtBQUMxQjs7QUFFQTtFQUNFLGVBQWU7O0VBRWYsOEJBQThCO0VBQzlCLDRCQUE0QjtBQUM5Qjs7QUFFQTtJQUNJLDRCQUE0QjtJQUM1QiwwQ0FBMEM7RUFDNUM7O0FBRUY7SUFDSSxzQkFBc0I7SUFDdEIsdUJBQXVCO0lBQ3ZCLGVBQWU7SUFDZixXQUFXO0FBQ2Y7O0FBRUE7SUFDSSwyQkFBMkI7SUFDM0Isd0JBQXdCO0FBQzVCOztBQUVBO0lBQ0ksc0JBQXNCO0lBQ3RCLGFBQWE7SUFDYiw4Q0FBOEM7SUFDOUMsdUJBQXVCO0lBQ3ZCLFdBQVc7SUFDWCx3QkFBd0I7QUFDNUI7O0FBRUE7SUFDSSx3Q0FBd0M7SUFDeEMsZUFBZTtBQUNuQjs7QUFFQTtJQUNJLHNCQUFzQjtJQUN0QixrQkFBa0I7SUFDbEIsNEJBQTRCO0lBQzVCLHdCQUF3QjtJQUN4QjtBQUNKOztBQUVBO0lBQ0ksWUFBWTtJQUNaLGdCQUFnQjtJQUNoQixZQUFZO0lBQ1osaUJBQWlCO0lBQ2pCLGlCQUFpQjtJQUNqQiw4QkFBOEI7SUFDOUIsYUFBYTtJQUNiLHVCQUF1QjtJQUN2QixtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxtQkFBbUI7SUFDbkIsbUJBQW1CO0lBQ25CLGFBQWE7SUFDYixlQUFlO0FBQ25COztBQUVBO0lBQ0ksWUFBWTtJQUNaLFdBQVc7SUFDWCx5QkFBeUI7SUFDekIsa0JBQWtCO0lBQ2xCLGFBQWE7SUFDYix1QkFBdUI7SUFDdkIsbUJBQW1CO0FBQ3ZCOztBQUVBO0lBQ0ksc0JBQXNCO0lBQ3RCLGNBQWM7SUFDZCxpQkFBaUI7SUFDakIsdUJBQXVCO0lBQ3ZCLDRCQUE0QjtBQUNoQzs7QUFFQTtJQUNJLDRCQUE0QjtJQUM1QixZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksVUFBVTtJQUNWLFdBQVc7SUFDWCxrQkFBa0I7SUFDbEIsNEJBQTRCO0FBQ2hDOztBQUVBO0lBQ0ksZ0JBQWdCO0lBQ2hCLHNCQUFzQjtJQUN0QixhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLGtCQUFrQjtJQUNsQiw0QkFBNEI7SUFDNUIsd0JBQXdCO0lBQ3hCLHNCQUFzQjtJQUN0QixhQUFhO0lBQ2IsbUNBQW1DO0FBQ3ZDOztBQUVBO0lBQ0ksY0FBYztJQUNkLHNCQUFzQjtJQUN0QixrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLDZCQUE2QjtBQUNqQzs7QUFFQTtJQUNJLDBCQUEwQjtJQUMxQixrQkFBa0I7SUFDbEIsZ0JBQWdCO0lBQ2hCLGFBQWE7SUFDYixzQkFBc0I7SUFDdEIseUJBQXlCO0lBQ3pCLGdCQUFnQjtJQUNoQix1QkFBdUI7QUFDM0I7O0FBRUE7RUFDRSxpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsYUFBYTtFQUNiLGlCQUFpQjtBQUNuQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIqIHtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBwYWRkaW5nOiAwO1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94XFxufVxcblxcbjpyb290IHtcXG4gICAgYmFja2dyb3VuZDogIzIyMjtcXG4gICAgZm9udC1zaXplOiAxOHB4O1xcbiAgICBmb250LWZhbWlseTogJ1NlZ29lIFVJJywgVGFob21hLCBHZW5ldmEsIFZlcmRhbmEsIHNhbnMtc2VyaWZcXG59XFxuXFxuQGltcG9ydCB1cmwoJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9Tm90YWJsZSZkaXNwbGF5PXN3YXAnKTtcXG5cXG4uY29udGFpbmVyIHtcXG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDE3OGRlZywgaHNsKDQ2LCA1MCUsIDc1JSksIGhzbCgzNiwgNDQlLCA2NCUpIDEyJSwgaHNsKDM2LCA0MCUsIDQzJSkgMTA4JSk7XFxuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XFxuICAgIG1hcmdpbjogMCBhdXRvO1xcbiAgICBtaW4taGVpZ2h0OiAxMDB2aDtcXG4gICAgd2lkdGg6IGNsYW1wKDQzMHB4LCA5NSUsIDEyODBweCk7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGdhcDogMC42cmVtO1xcbn1cXG5cXG5oMSB7XFxuICAgIGZvbnQtZmFtaWx5OiBcXFwiTm90YWJsZVxcXCI7XFxuICAgIGZvbnQtc2l6ZTogM3JlbTtcXG4gICAgY29sb3I6IHJnYigwLCAwLCAxMDApO1xcbiAgICBsZXR0ZXItc3BhY2luZzogMC4ycmVtO1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIHRleHQtc2hhZG93OiAxcHggMXB4IDJweCAjNjY2O1xcbn1cXG5cXG4ubWFycXVlZSB7XFxuICAgIHBhZGRpbmc6IDAuNXJlbTtcXG4gICAgY29sb3I6ICMzMzM7XFxuICAgIGJhY2tncm91bmQ6ICNmZWZlZmU7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07XFxuICAgIGJveC1zaGFkb3c6IGluc2V0IDJweCAycHggNHB4ICM4ODgsXFxuICAgICAgICAgICAgICAgIGluc2V0IC0xcHggLTFweCAzcHggbGlnaHRncmF5O1xcbiAgICB3aWR0aDogNDAwcHg7XFxuICAgIGhlaWdodDogNHJlbTtcXG4gICAgZm9udC1zaXplOiAxLjJyZW07XFxufVxcblxcbi5idXR0b24jc3RhcnQge1xcbiAgICBwYWRkaW5nOiA4cHggMTRweDtcXG4gICAgYm9yZGVyLXJhZGl1czogMjRweDtcXG4gICAgYm94LXNoYWRvdzogMnB4IDJweCA0cHggIzc3NztcXG4gICAgZm9udC1zaXplOiAwLjlyZW07XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBoc2woMTIwLCA3MCUsIDcwJSk7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICM1NTU7XFxufVxcblxcbi5idXR0b24jc3RhcnQ6aG92ZXIge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgXFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgxcHgsIDFweCk7IFxcbiAgYm94LXNoYWRvdzogMXB4IDFweCAycHggIzc3NztcXG59XFxuXFxuLmJ1dHRvbiNzdGFydDphY3RpdmUge1xcbiAgICBib3gtc2hhZG93OiAwcHggMHB4IDFweCAjODg4O1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMnB4KSB0cmFuc2xhdGVZKDJweCk7IFxcbiAgfVxcblxcbi5zaGlwcy1jb250YWluZXIge1xcbiAgICB3aWR0aDogbWluKDUwMHB4LCA5OCUpO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgZmxleC13cmFwOiB3cmFwO1xcbiAgICBnYXA6IDAuNnJlbTtcXG59XFxuXFxuLnJvdGF0ZWQge1xcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiAyMHB4IDIwcHg7XFxuICAgIHRyYW5zZm9ybTogcm90YXRlKDkwZGVnKTtcXG59XFxuXFxuLmJvYXJkcy1jb250YWluZXIge1xcbiAgICB3aWR0aDogbWluKDk4JSwgOTIwcHgpO1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdChhdXRvLWZpdCwgNDEycHgpO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgZ2FwOiAwLjhyZW07XFxuICAgIHBhZGRpbmc6IDAuMjVyZW0gMC43NXJlbTtcXG59XFxuXFxuI3AyIC5jZWxsOmhvdmVyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyMCwgMjAsIDIwLCAwLjA1KTtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4uYm9hcmQtY29udGFpbmVyIHtcXG4gICAgYm9yZGVyOiA2cHggc29saWQgIzIyMjtcXG4gICAgYm9yZGVyLXJhZGl1czogNnB4O1xcbiAgICBib3gtc2hhZG93OiAxcHggMnB4IDRweCAjODg4O1xcbiAgICBsZXR0ZXItc3BhY2luZzogMC4wMjVyZW07XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHNreWJsdWVcXG59XFxuXFxuLmJvYXJkLWhlYWRlciB7XFxuICAgIGhlaWdodDogNDBweDtcXG4gICAgYmFja2dyb3VuZDogI2RkZDtcXG4gICAgcGFkZGluZzogNHB4O1xcbiAgICBmb250LXNpemU6IDEuM3JlbTtcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICAgIGJvcmRlci1ib3R0b206IDNweCBzb2xpZCBibGFjaztcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbi5ib2FyZCB7XFxuICAgIGJhY2tncm91bmQ6IGluaGVyaXQ7XFxuICAgIGhlaWdodDogbWluLWNvbnRlbnQ7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtd3JhcDogd3JhcDtcXG59XFxuXFxuLmNlbGwge1xcbiAgICBoZWlnaHQ6IDQwcHg7XFxuICAgIHdpZHRoOiA0MHB4O1xcbiAgICBvdXRsaW5lOiAxcHggZG90dGVkIGJsYWNrO1xcbiAgICBib3JkZXItcmFkaXVzOiA4cHg7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4uc2hpcCA+IC5jZWxsIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzg4ODs7XFxuICAgIGNvbG9yOiAjZmVmZWZlO1xcbiAgICBmb250LXdlaWdodDogYm9sZDtcXG4gICAgb3V0bGluZTogMXB4IHNvbGlkICM0NDQ7XFxuICAgIGJveC1zaGFkb3c6IDFweCAycHggM3B4ICM1NTU7XFxufVxcblxcbi5zaGlwOmhvdmVyID4gLmNlbGwge1xcbiAgICBib3gtc2hhZG93OiAycHggM3B4IDNweCAjNDQ0O1xcbiAgICBvcGFjaXR5OiAwLjk7XFxufVxcblxcbi5tYXJrZXIge1xcbiAgICB3aWR0aDogNTAlO1xcbiAgICBoZWlnaHQ6IDUwJTtcXG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgICBib3gtc2hhZG93OiAwcHggMXB4IDRweCAjMzMzO1xcbn1cXG5cXG4ubG9nLWNvbnRhaW5lciB7XFxuICAgIGJhY2tncm91bmQ6ICMxMTE7XFxuICAgIHdpZHRoOiBtaW4oOTglLCA1MjBweCk7XFxuICAgIGhlaWdodDogMTk2cHg7XFxuICAgIGJvcmRlcjogMnB4IHNvbGlkICNlZWU7XFxuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gICAgYm94LXNoYWRvdzogMXB4IDFweCA0cHggIzg4ODtcXG4gICAgbGV0dGVyLXNwYWNpbmc6IDAuMDI1cmVtO1xcbiAgICBtYXJnaW4tYm90dG9tOiAwLjI1cmVtO1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IG1pbi1jb250ZW50IDFmcjtcXG59XFxuXFxuLmxvZy1oZWFkZXIge1xcbiAgICBjb2xvcjogI2ZlZmVmZTtcXG4gICAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZTtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICBwYWRkaW5nOiAwLjFyZW07XFxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZWVlO1xcbn1cXG5cXG4ubG9nIHtcXG4gICAgY29sb3I6IGhzbCgzMTAsIDEwMCUsIDg4JSk7XFxuICAgIGZvbnQtc2l6ZTogMC44NXJlbTtcXG4gICAgcGFkZGluZzogM3B4IDVweDtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gICAgbGV0dGVyLXNwYWNpbmc6IDAuMTJyZW07XFxufVxcblxcbi5sb2ctc3BhbiB7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG59XFxuXFxuLmxvZy1saW5lLXN1bmsge1xcbiAgZm9udC1zdHlsZTogaXRhbGljO1xcbiAgY29sb3I6IHllbGxvdztcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiY29uc3QgY29scyA9IFtcIkFcIiwgXCJCXCIsIFwiQ1wiLCBcIkRcIiwgXCJFXCIsIFwiRlwiLCBcIkdcIiwgXCJIXCIsIFwiSVwiLCBcIkpcIl07XG5cbmNvbnN0IHJvdyA9IChyb3dDb29yZCkgPT4ge1xuICBpZiAocm93Q29vcmQgPiAxMCB8fCByb3dDb29yZCA8IDEpIHRocm93IG5ldyBFcnJvcihcIk91dCBvZiBib3VuZHMhXCIpO1xuICByZXR1cm4gcm93Q29vcmQgLSAxO1xufTtcblxuY29uc3QgY29sdW1uID0gKGNvbHVtbkNvb3JkKSA9PiB7XG4gIGNvbnN0IGluZGV4ID0gY29scy5pbmRleE9mKGNvbHVtbkNvb3JkKTtcblxuICBpZiAoaW5kZXggPiA5IHx8IGluZGV4IDwgMCkgdGhyb3cgbmV3IEVycm9yKFwiT3V0IG9mIGJvdW5kcyFcIik7XG4gIHJldHVybiBpbmRleDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0geyByb3csIGNvbHVtbiwgY29scyB9O1xuIiwiY29uc3QgeyBpc09jY3VwaWVkIH0gPSByZXF1aXJlKFwiLi9oZWxwZXJzXCIpO1xuY29uc3QgeyBjb2xzLCByb3csIGNvbHVtbiB9ID0gcmVxdWlyZShcIi4vY29udmVyc2lvbnNcIik7XG5jb25zdCBHYW1lYm9hcmQgPSByZXF1aXJlKFwiLi9nYW1lYm9hcmRcIik7XG5cbmZ1bmN0aW9uIGNyZWF0ZURPTUVsZW1lbnQoZWxlbWVudCwgY2xhc3NlcywgaWQpIHtcbiAgY29uc3QgbmV3RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZWxlbWVudCk7XG4gIGlmIChjbGFzc2VzKSBjbGFzc2VzLmZvckVhY2goKHZhbHVlKSA9PiBuZXdFbGVtZW50LmNsYXNzTGlzdC5hZGQodmFsdWUpKTtcbiAgaWYgKGlkKSBuZXdFbGVtZW50LnNldEF0dHJpYnV0ZShcImlkXCIsIGlkKTtcblxuICByZXR1cm4gbmV3RWxlbWVudDtcbn1cblxuY29uc3QgcmVuZGVyQm9hcmQgPSAoaWQpID0+IHtcbiAgY29uc3QgYm9hcmQgPSBHYW1lYm9hcmQoKS5yZWFkQm9hcmQoKTtcbiAgY29uc3QgZG9tQm9hcmQgPSBjcmVhdGVET01FbGVtZW50KFwiZGl2XCIsIFtcImJvYXJkXCJdLCBpZCk7XG4gIGxldCBuZXdDZWxsO1xuICBib2FyZC5mb3JFYWNoKChib2FyZFJvdykgPT5cbiAgICBib2FyZFJvdy5mb3JFYWNoKChjZWxsLCBpbmRleCkgPT4ge1xuICAgICAgaWYgKGlkID09PSBcInAxXCIpIG5ld0NlbGwgPSBjcmVhdGVET01FbGVtZW50KFwiZGl2XCIsIFtcImNlbGxcIiwgXCJkcm9wcGFibGVcIl0pO1xuICAgICAgZWxzZSBuZXdDZWxsID0gY3JlYXRlRE9NRWxlbWVudChcImRpdlwiLCBbXCJjZWxsXCJdKTtcbiAgICAgIG5ld0NlbGwuZGF0YXNldC5jb2x1bW4gPSBjb2xzW2luZGV4XTtcbiAgICAgIG5ld0NlbGwuZGF0YXNldC5yb3cgPSBib2FyZC5pbmRleE9mKGJvYXJkUm93KSArIDE7XG4gICAgICBkb21Cb2FyZC5hcHBlbmRDaGlsZChuZXdDZWxsKTtcbiAgICB9KSxcbiAgKTtcbiAgcmV0dXJuIGRvbUJvYXJkO1xufTtcblxuY29uc3QgY3JlYXRlU2hpcCA9IGZ1bmN0aW9uIGNyZWF0ZVNoaXBPbkRpc3BsYXkoaWQsIGxlbmd0aCkge1xuICBjb25zdCBzaGlwQ29udGFpbmVyID0gY3JlYXRlRE9NRWxlbWVudCgnZGl2JywgW1wic2hpcC1jb250YWluZXJcIl0sIGAke2lkfS1jb250YWluZXJgKTtcbiAgc2hpcENvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSAnNDJweCc7XG4gIHNoaXBDb250YWluZXIuc3R5bGUud2lkdGggPSBsZW5ndGggKiA0MCArICdweCc7XG4gIGNvbnN0IG5ld1NoaXAgPSBjcmVhdGVET01FbGVtZW50KFwiZGl2XCIsIFtcInNoaXBcIl0sIGlkKTtcbiAgbmV3U2hpcC5zdHlsZS5jdXJzb3IgPSBcImdyYWJcIjtcbiAgbmV3U2hpcC5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XG4gIGxldCBuID0gMDtcbiAgd2hpbGUgKGxlbmd0aCA+IDApIHtcbiAgICBjb25zdCBuZXdDZWxsID0gY3JlYXRlRE9NRWxlbWVudChcImRpdlwiLCBbXCJjZWxsXCJdKTtcbiAgICBpZiAobiA8IDMpXG4gICAgICBuZXdDZWxsLnRleHRDb250ZW50ID0gaWRcbiAgICAgICAgLnRvU3RyaW5nKClcbiAgICAgICAgLnN1YnN0cmluZyhuLCBuICsgMSlcbiAgICAgICAgLnRvVXBwZXJDYXNlKCk7XG4gICAgbmV3U2hpcC5hcHBlbmRDaGlsZChuZXdDZWxsKTtcbiAgICBsZW5ndGgtLTtcbiAgICBuKys7XG4gIH1cbiAgc2hpcENvbnRhaW5lci5hcHBlbmRDaGlsZChuZXdTaGlwKVxuICByZXR1cm4gc2hpcENvbnRhaW5lcjtcbn07XG5cbmNvbnN0IHJlbmRlckNlbGxzID0gKGdhbWVib2FyZCwgZG9tQm9hcmQsIHNob3dTaGlwcyA9IHRydWUpID0+IHtcbiAgY29uc3QgYm9hcmQgPSBnYW1lYm9hcmQucmVhZEJvYXJkKCk7XG4gIGxldCBuZXdDZWxsO1xuICB3aGlsZSAoZG9tQm9hcmQuZmlyc3RDaGlsZCkgZG9tQm9hcmQucmVtb3ZlQ2hpbGQoZG9tQm9hcmQubGFzdENoaWxkKTtcbiAgYm9hcmQuZm9yRWFjaCgoYm9hcmRSb3cpID0+XG4gICAgYm9hcmRSb3cuZm9yRWFjaCgoY2VsbCwgaW5kZXgpID0+IHtcbiAgICAgIGlmIChkb21Cb2FyZC5pZCA9PT0gXCJwMlwiKSBuZXdDZWxsID0gY3JlYXRlRE9NRWxlbWVudChcImRpdlwiLCBbXCJjZWxsXCJdKTtcbiAgICAgIGVsc2UgbmV3Q2VsbCA9IGNyZWF0ZURPTUVsZW1lbnQoXCJkaXZcIiwgW1wiY2VsbFwiLCBcImRyb3BwYWJsZVwiXSk7XG4gICAgICBuZXdDZWxsLmRhdGFzZXQuY29sdW1uID0gY29sc1tpbmRleF07XG4gICAgICBuZXdDZWxsLmRhdGFzZXQucm93ID0gYm9hcmQuaW5kZXhPZihib2FyZFJvdykgKyAxO1xuICAgICAgaWYgKGlzT2NjdXBpZWQoY2VsbCkpIHtcbiAgICAgICAgaWYgKHNob3dTaGlwcykgbmV3Q2VsbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcIiM4ODhcIjtcbiAgICAgIH1cbiAgICAgIGlmIChjZWxsID09PSBcIlhcIikge1xuICAgICAgICBjb25zdCBuZXdNYXJrZXIgPSBjcmVhdGVET01FbGVtZW50KFwiZGl2XCIsIFtcIm1hcmtlclwiXSk7XG4gICAgICAgIG5ld01hcmtlci5kYXRhc2V0LmNvbHVtbiA9IGNvbHNbaW5kZXhdO1xuICAgICAgICBuZXdNYXJrZXIuZGF0YXNldC5yb3cgPSBib2FyZC5pbmRleE9mKGJvYXJkUm93KSArIDE7XG4gICAgICAgIG5ld01hcmtlci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJnYigyNTUsIDYwLCAyMClcIjtcbiAgICAgICAgbmV3Q2VsbC5hcHBlbmRDaGlsZChuZXdNYXJrZXIpO1xuICAgICAgfVxuICAgICAgaWYgKGNlbGwgPT09IFwiT1wiKSB7XG4gICAgICAgIGNvbnN0IG5ld01hcmtlciA9IGNyZWF0ZURPTUVsZW1lbnQoXCJkaXZcIiwgW1wibWFya2VyXCJdKTtcbiAgICAgICAgbmV3TWFya2VyLmRhdGFzZXQuY29sdW1uID0gY29sc1tpbmRleF07XG4gICAgICAgIG5ld01hcmtlci5kYXRhc2V0LnJvdyA9IGJvYXJkLmluZGV4T2YoYm9hcmRSb3cpICsgMTtcbiAgICAgICAgbmV3TWFya2VyLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiI2VlZVwiO1xuICAgICAgICBuZXdDZWxsLmFwcGVuZENoaWxkKG5ld01hcmtlcik7XG4gICAgICB9XG4gICAgICBkb21Cb2FyZC5hcHBlbmRDaGlsZChuZXdDZWxsKTtcbiAgICB9KSxcbiAgKTtcbn07XG5cbmNvbnN0IGFkZFRvTG9nID0gKHBsYXllciwgY2VsbCwgb3Bwb25lbnQsIG9wcEJvYXJkLCBzaGlwU3VuaywgZG9tTG9nKSA9PiB7XG4gIGNvbnN0IGF0dGFja2VkQ2VsbCA9IG9wcEJvYXJkLnJlYWRCb2FyZCgpW3JvdyhjZWxsWzFdKV1bY29sdW1uKGNlbGxbMF0pXTtcblxuICBjb25zdCBuZXdMaW5lID0gY3JlYXRlRE9NRWxlbWVudChcInBcIiwgW1wibG9nLWxpbmVcIl0pO1xuICBuZXdMaW5lLnRleHRDb250ZW50ID0gYCR7cGxheWVyLmdldE5hbWUoKX0gYXR0YWNrZWQgJHtjZWxsLmpvaW4oXCIsIFwiKX0gLi4uIGl0J3MgYSBgO1xuICBjb25zdCBzcGFuID0gY3JlYXRlRE9NRWxlbWVudChcInNwYW5cIiwgW1wibG9nLXNwYW5cIl0pO1xuICBpZiAoYXR0YWNrZWRDZWxsID09PSBcIlhcIikge1xuICAgIHNwYW4udGV4dENvbnRlbnQgPSBcIkhJVCFcIjtcbiAgICBzcGFuLnN0eWxlLmNvbG9yID0gXCJyZ2IoMjU1LCA2MCwgMjApXCI7XG4gIH0gZWxzZSBpZiAoYXR0YWNrZWRDZWxsID09PSBcIk9cIikge1xuICAgIHNwYW4udGV4dENvbnRlbnQgPSBcIk1JU1MhXCI7XG4gICAgc3Bhbi5zdHlsZS5jb2xvciA9IFwiI2VlZVwiO1xuICB9XG4gIG5ld0xpbmUuYXBwZW5kQ2hpbGQoc3Bhbik7XG4gIGRvbUxvZy5hcHBlbmRDaGlsZChuZXdMaW5lKTtcbiAgaWYgKHNoaXBTdW5rKSB7XG4gICAgY29uc3Qgc3Vua0xpbmUgPSBjcmVhdGVET01FbGVtZW50KFwicFwiLCBbXCJsb2ctbGluZS1zdW5rXCJdKTtcbiAgICBzdW5rTGluZS50ZXh0Q29udGVudCA9IGAke29wcG9uZW50LmdldFBvc3Nlc3NpdmUoKX0gJHtzaGlwU3Vua30gaGFzIGJlZW4gU1VOSyFgO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgZG9tTG9nLmFwcGVuZENoaWxkKHN1bmtMaW5lKTtcbiAgICB9LCAxNTApO1xuICB9XG59O1xuXG5jb25zdCBjaGFuZ2VNYXJxdWVlID0gKHRleHRDb250ZW50LCBkb21Ob2RlLCBzaXplLCBjb2xvcikgPT4ge1xuICBjb25zdCBtZXNzYWdlID0gdGV4dENvbnRlbnQudG9TdHJpbmcoKTtcbiAgY29uc3Qgbm9kZSA9IGRvbU5vZGU7XG4gIGlmIChtZXNzYWdlLmluY2x1ZGVzKFwiRXJyb3JcIikpIG5vZGUudGV4dENvbnRlbnQgPSBtZXNzYWdlICsgXCIgVHJ5IGFnYWluXCJcbiAgZWxzZSBub2RlLnRleHRDb250ZW50ID0gbWVzc2FnZTtcbiAgbm9kZS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBjb2xvcjtcbiAgbm9kZS5zdHlsZS5mb250U2l6ZSA9IGAke3NpemV9cHhgO1xuICByZXR1cm4gbm9kZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjcmVhdGVET01FbGVtZW50LFxuICByZW5kZXJCb2FyZCxcbiAgcmVuZGVyQ2VsbHMsXG4gIGFkZFRvTG9nLFxuICBjaGFuZ2VNYXJxdWVlLFxuICBjcmVhdGVTaGlwLFxufTtcbiIsImNvbnN0IHtcbiAgcmVuZGVyQm9hcmQsXG4gIHJlbmRlckNlbGxzLFxuICBhZGRUb0xvZyxcbiAgY2hhbmdlTWFycXVlZSxcbiAgY3JlYXRlU2hpcCxcbn0gPSByZXF1aXJlKFwiLi9kaXNwbGF5LWhlbHBlcnNcIik7XG5cbmNvbnN0IG1hcnF1ZWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1hcnF1ZWVcIik7XG5jb25zdCBwMUNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicDFDb250YWluZXJcIik7XG5jb25zdCBwMkNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicDJDb250YWluZXJcIik7XG5jb25zdCBwMUhlYWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicDFIZWFkZXJcIik7XG5jb25zdCBwMkhlYWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicDJIZWFkZXJcIik7XG5jb25zdCBnYW1lbG9nID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5sb2dcIik7XG5jb25zdCBzaGlwc0NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2hpcHMtY29udGFpbmVyXCIpO1xubGV0IHAxQm9hcmQ7XG5sZXQgcDJCb2FyZDtcblxuY29uc3QgRGlzcGxheSA9IHtcbiAgcmVuZGVyQm9hcmRzKCkge1xuICAgIHdoaWxlIChwMUNvbnRhaW5lci5jb250YWlucyhkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInAxXCIpKSkge1xuICAgICAgcDFDb250YWluZXIucmVtb3ZlQ2hpbGQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwMVwiKSk7XG4gICAgfVxuICAgIHAxQ29udGFpbmVyLmFwcGVuZENoaWxkKHJlbmRlckJvYXJkKFwicDFcIikpO1xuICAgIHdoaWxlIChwMkNvbnRhaW5lci5jb250YWlucyhkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInAyXCIpKSkge1xuICAgICAgcDJDb250YWluZXIucmVtb3ZlQ2hpbGQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwMlwiKSk7XG4gICAgfVxuICAgIHAyQ29udGFpbmVyLmFwcGVuZENoaWxkKHJlbmRlckJvYXJkKFwicDJcIikpO1xuICAgIHAxSGVhZGVyLnRleHRDb250ZW50ID0gXCJZb3VcIjtcbiAgICBwMkhlYWRlci50ZXh0Q29udGVudCA9IFwiQ29tcHV0ZXJcIjtcbiAgICBnYW1lbG9nLnRleHRDb250ZW50ID0gXCJcIjtcbiAgICBwMUJvYXJkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwMVwiKTtcbiAgICBwMkJvYXJkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwMlwiKTtcbiAgfSxcblxuICBzdGFydEdhbWUoKSB7XG4gICAgdGhpcy5yZW5kZXJCb2FyZHMoKTtcbiAgICB0aGlzLnJlbmRlclNoaXBzKCk7XG4gICAgdGhpcy51cGRhdGVNYXJxdWVlKFwiUGxhY2UgeW91ciBzaGlwcyBieSBkcmFnZ2luZyB0aGVtIG9udG8geW91ciBib2FyZCAocHJlc3MgUiB0byByb3RhdGUpLlwiLCAyMCk7XG4gIH0sXG5cbiAgcmVuZGVyU2hpcHMoKSB7XG4gICAgY29uc3Qgc2hpcHMgPSBbXG4gICAgICBjcmVhdGVTaGlwKFwiQ2FycmllclwiLCA1KSxcbiAgICAgIGNyZWF0ZVNoaXAoXCJCYXR0bGVzaGlwXCIsIDQpLFxuICAgICAgY3JlYXRlU2hpcChcIkNydWlzZXJcIiwgMyksXG4gICAgICBjcmVhdGVTaGlwKFwiU3VibWFyaW5lXCIsIDMpLFxuICAgICAgY3JlYXRlU2hpcChcIkRlc3Ryb3llclwiLCAyKSxcbiAgICBdO1xuICAgIHdoaWxlIChzaGlwc0NvbnRhaW5lci5maXJzdENoaWxkKVxuICAgICAgc2hpcHNDb250YWluZXIucmVtb3ZlQ2hpbGQoc2hpcHNDb250YWluZXIubGFzdENoaWxkKTtcbiAgICBzaGlwc0NvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xuICAgIHNoaXBzLmZvckVhY2goKHNoaXApID0+IHNoaXBzQ29udGFpbmVyLmFwcGVuZENoaWxkKHNoaXApKTtcbiAgfSxcblxuICBwMVVwZGF0ZUJvYXJkKGJvYXJkKSB7XG4gICAgcmVuZGVyQ2VsbHMoYm9hcmQsIHAxQm9hcmQpO1xuICB9LFxuICBwMlVwZGF0ZUJvYXJkKGJvYXJkKSB7XG4gICAgcmVuZGVyQ2VsbHMoYm9hcmQsIHAyQm9hcmQsIGZhbHNlKTtcbiAgfSxcbiAgdXBkYXRlRGlzcGxheShwbGF5ZXIsIGNlbGwsIG9wcG9uZW50LCBvcHBCb2FyZCwgc2hpcFN1bmspIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMudXBkYXRlTWFycXVlZShgJHtvcHBvbmVudC5nZXRQb3NzZXNzaXZlKCl9IHR1cm5gLCAyOCk7XG4gICAgICBhZGRUb0xvZyhwbGF5ZXIsIGNlbGwsIG9wcG9uZW50LCBvcHBCb2FyZCwgc2hpcFN1bmssIGdhbWVsb2cpO1xuICAgIH0sIDIwMCk7XG4gIH0sXG4gIHVwZGF0ZU1hcnF1ZWUodGV4dCwgc2l6ZSwgY29sb3IpIHtcbiAgICBpZiAoIWNvbG9yKSBjb2xvciA9ICcjZmVmZWZlJztcbiAgICBjaGFuZ2VNYXJxdWVlKHRleHQsIG1hcnF1ZWUsIHNpemUsIGNvbG9yKTtcbiAgfSxcbiAgZ2FtZU92ZXIod2lubmVyKSB7XG4gICAgbGV0IGNvbG9yO1xuICAgIGlmICh3aW5uZXIuaXNDb21wdXRlcigpKSBjb2xvciA9ICdyZ2IoMjU1LCAxNDAsIDE0MCknXG4gICAgZWxzZSBjb2xvciA9ICdyZ2IoMTgwLCAyMzUsIDE4MCdcbiAgICBjaGFuZ2VNYXJxdWVlKGBXaW5uZXI6ICR7d2lubmVyLmdldE5hbWUoKX1gLCBtYXJxdWVlLCAzMCwgY29sb3IpO1xuICB9LFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEaXNwbGF5O1xuIiwiY29uc3QgeyByb3csIGNvbHVtbiB9ID0gcmVxdWlyZShcIi4vY29udmVyc2lvbnNcIik7XG5jb25zdCB7IGNoZWNrQ29sbGlzaW9ucywgaXNPY2N1cGllZCB9ID0gcmVxdWlyZShcIi4vaGVscGVyc1wiKTtcblxuY29uc3QgR2FtZWJvYXJkID0gKCkgPT4ge1xuICBjb25zdCBib2FyZCA9IFtdO1xuICAoZnVuY3Rpb24gY3JlYXRlQm9hcmQoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG4gICAgICBjb25zdCBuZXdSb3cgPSBbXTtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgMTA7IGorKykge1xuICAgICAgICBuZXdSb3cucHVzaChcIiBcIik7XG4gICAgICB9XG4gICAgICBib2FyZC5wdXNoKG5ld1Jvdyk7XG4gICAgfVxuICB9KSgpO1xuXG4gIGNvbnN0IHJlYWRCb2FyZCA9ICgpID0+IGJvYXJkO1xuICBjb25zdCBhbGxTaGlwcyA9IFtdO1xuICBjb25zdCBnZXRBbGxTaGlwcyA9ICgpID0+IGFsbFNoaXBzO1xuXG4gIGZ1bmN0aW9uIGFsbFNoaXBzU3VuaygpIHtcbiAgICBpZiAoYWxsU2hpcHMubGVuZ3RoIDwgNSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBhbGxTaGlwcy5maWx0ZXIoKHNoaXApID0+IHNoaXAuaXNTdW5rKCkpLmxlbmd0aCA9PT0gNTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBsYWNlU2hpcChzaGlwT2JqLCB4LCB5LCBvcmllbnRhdGlvbikge1xuICAgIGlmIChhbGxTaGlwcy5sZW5ndGggPiA0KSB0aHJvdyBuZXcgRXJyb3IoXCJTaGlwIGxpbWl0IGV4Y2VlZGVkLlwiKTtcbiAgICBsZXQgY29sSW5kZXggPSBjb2x1bW4oeCk7XG4gICAgbGV0IHJvd0luZGV4ID0gcm93KHkpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNoZWNrQ29sbGlzaW9ucyhib2FyZCwgeCwgeSwgb3JpZW50YXRpb24sIHNoaXBPYmopO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gZXJyb3I7XG4gICAgfVxuXG4gICAgYWxsU2hpcHMucHVzaChzaGlwT2JqKTtcbiAgICBpZiAob3JpZW50YXRpb24gPT09IFwidmVydGljYWxcIikge1xuICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gc2hpcE9iai5nZXRTaGlwTGVuZ3RoKCk7IGkrKykge1xuICAgICAgICBib2FyZFtyb3dJbmRleF1bY29sSW5kZXhdID0gc2hpcE9iajtcbiAgICAgICAgcm93SW5kZXgrKztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gc2hpcE9iai5nZXRTaGlwTGVuZ3RoKCk7IGkrKykge1xuICAgICAgICBib2FyZFtyb3dJbmRleF1bY29sSW5kZXhdID0gc2hpcE9iajtcbiAgICAgICAgY29sSW5kZXgrKztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiByZWNlaXZlQXR0YWNrKHgsIHkpIHtcbiAgICBsZXQgc3Vua1NoaXAgPSBudWxsO1xuICAgIGNvbnN0IGF0dGFja2VkQ2VsbCA9IGJvYXJkW3Jvdyh5KV1bY29sdW1uKHgpXTtcbiAgICBpZiAoYXR0YWNrZWRDZWxsID09PSBcIlhcIiB8fCBhdHRhY2tlZENlbGwgPT09IFwiT1wiKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2VsbCBhbHJlYWR5IGhpdCFcIik7XG4gICAgZWxzZSBpZiAoaXNPY2N1cGllZChhdHRhY2tlZENlbGwpKSB7XG4gICAgICBhdHRhY2tlZENlbGwuaGl0KCk7XG4gICAgICBpZiAoYXR0YWNrZWRDZWxsLmlzU3VuaygpKSBzdW5rU2hpcCA9IGF0dGFja2VkQ2VsbC5uYW1lO1xuICAgICAgYm9hcmRbcm93KHkpXVtjb2x1bW4oeCldID0gXCJYXCI7XG4gICAgfSBlbHNlIGJvYXJkW3Jvdyh5KV1bY29sdW1uKHgpXSA9IFwiT1wiO1xuXG4gICAgcmV0dXJuIHsgY2VsbDogW3gsIHldLCBzdW5rU2hpcCB9O1xuICB9XG5cbiAgcmV0dXJuIHsgcmVhZEJvYXJkLCByZWNlaXZlQXR0YWNrLCBwbGFjZVNoaXAsIGFsbFNoaXBzU3VuaywgZ2V0QWxsU2hpcHMgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gR2FtZWJvYXJkO1xuIiwiY29uc3QgUGxheWVyID0gcmVxdWlyZShcIi4vcGxheWVyXCIpO1xuY29uc3QgeyBzdGFydFBsYWNlbWVudFBoYXNlLCBwbGFjZW1lbnRQaGFzZU92ZXIgfSA9IHJlcXVpcmUoXCIuL3NoaXAtcGxhY2VtZW50XCIpO1xuY29uc3QgRGlzcGxheSA9IHJlcXVpcmUoXCIuL2Rpc3BsYXlcIik7XG5jb25zdCBHYW1lYm9hcmQgPSByZXF1aXJlKFwiLi9nYW1lYm9hcmRcIik7XG5cbmZ1bmN0aW9uIEdhbWUoKSB7XG4gIERpc3BsYXkuc3RhcnRHYW1lKCk7XG4gIGNvbnN0IHBsYXllcjEgPSBQbGF5ZXIoXCJZb3VcIik7XG4gIGNvbnN0IHBsYXllcjIgPSBQbGF5ZXIoXCJDb21wdXRlclwiLCB0cnVlKTtcbiAgY29uc3QgcDFCb2FyZCA9IEdhbWVib2FyZCgpO1xuICBjb25zdCBwMkJvYXJkID0gR2FtZWJvYXJkKCk7XG4gIGxldCBjdXJyZW50UGxheWVyID0gcGxheWVyMTtcbiAgc3RhcnRQbGFjZW1lbnRQaGFzZSgpO1xuICBjb25zdCBwMkRpc3BsYXlCb2FyZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicDJcIik7XG4gIHBsYXllcjEucGxhY2VTaGlwcyhwMUJvYXJkKTtcbiAgcGxheWVyMi5wbGFjZVNoaXBzKHAyQm9hcmQsIFwicmFuZG9tXCIpO1xuICBEaXNwbGF5LnAyVXBkYXRlQm9hcmQocDJCb2FyZCk7XG5cbiAgZnVuY3Rpb24gaXNHYW1lT3ZlcigpIHtcbiAgICByZXR1cm4gcDJCb2FyZC5hbGxTaGlwc1N1bmsoKSB8fCBwMUJvYXJkLmFsbFNoaXBzU3VuaygpO1xuICB9XG5cbiAgcDJEaXNwbGF5Qm9hcmQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG4gICAgaWYgKHBsYWNlbWVudFBoYXNlT3ZlcigpICYmIGN1cnJlbnRQbGF5ZXIgPT09IHBsYXllcjEgJiYgIWlzR2FtZU92ZXIoKSkge1xuICAgICAgY29uc3QgZGF0YSA9IGUudGFyZ2V0LmRhdGFzZXQ7XG4gICAgICBjb25zdCBjZWxsQXR0YWNrZWQgPSBwMkJvYXJkLnJlY2VpdmVBdHRhY2soZGF0YS5jb2x1bW4sIGRhdGEucm93KTtcbiAgICAgIERpc3BsYXkucDJVcGRhdGVCb2FyZChwMkJvYXJkKTtcbiAgICAgIERpc3BsYXkudXBkYXRlRGlzcGxheShcbiAgICAgICAgcGxheWVyMSxcbiAgICAgICAgY2VsbEF0dGFja2VkLmNlbGwsXG4gICAgICAgIHBsYXllcjIsXG4gICAgICAgIHAyQm9hcmQsXG4gICAgICAgIGNlbGxBdHRhY2tlZC5zdW5rU2hpcCxcbiAgICAgICk7XG4gICAgICBpZiAoaXNHYW1lT3ZlcigpKSByZXR1cm4gRGlzcGxheS5nYW1lT3ZlcihwbGF5ZXIxKTtcbiAgICAgIGN1cnJlbnRQbGF5ZXIgPSBwbGF5ZXIyO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBjb25zdCBjaG9pY2UgPSBwbGF5ZXIyLnJhbmRvbUF0dGFjayhwMUJvYXJkKTtcbiAgICAgIGNvbnN0IGNvbXB1dGVyQXR0YWNrID0gcDFCb2FyZC5yZWNlaXZlQXR0YWNrKGNob2ljZVswXSwgY2hvaWNlWzFdKTtcbiAgICAgIERpc3BsYXkucDFVcGRhdGVCb2FyZChwMUJvYXJkKTtcbiAgICAgIERpc3BsYXkudXBkYXRlRGlzcGxheShcbiAgICAgICAgcGxheWVyMixcbiAgICAgICAgY29tcHV0ZXJBdHRhY2suY2VsbCxcbiAgICAgICAgcGxheWVyMSxcbiAgICAgICAgcDFCb2FyZCxcbiAgICAgICAgY29tcHV0ZXJBdHRhY2suc3Vua1NoaXAsXG4gICAgICApO1xuICAgICAgaWYgKGlzR2FtZU92ZXIoKSkgcmV0dXJuIERpc3BsYXkuZ2FtZU92ZXIocGxheWVyMik7XG4gICAgICBjdXJyZW50UGxheWVyID0gcGxheWVyMTtcbiAgICB9LCA4MDApO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBHYW1lO1xuIiwiY29uc3QgeyByb3csIGNvbHVtbiB9ID0gcmVxdWlyZShcIi4vY29udmVyc2lvbnNcIik7XG5cbmZ1bmN0aW9uIGlzT2NjdXBpZWQoY2VsbCkge1xuICByZXR1cm4gdHlwZW9mIGNlbGwgPT09IFwib2JqZWN0XCI7XG59XG5cbmNvbnN0IGNoZWNrQ29sbGlzaW9ucyA9IGZ1bmN0aW9uIGNoZWNrRm9yU2hpcFBsYWNlbWVudENvbGxpc2lvbnMoXG4gIGJvYXJkLFxuICB4LFxuICB5LFxuICBvcmllbnRhdGlvbixcbiAgc2hpcCxcbikge1xuICBjb25zdCBzaGlwU2xvdCA9IFtdO1xuICBsZXQgY29sQ2hlY2sgPSBjb2x1bW4oeCk7XG4gIGxldCByb3dDaGVjayA9IHJvdyh5KTtcblxuICBpZiAob3JpZW50YXRpb24gPT09IFwidmVydGljYWxcIikge1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IHNoaXAuZ2V0U2hpcExlbmd0aCgpOyBpKyspIHtcbiAgICAgIGlmIChjb2xDaGVjayA+IDkgfHwgcm93Q2hlY2sgPiA5KSB0aHJvdyBuZXcgRXJyb3IoXCJPdXQgb2YgYm91bmRzIVwiKTtcbiAgICAgIHNoaXBTbG90LnB1c2goYm9hcmRbcm93Q2hlY2tdW2NvbENoZWNrXSk7XG4gICAgICByb3dDaGVjaysrO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBzaGlwLmdldFNoaXBMZW5ndGgoKTsgaSsrKSB7XG4gICAgICBpZiAoY29sQ2hlY2sgPiA5IHx8IHJvd0NoZWNrID4gOSkgdGhyb3cgbmV3IEVycm9yKFwiT3V0IG9mIGJvdW5kcyFcIik7XG4gICAgICBzaGlwU2xvdC5wdXNoKGJvYXJkW3Jvd0NoZWNrXVtjb2xDaGVja10pO1xuICAgICAgY29sQ2hlY2srKztcbiAgICB9XG4gIH1cblxuICBpZiAoc2hpcFNsb3QuZmluZChpc09jY3VwaWVkKSkgdGhyb3cgbmV3IEVycm9yKFwiU2hpcCBDb2xsaXNpb24hXCIpO1xuICByZXR1cm4gRXJyb3I7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHsgY2hlY2tDb2xsaXNpb25zLCBpc09jY3VwaWVkIH07XG4iLCJjb25zdCB7IGlzT2NjdXBpZWQgfSA9IHJlcXVpcmUoXCIuL2hlbHBlcnNcIik7XG5jb25zdCB7IHBsYWNlQWxsU2hpcHMsIHBsYWNlUmFuZG9tU2hpcHMgfSA9IHJlcXVpcmUoXCIuL3NoaXAtcGxhY2VtZW50XCIpO1xuY29uc3QgeyBjb2xzIH0gPSByZXF1aXJlKFwiLi9jb252ZXJzaW9uc1wiKTtcblxuZnVuY3Rpb24gUGxheWVyKG5hbWUsIGNvbXB1dGVyID0gZmFsc2UpIHtcbiAgY29uc3QgZ2V0TmFtZSA9ICgpID0+IG5hbWU7XG4gIGNvbnN0IGdldFBvc3Nlc3NpdmUgPSAoKSA9PiAobmFtZSA9PT0gXCJZb3VcIiA/IFwiWW91clwiIDogYCR7bmFtZX0nc2ApO1xuICBjb25zdCBpc0NvbXB1dGVyID0gKCkgPT4gY29tcHV0ZXIgPT09IHRydWU7XG5cbiAgY29uc3QgcmFuZG9tQXR0YWNrID0gKGJvYXJkKSA9PiB7XG4gICAgY29uc3Qgb3BwQm9hcmQgPSBib2FyZC5yZWFkQm9hcmQoKTtcbiAgICBjb25zdCBhdHRhY2thYmxlQ2VsbHMgPSBbXTtcbiAgICBvcHBCb2FyZC5mb3JFYWNoKChvcHBSb3cpID0+XG4gICAgICBvcHBSb3cuZm9yRWFjaCgoY2VsbCwgaW5kZXgpID0+IHtcbiAgICAgICAgaWYgKGlzT2NjdXBpZWQoY2VsbCkgfHwgY2VsbCA9PT0gXCIgXCIpXG4gICAgICAgICAgYXR0YWNrYWJsZUNlbGxzLnB1c2goW2NvbHNbaW5kZXhdLCBvcHBCb2FyZC5pbmRleE9mKG9wcFJvdykgKyAxXSk7XG4gICAgICB9KSxcbiAgICApO1xuICAgIGNvbnN0IGNob3NlbkNlbGwgPVxuICAgICAgYXR0YWNrYWJsZUNlbGxzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGF0dGFja2FibGVDZWxscy5sZW5ndGgpXTtcblxuICAgIHJldHVybiBjaG9zZW5DZWxsO1xuICB9O1xuXG4gIGNvbnN0IHBsYWNlU2hpcHMgPSAoYm9hcmQsIHJhbmRvbSA9IGZhbHNlKSA9PiB7XG4gICAgaWYgKCFyYW5kb20pIHBsYWNlQWxsU2hpcHMoYm9hcmQpO1xuICAgIGVsc2UgcGxhY2VSYW5kb21TaGlwcyhib2FyZCk7XG4gIH07XG5cbiAgcmV0dXJuIHsgZ2V0TmFtZSwgZ2V0UG9zc2Vzc2l2ZSwgaXNDb21wdXRlciwgcmFuZG9tQXR0YWNrLCBwbGFjZVNoaXBzIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUGxheWVyO1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbi8qIGVzbGludC1kaXNhYmxlIHByZWZlci10ZW1wbGF0ZSAqL1xuY29uc3QgU2hpcCA9IHJlcXVpcmUoXCIuL3NoaXBcIik7XG5jb25zdCBEaXNwbGF5ID0gcmVxdWlyZShcIi4vZGlzcGxheVwiKTtcbmNvbnN0IHsgY29scyB9ID0gcmVxdWlyZShcIi4vY29udmVyc2lvbnNcIik7XG5cbmNvbnN0IGFsbFNoaXBzID0gW1wiQ2FycmllclwiLCBcIkJhdHRsZXNoaXBcIiwgXCJDcnVpc2VyXCIsIFwiU3VibWFyaW5lXCIsIFwiRGVzdHJveWVyXCJdO1xubGV0IHBsYWNlbWVudFBoYXNlID0gdHJ1ZTtcbmZ1bmN0aW9uIHN0YXJ0UGxhY2VtZW50UGhhc2UoKSB7XG4gIHBsYWNlbWVudFBoYXNlID0gdHJ1ZTtcbn1cbmNvbnN0IHBsYWNlbWVudFBoYXNlT3ZlciA9ICgpID0+ICFwbGFjZW1lbnRQaGFzZTtcblxuZnVuY3Rpb24gcGxhY2VBbGxTaGlwcyhib2FyZCkge1xuICBjb25zdCBzaGlwc0NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zaGlwcy1jb250YWluZXInKTtcbiAgY29uc3Qgc2hpcHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnNoaXBcIik7XG4gIGNvbnN0IHBsYWNlZFNoaXBzID0gW107XG4gIHNoaXBzLmZvckVhY2goKHNoaXApID0+IHtcbiAgICBmdW5jdGlvbiBzaGlmdFNoaXAoKSB7XG4gICAgICBzaGlwLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUoLTFweCwgLTJweCknO1xuICAgIH1cblxuICAgIHNoaXAub25tb3VzZW92ZXIgPSBzaGlmdFNoaXA7XG4gICAgc2hpcC5vbm1vdXNlb3V0ID0gKCkgPT4gc2hpcC5zdHlsZS50cmFuc2Zvcm0gPSAnJztcblxuICAgIHNoaXAub25tb3VzZWRvd24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGNvbnN0IHNoaXBDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHtzaGlwLmlkfS1jb250YWluZXJgKTtcbiAgICAgIGxldCBvcmllbnRhdGlvbiA9IFwiXCI7XG4gICAgICBzaGlwLnN0eWxlLnRyYW5zZm9ybSA9ICcnO1xuICAgICAgc2hpcC5vbm1vdXNlb3ZlciA9IG51bGw7XG4gICAgICBzaGlwLnN0eWxlLmN1cnNvciA9ICdncmFiYmluZyc7XG4gICAgICBzaGlwLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgICAgc2hpcC5zdHlsZS56SW5kZXggPSAxMDtcblxuICAgICAgZnVuY3Rpb24gbW92ZUF0KHBhZ2VYLCBwYWdlWSkge1xuICAgICAgICBzaGlwLnN0eWxlLmxlZnQgPSBwYWdlWCAtIDIwICsgXCJweFwiO1xuICAgICAgICBzaGlwLnN0eWxlLnRvcCA9IHBhZ2VZIC0gc2hpcC5vZmZzZXRIZWlnaHQgLyAyICsgXCJweFwiO1xuICAgICAgfVxuXG4gICAgICBtb3ZlQXQoZXZlbnQucGFnZVgsIGV2ZW50LnBhZ2VZKTtcblxuICAgICAgZnVuY3Rpb24gb25Nb3VzZU1vdmUoZXZlbnQyKSB7XG4gICAgICAgIG1vdmVBdChldmVudDIucGFnZVgsIGV2ZW50Mi5wYWdlWSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJvdGF0ZVNoaXAoZXZlbnQzKSB7XG4gICAgICAgIGlmIChldmVudDMua2V5ID09PSBcInJcIiAmJiBvcmllbnRhdGlvbiAhPT0gXCJ2ZXJ0aWNhbFwiKSB7XG4gICAgICAgICAgb3JpZW50YXRpb24gPSBcInZlcnRpY2FsXCI7XG4gICAgICAgICAgc2hpcC5jbGFzc0xpc3QuYWRkKFwicm90YXRlZFwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvcmllbnRhdGlvbiA9IFwiXCI7XG4gICAgICAgICAgc2hpcC5jbGFzc0xpc3QucmVtb3ZlKFwicm90YXRlZFwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIG9uTW91c2VNb3ZlKTtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCByb3RhdGVTaGlwKTtcblxuICAgICAgc2hpcC5vbm1vdXNldXAgPSAoZXZlbnQ0KSA9PiB7XG4gICAgICAgIHNoaXAuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICBjb25zdCBlbGVtQmVsb3cgPSBkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KFxuICAgICAgICAgIGV2ZW50NC5jbGllbnRYLFxuICAgICAgICAgIGV2ZW50NC5jbGllbnRZLFxuICAgICAgICApO1xuICAgICAgICBzaGlwLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBvbk1vdXNlTW92ZSk7XG4gICAgICAgIGlmICghZWxlbUJlbG93LmNsYXNzTGlzdC5jb250YWlucyhcImRyb3BwYWJsZVwiKSkge1xuICAgICAgICAgIHNoaXAuc3R5bGUucG9zaXRpb24gPSBcInN0YXRpY1wiO1xuICAgICAgICAgIHNoaXAuY2xhc3NMaXN0LnJlbW92ZShcInJvdGF0ZWRcIik7XG4gICAgICAgICAgc2hpcC5vbm1vdXNlb3ZlciA9IHNoaWZ0U2hpcDtcbiAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgcm90YXRlU2hpcCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBsYWNlZFNoaXAgPSBib2FyZC5wbGFjZVNoaXAoXG4gICAgICAgICAgU2hpcChzaGlwLmlkKSxcbiAgICAgICAgICBlbGVtQmVsb3cuZGF0YXNldC5jb2x1bW4sXG4gICAgICAgICAgZWxlbUJlbG93LmRhdGFzZXQucm93LFxuICAgICAgICAgIG9yaWVudGF0aW9uLFxuICAgICAgICApO1xuICAgICAgICBpZiAocGxhY2VkU2hpcCA9PT0gdHJ1ZSkge1xuICAgICAgICAgIERpc3BsYXkucDFVcGRhdGVCb2FyZChib2FyZCk7XG4gICAgICAgICAgcGxhY2VkU2hpcHMucHVzaChzaGlwLmlkKTtcbiAgICAgICAgICBzaGlwQ29udGFpbmVyLnJlbW92ZUNoaWxkKHNoaXApO1xuICAgICAgICAgIERpc3BsYXkudXBkYXRlTWFycXVlZShcbiAgICAgICAgICAgIFwiUGxhY2UgeW91ciBzaGlwcyBieSBkcmFnZ2luZyB0aGVtIG9udG8geW91ciBib2FyZCAocHJlc3MgUiB0byByb3RhdGUpLlwiLFxuICAgICAgICAgICAgMjBcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmIChwbGFjZWRTaGlwcy5sZW5ndGggPT09IGFsbFNoaXBzLmxlbmd0aCkge1xuICAgICAgICAgICAgc2hpcHNDb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgIHBsYWNlbWVudFBoYXNlID0gZmFsc2U7XG4gICAgICAgICAgICBEaXNwbGF5LnVwZGF0ZU1hcnF1ZWUoXG4gICAgICAgICAgICAgIFwiWW91J3JlIHVwLCBBZG1pcmFsISBDaG9vc2UgYSBjZWxsIG9uIHlvdXIgb3Bwb25lbnQncyBib2FyZCB0byBhdHRhY2suXCIsXG4gICAgICAgICAgICAgIDIwXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzaGlwLnN0eWxlLnBvc2l0aW9uID0gXCJzdGF0aWNcIjtcbiAgICAgICAgICBzaGlwLmNsYXNzTGlzdC5yZW1vdmUoXCJyb3RhdGVkXCIpO1xuICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCByb3RhdGVTaGlwKTtcbiAgICAgICAgICBEaXNwbGF5LnVwZGF0ZU1hcnF1ZWUocGxhY2VkU2hpcCwgMjQsICdyZ2IoMjU1LCAxNDAsIDE0MCknKTtcbiAgICAgICAgICBzaGlwLm9ubW91c2VvdmVyID0gc2hpZnRTaGlwO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwbGFjZVJhbmRvbVNoaXBzKGJvYXJkLCBpbmRleCA9IDApIHtcbiAgaWYgKGluZGV4ID49IGFsbFNoaXBzLmxlbmd0aCkgcmV0dXJuO1xuICBjb25zdCBvcmllbnRhdGlvbiA9IFtcImhvcml6b25hbFwiLCBcInZlcnRpY2FsXCJdW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIpXTtcbiAgY29uc3QgY29sID0gY29sc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCldO1xuICBjb25zdCByb3cgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCkgKyAxO1xuICBjb25zdCBwbGFjZWRTaGlwID0gYm9hcmQucGxhY2VTaGlwKFxuICAgIFNoaXAoYWxsU2hpcHNbaW5kZXhdKSxcbiAgICBjb2wsXG4gICAgcm93LFxuICAgIG9yaWVudGF0aW9uLFxuICApO1xuICBpZiAocGxhY2VkU2hpcCA9PT0gdHJ1ZSkgcGxhY2VSYW5kb21TaGlwcyhib2FyZCwgKytpbmRleCk7XG4gIGVsc2UgcGxhY2VSYW5kb21TaGlwcyhib2FyZCwgaW5kZXgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcGxhY2VBbGxTaGlwcyxcbiAgcGxhY2VSYW5kb21TaGlwcyxcbiAgc3RhcnRQbGFjZW1lbnRQaGFzZSxcbiAgcGxhY2VtZW50UGhhc2VPdmVyLFxufTtcbiIsImNvbnN0IFNoaXAgPSAobmFtZSkgPT4ge1xuICBsZXQgc2hpcExlbmd0aDtcblxuICBzd2l0Y2ggKG5hbWUpIHtcbiAgICBjYXNlIFwiQ2FycmllclwiOlxuICAgICAgc2hpcExlbmd0aCA9IDU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiQmF0dGxlc2hpcFwiOlxuICAgICAgc2hpcExlbmd0aCA9IDQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiQ3J1aXNlclwiOlxuICAgIGNhc2UgXCJTdWJtYXJpbmVcIjpcbiAgICAgIHNoaXBMZW5ndGggPSAzO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIkRlc3Ryb3llclwiOlxuICAgICAgc2hpcExlbmd0aCA9IDI7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCBzaGlwIG5hbWUuXCIpO1xuICB9XG5cbiAgbGV0IGhpdHMgPSAwO1xuICBjb25zdCByZWFkSGl0cyA9ICgpID0+IGhpdHM7XG4gIGNvbnN0IGdldFNoaXBMZW5ndGggPSAoKSA9PiBzaGlwTGVuZ3RoO1xuICBjb25zdCBpc1N1bmsgPSAoKSA9PiBoaXRzID09PSBzaGlwTGVuZ3RoO1xuICBjb25zdCBoaXQgPSAoKSA9PiB7XG4gICAgaWYgKCFpc1N1bmsoKSkgaGl0cyArPSAxO1xuICB9O1xuXG4gIHJldHVybiB7IG5hbWUsIHJlYWRIaXRzLCBnZXRTaGlwTGVuZ3RoLCBoaXQsIGlzU3VuayB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTaGlwO1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlcy5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlcy5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgXCIuL3N0eWxlcy5jc3NcIjtcblxuY29uc3QgRGlzcGxheSA9IHJlcXVpcmUoXCIuL2Rpc3BsYXlcIik7XG5jb25zdCBHYW1lID0gcmVxdWlyZShcIi4vZ2FtZXBsYXlcIik7XG5cbmNvbnN0IHN0YXJ0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJ1dHRvbiNzdGFydFwiKTtcblxuRGlzcGxheS5yZW5kZXJCb2FyZHMoKTtcblxuc3RhcnRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIEdhbWUpO1xuIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiY29scyIsInJvdyIsInJvd0Nvb3JkIiwiY29sdW1uIiwiY29sdW1uQ29vcmQiLCJpbmRleE9mIiwiaXNPY2N1cGllZCIsIkdhbWVib2FyZCIsImNyZWF0ZURPTUVsZW1lbnQiLCJjbGFzc2VzIiwibmV3RWxlbWVudCIsImZvckVhY2giLCJ2YWx1ZSIsImNsYXNzTGlzdCIsImFkZCIsInJlbmRlckJvYXJkIiwiYm9hcmQiLCJyZWFkQm9hcmQiLCJkb21Cb2FyZCIsIm5ld0NlbGwiLCJib2FyZFJvdyIsImNlbGwiLCJkYXRhc2V0IiwicmVuZGVyQ2VsbHMiLCJnYW1lYm9hcmQiLCJzaG93U2hpcHMiLCJsYXN0Q2hpbGQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJuZXdNYXJrZXIiLCJhZGRUb0xvZyIsInBsYXllciIsIm9wcG9uZW50Iiwib3BwQm9hcmQiLCJzaGlwU3VuayIsImRvbUxvZyIsImF0dGFja2VkQ2VsbCIsIm5ld0xpbmUiLCJ0ZXh0Q29udGVudCIsImdldE5hbWUiLCJzcGFuIiwiY29sb3IiLCJzdW5rTGluZSIsImdldFBvc3Nlc3NpdmUiLCJzZXRUaW1lb3V0IiwiY2hhbmdlTWFycXVlZSIsImRvbU5vZGUiLCJzaXplIiwibWVzc2FnZSIsIm5vZGUiLCJpbmNsdWRlcyIsImZvbnRTaXplIiwiY3JlYXRlU2hpcCIsInNoaXBDb250YWluZXIiLCJoZWlnaHQiLCJ3aWR0aCIsIm5ld1NoaXAiLCJjdXJzb3IiLCJkaXNwbGF5IiwibiIsInN1YnN0cmluZyIsInRvVXBwZXJDYXNlIiwibWFycXVlZSIsInAxQ29udGFpbmVyIiwiZ2V0RWxlbWVudEJ5SWQiLCJwMkNvbnRhaW5lciIsInAxSGVhZGVyIiwicDJIZWFkZXIiLCJnYW1lbG9nIiwic2hpcHNDb250YWluZXIiLCJwMUJvYXJkIiwicDJCb2FyZCIsIkRpc3BsYXkiLCJyZW5kZXJCb2FyZHMiLCJjb250YWlucyIsInN0YXJ0R2FtZSIsInJlbmRlclNoaXBzIiwidXBkYXRlTWFycXVlZSIsInNoaXBzIiwic2hpcCIsInAxVXBkYXRlQm9hcmQiLCJwMlVwZGF0ZUJvYXJkIiwidXBkYXRlRGlzcGxheSIsInRleHQiLCJnYW1lT3ZlciIsIndpbm5lciIsImlzQ29tcHV0ZXIiLCJjaGVja0NvbGxpc2lvbnMiLCJuZXdSb3ciLCJqIiwiYWxsU2hpcHMiLCJyZWNlaXZlQXR0YWNrIiwieCIsInkiLCJzdW5rU2hpcCIsImhpdCIsImlzU3VuayIsIm5hbWUiLCJwbGFjZVNoaXAiLCJzaGlwT2JqIiwib3JpZW50YXRpb24iLCJjb2xJbmRleCIsInJvd0luZGV4IiwiZXJyb3IiLCJnZXRTaGlwTGVuZ3RoIiwiYWxsU2hpcHNTdW5rIiwiZmlsdGVyIiwiZ2V0QWxsU2hpcHMiLCJQbGF5ZXIiLCJzdGFydFBsYWNlbWVudFBoYXNlIiwicGxhY2VtZW50UGhhc2VPdmVyIiwicGxheWVyMSIsInBsYXllcjIiLCJjdXJyZW50UGxheWVyIiwicDJEaXNwbGF5Qm9hcmQiLCJpc0dhbWVPdmVyIiwicGxhY2VTaGlwcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJjZWxsQXR0YWNrZWQiLCJjaG9pY2UiLCJyYW5kb21BdHRhY2siLCJjb21wdXRlckF0dGFjayIsInNoaXBTbG90IiwiY29sQ2hlY2siLCJyb3dDaGVjayIsImZpbmQiLCJwbGFjZUFsbFNoaXBzIiwicGxhY2VSYW5kb21TaGlwcyIsImNvbXB1dGVyIiwiYXR0YWNrYWJsZUNlbGxzIiwib3BwUm93IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiU2hpcCIsInBsYWNlbWVudFBoYXNlIiwicXVlcnlTZWxlY3RvckFsbCIsInBsYWNlZFNoaXBzIiwic2hpZnRTaGlwIiwidHJhbnNmb3JtIiwib25tb3VzZW92ZXIiLCJvbm1vdXNlb3V0Iiwib25tb3VzZWRvd24iLCJldmVudCIsIm1vdmVBdCIsInBhZ2VYIiwicGFnZVkiLCJsZWZ0IiwidG9wIiwib2Zmc2V0SGVpZ2h0Iiwib25Nb3VzZU1vdmUiLCJldmVudDIiLCJyb3RhdGVTaGlwIiwiZXZlbnQzIiwia2V5IiwicG9zaXRpb24iLCJ6SW5kZXgiLCJvbm1vdXNldXAiLCJldmVudDQiLCJlbGVtQmVsb3ciLCJlbGVtZW50RnJvbVBvaW50IiwiY2xpZW50WCIsImNsaWVudFkiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicGxhY2VkU2hpcCIsImNvbCIsInNoaXBMZW5ndGgiLCJoaXRzIiwicmVhZEhpdHMiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwibmMiLCJsb2NhbHMiLCJHYW1lIiwic3RhcnRCdXR0b24iXSwic291cmNlUm9vdCI6IiJ9