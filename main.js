(()=>{var n={365:(n,e,t)=>{"use strict";t.d(e,{A:()=>s});var r=t(354),o=t.n(r),a=t(314),i=t.n(a)()(o());i.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Notable&display=swap);"]),i.push([n.id,"* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box\n}\n\n:root {\n    background: #222;\n    font-size: 18px;\n    font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\n}\n\n.container {\n    background: linear-gradient(178deg, hsl(46, 50%, 75%), hsl(36, 44%, 64%) 12%, hsl(36, 40%, 43%) 108%);\n    background-repeat: no-repeat;\n    margin: 0 auto;\n    min-height: 100vh;\n    width: clamp(430px, 95%, 1280px);\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 0.6rem;\n}\n\nh1 {\n    font-family: \"Notable\";\n    font-size: 3rem;\n    letter-spacing: 0.2rem;\n    text-align: center;\n    margin-top: 0.5rem;\n    \n}\n\n.marquee {\n    padding: 0.5rem;\n    color: #333;\n    background: #fefefe;\n    text-align: center;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 0.25rem;\n    box-shadow: inset 2px 2px 4px #888,\n                inset -2px -2px 2px lightgray;\n    width: 400px;\n    height: 4rem;\n    font-size: 1.2rem;\n}\n\n.button#start {\n    padding: 5px 8px;\n    border-radius: 10px;\n    box-shadow: 1px 1px 4px #888;\n    font-weight: bold;\n    background: #fff;\n    border: 1px solid black;\n}\n\n.button#start:active {\n  transform: translateX(1px) translateY(1px); \n  box-shadow: 0 0 2px #888;\n}\n\n.button#start:hover {\n  cursor: pointer;\n  background-color: rgb(146, 252, 155);\n}\n\n.ship-container {\n    width: min(500px, 98%);\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n    gap: 0.6rem;\n}\n\n.rotated {\n    transform-origin: 20px 20px;\n    transform: rotate(90deg);\n}\n\n.boards-container {\n    width: min(98%, 920px);\n    display: grid;\n    grid-template-columns: repeat(auto-fit, 412px);\n    justify-content: center;\n    gap: 0.8rem;\n    padding: 0.25rem 0.75rem;\n}\n\n#p2 .cell:hover {\n    background-color: rgba(20, 20, 20, 0.05);\n    cursor: pointer;\n}\n\n.board-container {\n    border: 6px solid #222;\n    border-radius: 6px;\n    box-shadow: 1px 2px 4px #888;\n    letter-spacing: 0.025rem;\n    background-color: skyblue\n}\n\n.board-header {\n    height: 40px;\n    background: #ddd;\n    padding: 4px;\n    font-size: 1.3rem;\n    font-weight: bold;\n    border-bottom: 3px solid black;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.board {\n    background: inherit;\n    height: min-content;\n    display: flex;\n    flex-wrap: wrap;\n}\n\n.cell {\n    height: 40px;\n    width: 40px;\n    outline: 1px dotted black;\n    border-radius: 8px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.ship > .cell {\n    background-color: #888;;\n    color: #fefefe;\n    font-weight: bold;\n    outline: 1px solid #444;\n    box-shadow: 1px 2px 3px #555;\n}\n\n.marker {\n    width: 55%;\n    height: 55%;\n    border-radius: 50%;\n    box-shadow: 0px 1px 4px #333;\n}\n\n.log-container {\n    background: #111;\n    width: min(98%, 600px);\n    height: 196px;\n    border: 2px solid #eee;\n    border-radius: 4px;\n    box-shadow: 1px 1px 4px #888;\n    letter-spacing: 0.025rem;\n    margin-bottom: 0.25rem;\n    display: grid;\n    grid-template-rows: min-content 1fr;\n}\n\n.log-header {\n    color: #fefefe;\n    font-family: monospace;\n    text-align: center;\n    padding: 0.1rem;\n    border-bottom: 1px solid #eee;\n}\n\n.log {\n    color: hsl(310, 100%, 88%);\n    font-size: 0.85rem;\n    padding: 3px 5px;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    overflow: hidden;\n}\n\n.log-span {\n  font-weight: bold;\n}\n\n.log-line-sunk {\n  font-style: italic;\n  color: yellow;\n  font-weight: bold;\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;IACV;AACJ;;AAEA;IACI,gBAAgB;IAChB,eAAe;IACf,wEAAwE;AAC5E;;AAIA;IACI,qGAAqG;IACrG,4BAA4B;IAC5B,cAAc;IACd,iBAAiB;IACjB,gCAAgC;IAChC,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,WAAW;AACf;;AAEA;IACI,sBAAsB;IACtB,eAAe;IACf,sBAAsB;IACtB,kBAAkB;IAClB,kBAAkB;;AAEtB;;AAEA;IACI,eAAe;IACf,WAAW;IACX,mBAAmB;IACnB,kBAAkB;IAClB,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,sBAAsB;IACtB;6CACyC;IACzC,YAAY;IACZ,YAAY;IACZ,iBAAiB;AACrB;;AAEA;IACI,gBAAgB;IAChB,mBAAmB;IACnB,4BAA4B;IAC5B,iBAAiB;IACjB,gBAAgB;IAChB,uBAAuB;AAC3B;;AAEA;EACE,0CAA0C;EAC1C,wBAAwB;AAC1B;;AAEA;EACE,eAAe;EACf,oCAAoC;AACtC;;AAEA;IACI,sBAAsB;IACtB,aAAa;IACb,uBAAuB;IACvB,eAAe;IACf,WAAW;AACf;;AAEA;IACI,2BAA2B;IAC3B,wBAAwB;AAC5B;;AAEA;IACI,sBAAsB;IACtB,aAAa;IACb,8CAA8C;IAC9C,uBAAuB;IACvB,WAAW;IACX,wBAAwB;AAC5B;;AAEA;IACI,wCAAwC;IACxC,eAAe;AACnB;;AAEA;IACI,sBAAsB;IACtB,kBAAkB;IAClB,4BAA4B;IAC5B,wBAAwB;IACxB;AACJ;;AAEA;IACI,YAAY;IACZ,gBAAgB;IAChB,YAAY;IACZ,iBAAiB;IACjB,iBAAiB;IACjB,8BAA8B;IAC9B,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,mBAAmB;IACnB,mBAAmB;IACnB,aAAa;IACb,eAAe;AACnB;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,yBAAyB;IACzB,kBAAkB;IAClB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,sBAAsB;IACtB,cAAc;IACd,iBAAiB;IACjB,uBAAuB;IACvB,4BAA4B;AAChC;;AAEA;IACI,UAAU;IACV,WAAW;IACX,kBAAkB;IAClB,4BAA4B;AAChC;;AAEA;IACI,gBAAgB;IAChB,sBAAsB;IACtB,aAAa;IACb,sBAAsB;IACtB,kBAAkB;IAClB,4BAA4B;IAC5B,wBAAwB;IACxB,sBAAsB;IACtB,aAAa;IACb,mCAAmC;AACvC;;AAEA;IACI,cAAc;IACd,sBAAsB;IACtB,kBAAkB;IAClB,eAAe;IACf,6BAA6B;AACjC;;AAEA;IACI,0BAA0B;IAC1B,kBAAkB;IAClB,gBAAgB;IAChB,aAAa;IACb,sBAAsB;IACtB,yBAAyB;IACzB,gBAAgB;AACpB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,aAAa;EACb,iBAAiB;AACnB",sourcesContent:["* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box\n}\n\n:root {\n    background: #222;\n    font-size: 18px;\n    font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\n}\n\n@import url('https://fonts.googleapis.com/css2?family=Notable&display=swap');\n\n.container {\n    background: linear-gradient(178deg, hsl(46, 50%, 75%), hsl(36, 44%, 64%) 12%, hsl(36, 40%, 43%) 108%);\n    background-repeat: no-repeat;\n    margin: 0 auto;\n    min-height: 100vh;\n    width: clamp(430px, 95%, 1280px);\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 0.6rem;\n}\n\nh1 {\n    font-family: \"Notable\";\n    font-size: 3rem;\n    letter-spacing: 0.2rem;\n    text-align: center;\n    margin-top: 0.5rem;\n    \n}\n\n.marquee {\n    padding: 0.5rem;\n    color: #333;\n    background: #fefefe;\n    text-align: center;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 0.25rem;\n    box-shadow: inset 2px 2px 4px #888,\n                inset -2px -2px 2px lightgray;\n    width: 400px;\n    height: 4rem;\n    font-size: 1.2rem;\n}\n\n.button#start {\n    padding: 5px 8px;\n    border-radius: 10px;\n    box-shadow: 1px 1px 4px #888;\n    font-weight: bold;\n    background: #fff;\n    border: 1px solid black;\n}\n\n.button#start:active {\n  transform: translateX(1px) translateY(1px); \n  box-shadow: 0 0 2px #888;\n}\n\n.button#start:hover {\n  cursor: pointer;\n  background-color: rgb(146, 252, 155);\n}\n\n.ship-container {\n    width: min(500px, 98%);\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n    gap: 0.6rem;\n}\n\n.rotated {\n    transform-origin: 20px 20px;\n    transform: rotate(90deg);\n}\n\n.boards-container {\n    width: min(98%, 920px);\n    display: grid;\n    grid-template-columns: repeat(auto-fit, 412px);\n    justify-content: center;\n    gap: 0.8rem;\n    padding: 0.25rem 0.75rem;\n}\n\n#p2 .cell:hover {\n    background-color: rgba(20, 20, 20, 0.05);\n    cursor: pointer;\n}\n\n.board-container {\n    border: 6px solid #222;\n    border-radius: 6px;\n    box-shadow: 1px 2px 4px #888;\n    letter-spacing: 0.025rem;\n    background-color: skyblue\n}\n\n.board-header {\n    height: 40px;\n    background: #ddd;\n    padding: 4px;\n    font-size: 1.3rem;\n    font-weight: bold;\n    border-bottom: 3px solid black;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.board {\n    background: inherit;\n    height: min-content;\n    display: flex;\n    flex-wrap: wrap;\n}\n\n.cell {\n    height: 40px;\n    width: 40px;\n    outline: 1px dotted black;\n    border-radius: 8px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.ship > .cell {\n    background-color: #888;;\n    color: #fefefe;\n    font-weight: bold;\n    outline: 1px solid #444;\n    box-shadow: 1px 2px 3px #555;\n}\n\n.marker {\n    width: 55%;\n    height: 55%;\n    border-radius: 50%;\n    box-shadow: 0px 1px 4px #333;\n}\n\n.log-container {\n    background: #111;\n    width: min(98%, 600px);\n    height: 196px;\n    border: 2px solid #eee;\n    border-radius: 4px;\n    box-shadow: 1px 1px 4px #888;\n    letter-spacing: 0.025rem;\n    margin-bottom: 0.25rem;\n    display: grid;\n    grid-template-rows: min-content 1fr;\n}\n\n.log-header {\n    color: #fefefe;\n    font-family: monospace;\n    text-align: center;\n    padding: 0.1rem;\n    border-bottom: 1px solid #eee;\n}\n\n.log {\n    color: hsl(310, 100%, 88%);\n    font-size: 0.85rem;\n    padding: 3px 5px;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    overflow: hidden;\n}\n\n.log-span {\n  font-weight: bold;\n}\n\n.log-line-sunk {\n  font-style: italic;\n  color: yellow;\n  font-weight: bold;\n}"],sourceRoot:""}]);const s=i},314:n=>{"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var d=0;d<n.length;d++){var A=[].concat(n[d]);r&&i[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),e.push(A))}},e}},354:n=>{"use strict";n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},72:n=>{"use strict";var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],s=0;s<n.length;s++){var l=n[s],d=r.base?l[0]+r.base:l[0],A=a[d]||0,c="".concat(d," ").concat(A);a[d]=A+1;var p=t(c),u={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var f=o(u,r);r.byIndex=s,e.splice(s,0,{identifier:c,updater:f,references:1})}i.push(c)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var l=r(n,o),d=0;d<a.length;d++){var A=t(a[d]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}a=l}}},659:n=>{"use strict";var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},540:n=>{"use strict";n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,t)=>{"use strict";n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},825:n=>{"use strict";n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{"use strict";n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},785:n=>{const e=["A","B","C","D","E","F","G","H","I","J"];n.exports={row:n=>{if(n>10||n<1)throw new Error("Out of bounds!");return n-1},column:n=>{const t=e.indexOf(n);if(t>9||t<0)throw new Error("Out of bounds!");return t},cols:e}},414:(n,e,t)=>{const{isOccupied:r}=t(89),{cols:o,row:a,column:i}=t(785),s=t(906);function l(n,e,t){const r=document.createElement(n);return e&&e.forEach((n=>r.classList.add(n))),t&&r.setAttribute("id",t),r}n.exports={createDOMElement:l,renderBoard:n=>{const e=s().readBoard(),t=l("div",["board"],n);let r;return e.forEach((a=>a.forEach(((i,s)=>{r=l("div","p1"===n?["cell","droppable"]:["cell"]),r.dataset.column=o[s],r.dataset.row=e.indexOf(a)+1,t.appendChild(r)})))),t},renderCells:(n,e,t=!0)=>{const a=n.readBoard();let i;for(;e.firstChild;)e.removeChild(e.lastChild);a.forEach((n=>n.forEach(((s,d)=>{if(i="p2"===e.id?l("div",["cell"]):l("div",["cell","droppable"]),i.dataset.column=o[d],i.dataset.row=a.indexOf(n)+1,r(s)&&t&&(i.style.backgroundColor="#888"),"X"===s){const e=l("div",["marker"]);e.dataset.column=o[d],e.dataset.row=a.indexOf(n)+1,e.style.backgroundColor="rgb(255, 60, 20)",i.appendChild(e)}if("O"===s){const e=l("div",["marker"]);e.dataset.column=o[d],e.dataset.row=a.indexOf(n)+1,e.style.backgroundColor="#eee",i.appendChild(e)}e.appendChild(i)}))))},addToLog:(n,e,t,r,o,s)=>{const d=r.readBoard()[a(e[1])][i(e[0])],A=l("p",["log-line"]);A.textContent=`${n.getName()} attacked ${e.join(", ")} ... it's a `;const c=l("span",["log-span"]);if("X"===d?(c.textContent="HIT!",c.style.color="rgb(255, 60, 20)"):"O"===d&&(c.textContent="MISS!",c.style.color="#eee"),A.appendChild(c),s.appendChild(A),o){const n=l("p",["log-line-sunk"]);n.textContent=`${t.getPossessive()} ${o} has been sunk!`,setTimeout((()=>{s.appendChild(n)}),150)}},changeMarquee:(n,e,t)=>{const r=n.toString(),o=e;return r.includes("Error")?(o.style.color="orangered",o.textContent=r+" Try again."):(o.textContent=r,o.style.color="#333"),o.style.fontSize=`${t}px`,o},createShip:function(n,e){const t=l("div",["ship"],n);t.style.cursor="move",t.style.display="flex";let r=0;for(;e>0;){const o=l("div",["cell"]);r<3&&(o.textContent=n.toString().substring(r,r+1).toUpperCase()),t.appendChild(o),e--,r++}return t}}},34:(n,e,t)=>{const{renderBoard:r,renderCells:o,addToLog:a,changeMarquee:i,createShip:s}=t(414),l=document.querySelector(".marquee"),d=document.getElementById("p1Container"),A=document.getElementById("p2Container"),c=document.getElementById("p1Header"),p=document.getElementById("p2Header"),u=document.querySelector(".log"),f=document.querySelector(".ship-container");let m,h;const B={renderBoards(){for(;d.contains(document.getElementById("p1"));)d.removeChild(document.getElementById("p1"));for(d.appendChild(r("p1"));A.contains(document.getElementById("p2"));)A.removeChild(document.getElementById("p2"));A.appendChild(r("p2")),c.textContent="You",p.textContent="Computer",u.textContent="",m=document.getElementById("p1"),h=document.getElementById("p2")},startGame(){this.renderBoards(),this.renderShips(),l.textContent="Place your ships by dragging them onto your board (press R to rotate).",l.style.fontSize="20px"},renderShips(){const n=[s("Carrier",5),s("Battleship",4),s("Cruiser",3),s("Submarine",3),s("Destroyer",2)];for(;f.firstChild;)f.removeChild(f.lastChild);n.forEach((n=>f.appendChild(n)))},p1UpdateBoard(n){o(n,m)},p2UpdateBoard(n){o(n,h,!1)},updateDisplay(n,e,t,r,o){this.updateMarquee(`${t.getPossessive()} turn`,26),setTimeout((()=>{a(n,e,t,r,o,u)}),100)},updateMarquee(n,e){i(n,l,e)},gameOver(n){l.textContent=`Winner: ${n.getName()}`}};n.exports=B},906:(n,e,t)=>{const{row:r,column:o}=t(785),{checkCollisions:a,isOccupied:i}=t(89);n.exports=()=>{const n=[];!function(){for(let e=0;e<10;e++){const e=[];for(let n=0;n<10;n++)e.push(" ");n.push(e)}}();const e=[];return{readBoard:()=>n,receiveAttack:function(e,t){let a=null;const s=n[r(t)][o(e)];if("X"===s||"O"===s)throw new Error("Cell already hit!");return i(s)?(s.hit(),s.isSunk()&&(a=s.name),n[r(t)][o(e)]="X"):n[r(t)][o(e)]="O",{cell:[e,t],sunkShip:a}},placeShip:function(t,i,s,l){if(e.length>4)throw new Error("Ship limit exceeded.");let d=o(i),A=r(s);try{a(n,i,s,l,t)}catch(n){return n}if(e.push(t),"vertical"===l)for(let e=1;e<=t.getShipLength();e++)n[A][d]=t,A++;else for(let e=1;e<=t.getShipLength();e++)n[A][d]=t,d++;return!0},allShipsSunk:function(){return!(e.length<5)&&5===e.filter((n=>n.isSunk())).length},getAllShips:()=>e}}},138:(n,e,t)=>{const r=t(211),{startPlacementPhase:o,placementPhaseOver:a}=t(742),i=t(34),s=t(906);n.exports=function(){i.startGame();const n=r("You"),e=r("Computer",!0),t=s(),l=s();let d=n;o();const A=document.getElementById("p2");function c(){return l.allShipsSunk()||t.allShipsSunk()}n.placeShips(t),e.placeShips(l,"random"),i.p2UpdateBoard(l),A.addEventListener("click",(r=>{if(!a()||d!==n||c())return null;{const t=r.target.dataset,o=l.receiveAttack(t.column,t.row);if(i.p2UpdateBoard(l),i.updateDisplay(n,o.cell,e,l,o.sunkShip),c())return i.gameOver(n);d=e}setTimeout((()=>{const r=e.randomAttack(t),o=t.receiveAttack(r[0],r[1]);if(i.p1UpdateBoard(t),i.updateDisplay(e,o.cell,n,t,o.sunkShip),c())return i.gameOver(e);d=n}),500)}))}},89:(n,e,t)=>{const{row:r,column:o}=t(785);function a(n){return"object"==typeof n}n.exports={checkCollisions:function(n,e,t,i,s){const l=[];let d=o(e),A=r(t);if("vertical"===i)for(let e=1;e<=s.getShipLength();e++){if(d>9||A>9)throw new Error("Out of bounds!");l.push(n[A][d]),A++}else for(let e=1;e<=s.getShipLength();e++){if(d>9||A>9)throw new Error("Out of bounds!");l.push(n[A][d]),d++}if(l.find(a))throw new Error("Ship Collision!");return Error},isOccupied:a}},211:(n,e,t)=>{const{isOccupied:r}=t(89),{placeAllShips:o,placeRandomShips:a}=t(742),{cols:i}=t(785);n.exports=function(n,e=!1){return{getName:()=>n,getPossessive:()=>"You"===n?"Your":`${n}'s`,isComputer:()=>!0===e,randomAttack:n=>{const e=n.readBoard(),t=[];return e.forEach((n=>n.forEach(((o,a)=>{(r(o)||" "===o)&&t.push([i[a],e.indexOf(n)+1])})))),t[Math.floor(Math.random()*t.length)]},placeShips:(n,e=!1)=>{e?a(n):o(n)}}}},742:(n,e,t)=>{const r=t(432),o=t(34),{cols:a}=t(785),i=["Carrier","Battleship","Cruiser","Submarine","Destroyer"];let s=!0;n.exports={placeAllShips:function(n){document.querySelectorAll(".ship").forEach((e=>{e.onmousedown=function(t){const a=document.querySelector(".ship-container");let i="";function l(n,t){e.style.left=n-20+"px",e.style.top=t-e.offsetHeight/2+"px"}function d(n){l(n.pageX,n.pageY)}function A(n){"r"===n.key&&"vertical"!==i?(i="vertical",e.classList.add("rotated")):(i="",e.classList.remove("rotated"))}e.style.position="absolute",e.style.zIndex=10,l(t.pageX,t.pageY),document.addEventListener("mousemove",d),window.addEventListener("keydown",A),e.onmouseup=t=>{e.style.display="none";const l=document.elementFromPoint(t.clientX,t.clientY);if(e.style.display="flex",document.removeEventListener("mousemove",d),!l.classList.contains("droppable"))return e.style.position="static",e.classList.remove("rotated"),void window.removeEventListener("keydown",A);const c=n.placeShip(r(e.id),l.dataset.column,l.dataset.row,i);!0===c?(o.p1UpdateBoard(n),a.removeChild(e),o.updateMarquee("Place your ships by dragging them onto your board (press R to rotate).",20),a.hasChildNodes()||(s=!1,o.updateMarquee("You're up, Admiral! Choose a cell on your opponent's board to attack.",20))):(e.style.position="static",e.classList.remove("rotated"),window.removeEventListener("keydown",A),o.updateMarquee(c,24))}}}))},placeRandomShips:function n(e,t=0){if(t>=i.length)return;const o=["horizonal","vertical"][Math.floor(2*Math.random())],s=a[Math.floor(10*Math.random())],l=Math.floor(10*Math.random())+1,d=e.placeShip(r(i[t]),s,l,o);n(e,!0===d?++t:t)},startPlacementPhase:function(){s=!0},placementPhaseOver:()=>!s}},432:n=>{n.exports=n=>{let e;switch(n){case"Carrier":e=5;break;case"Battleship":e=4;break;case"Cruiser":case"Submarine":e=3;break;case"Destroyer":e=2;break;default:throw new Error("Unexpected ship name.")}let t=0;const r=()=>t===e;return{name:n,readHits:()=>t,getShipLength:()=>e,hit:()=>{r()||(t+=1)},isSunk:r}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{"use strict";var n=t(72),e=t.n(n),r=t(825),o=t.n(r),a=t(659),i=t.n(a),s=t(56),l=t.n(s),d=t(540),A=t.n(d),c=t(113),p=t.n(c),u=t(365),f={};f.styleTagTransform=p(),f.setAttributes=l(),f.insert=i().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=A(),e()(u.A,f),u.A&&u.A.locals&&u.A.locals;const m=t(34),h=t(138),B=document.querySelector("button#start");m.renderBoards(),B.addEventListener("click",h)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QzhGLEVBQVFDLGVBRVJrSCxFQUFZdkUsaUJBQWlCLFFBQVNzRSxFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVtcGxhdGUtd2VicGFjay1iYXNpYy8uL3NyYy9zdHlsZXMuY3NzIiwid2VicGFjazovL3RlbXBsYXRlLXdlYnBhY2stYmFzaWMvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3RlbXBsYXRlLXdlYnBhY2stYmFzaWMvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly90ZW1wbGF0ZS13ZWJwYWNrLWJhc2ljLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3RlbXBsYXRlLXdlYnBhY2stYmFzaWMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL3RlbXBsYXRlLXdlYnBhY2stYmFzaWMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vdGVtcGxhdGUtd2VicGFjay1iYXNpYy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly90ZW1wbGF0ZS13ZWJwYWNrLWJhc2ljLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vdGVtcGxhdGUtd2VicGFjay1iYXNpYy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL3RlbXBsYXRlLXdlYnBhY2stYmFzaWMvLi9zcmMvY29udmVyc2lvbnMuanMiLCJ3ZWJwYWNrOi8vdGVtcGxhdGUtd2VicGFjay1iYXNpYy8uL3NyYy9kaXNwbGF5LWhlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vdGVtcGxhdGUtd2VicGFjay1iYXNpYy8uL3NyYy9kaXNwbGF5LmpzIiwid2VicGFjazovL3RlbXBsYXRlLXdlYnBhY2stYmFzaWMvLi9zcmMvZ2FtZWJvYXJkLmpzIiwid2VicGFjazovL3RlbXBsYXRlLXdlYnBhY2stYmFzaWMvLi9zcmMvZ2FtZXBsYXkuanMiLCJ3ZWJwYWNrOi8vdGVtcGxhdGUtd2VicGFjay1iYXNpYy8uL3NyYy9oZWxwZXJzLmpzIiwid2VicGFjazovL3RlbXBsYXRlLXdlYnBhY2stYmFzaWMvLi9zcmMvcGxheWVyLmpzIiwid2VicGFjazovL3RlbXBsYXRlLXdlYnBhY2stYmFzaWMvLi9zcmMvc2hpcC1wbGFjZW1lbnQuanMiLCJ3ZWJwYWNrOi8vdGVtcGxhdGUtd2VicGFjay1iYXNpYy8uL3NyYy9zaGlwLmpzIiwid2VicGFjazovL3RlbXBsYXRlLXdlYnBhY2stYmFzaWMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdGVtcGxhdGUtd2VicGFjay1iYXNpYy93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly90ZW1wbGF0ZS13ZWJwYWNrLWJhc2ljL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly90ZW1wbGF0ZS13ZWJwYWNrLWJhc2ljL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdGVtcGxhdGUtd2VicGFjay1iYXNpYy93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vdGVtcGxhdGUtd2VicGFjay1iYXNpYy8uL3NyYy9zdHlsZXMuY3NzPzQ0YjIiLCJ3ZWJwYWNrOi8vdGVtcGxhdGUtd2VicGFjay1iYXNpYy8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PU5vdGFibGUmZGlzcGxheT1zd2FwKTtcIl0pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAqIHtcbiAgICBtYXJnaW46IDA7XG4gICAgcGFkZGluZzogMDtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94XG59XG5cbjpyb290IHtcbiAgICBiYWNrZ3JvdW5kOiAjMjIyO1xuICAgIGZvbnQtc2l6ZTogMThweDtcbiAgICBmb250LWZhbWlseTogJ0ZyYW5rbGluIEdvdGhpYyBNZWRpdW0nLCAnQXJpYWwgTmFycm93JywgQXJpYWwsIHNhbnMtc2VyaWY7XG59XG5cbi5jb250YWluZXIge1xuICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxNzhkZWcsIGhzbCg0NiwgNTAlLCA3NSUpLCBoc2woMzYsIDQ0JSwgNjQlKSAxMiUsIGhzbCgzNiwgNDAlLCA0MyUpIDEwOCUpO1xuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XG4gICAgbWFyZ2luOiAwIGF1dG87XG4gICAgbWluLWhlaWdodDogMTAwdmg7XG4gICAgd2lkdGg6IGNsYW1wKDQzMHB4LCA5NSUsIDEyODBweCk7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgZ2FwOiAwLjZyZW07XG59XG5cbmgxIHtcbiAgICBmb250LWZhbWlseTogXCJOb3RhYmxlXCI7XG4gICAgZm9udC1zaXplOiAzcmVtO1xuICAgIGxldHRlci1zcGFjaW5nOiAwLjJyZW07XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbi10b3A6IDAuNXJlbTtcbiAgICBcbn1cblxuLm1hcnF1ZWUge1xuICAgIHBhZGRpbmc6IDAuNXJlbTtcbiAgICBjb2xvcjogIzMzMztcbiAgICBiYWNrZ3JvdW5kOiAjZmVmZWZlO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYm9yZGVyLXJhZGl1czogMC4yNXJlbTtcbiAgICBib3gtc2hhZG93OiBpbnNldCAycHggMnB4IDRweCAjODg4LFxuICAgICAgICAgICAgICAgIGluc2V0IC0ycHggLTJweCAycHggbGlnaHRncmF5O1xuICAgIHdpZHRoOiA0MDBweDtcbiAgICBoZWlnaHQ6IDRyZW07XG4gICAgZm9udC1zaXplOiAxLjJyZW07XG59XG5cbi5idXR0b24jc3RhcnQge1xuICAgIHBhZGRpbmc6IDVweCA4cHg7XG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgICBib3gtc2hhZG93OiAxcHggMXB4IDRweCAjODg4O1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGJhY2tncm91bmQ6ICNmZmY7XG4gICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XG59XG5cbi5idXR0b24jc3RhcnQ6YWN0aXZlIHtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDFweCkgdHJhbnNsYXRlWSgxcHgpOyBcbiAgYm94LXNoYWRvdzogMCAwIDJweCAjODg4O1xufVxuXG4uYnV0dG9uI3N0YXJ0OmhvdmVyIHtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTQ2LCAyNTIsIDE1NSk7XG59XG5cbi5zaGlwLWNvbnRhaW5lciB7XG4gICAgd2lkdGg6IG1pbig1MDBweCwgOTglKTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGZsZXgtd3JhcDogd3JhcDtcbiAgICBnYXA6IDAuNnJlbTtcbn1cblxuLnJvdGF0ZWQge1xuICAgIHRyYW5zZm9ybS1vcmlnaW46IDIwcHggMjBweDtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7XG59XG5cbi5ib2FyZHMtY29udGFpbmVyIHtcbiAgICB3aWR0aDogbWluKDk4JSwgOTIwcHgpO1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoYXV0by1maXQsIDQxMnB4KTtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBnYXA6IDAuOHJlbTtcbiAgICBwYWRkaW5nOiAwLjI1cmVtIDAuNzVyZW07XG59XG5cbiNwMiAuY2VsbDpob3ZlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyMCwgMjAsIDIwLCAwLjA1KTtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbi5ib2FyZC1jb250YWluZXIge1xuICAgIGJvcmRlcjogNnB4IHNvbGlkICMyMjI7XG4gICAgYm9yZGVyLXJhZGl1czogNnB4O1xuICAgIGJveC1zaGFkb3c6IDFweCAycHggNHB4ICM4ODg7XG4gICAgbGV0dGVyLXNwYWNpbmc6IDAuMDI1cmVtO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHNreWJsdWVcbn1cblxuLmJvYXJkLWhlYWRlciB7XG4gICAgaGVpZ2h0OiA0MHB4O1xuICAgIGJhY2tncm91bmQ6ICNkZGQ7XG4gICAgcGFkZGluZzogNHB4O1xuICAgIGZvbnQtc2l6ZTogMS4zcmVtO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGJvcmRlci1ib3R0b206IDNweCBzb2xpZCBibGFjaztcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG59XG5cbi5ib2FyZCB7XG4gICAgYmFja2dyb3VuZDogaW5oZXJpdDtcbiAgICBoZWlnaHQ6IG1pbi1jb250ZW50O1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC13cmFwOiB3cmFwO1xufVxuXG4uY2VsbCB7XG4gICAgaGVpZ2h0OiA0MHB4O1xuICAgIHdpZHRoOiA0MHB4O1xuICAgIG91dGxpbmU6IDFweCBkb3R0ZWQgYmxhY2s7XG4gICAgYm9yZGVyLXJhZGl1czogOHB4O1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cblxuLnNoaXAgPiAuY2VsbCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzg4ODs7XG4gICAgY29sb3I6ICNmZWZlZmU7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgb3V0bGluZTogMXB4IHNvbGlkICM0NDQ7XG4gICAgYm94LXNoYWRvdzogMXB4IDJweCAzcHggIzU1NTtcbn1cblxuLm1hcmtlciB7XG4gICAgd2lkdGg6IDU1JTtcbiAgICBoZWlnaHQ6IDU1JTtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgYm94LXNoYWRvdzogMHB4IDFweCA0cHggIzMzMztcbn1cblxuLmxvZy1jb250YWluZXIge1xuICAgIGJhY2tncm91bmQ6ICMxMTE7XG4gICAgd2lkdGg6IG1pbig5OCUsIDYwMHB4KTtcbiAgICBoZWlnaHQ6IDE5NnB4O1xuICAgIGJvcmRlcjogMnB4IHNvbGlkICNlZWU7XG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgIGJveC1zaGFkb3c6IDFweCAxcHggNHB4ICM4ODg7XG4gICAgbGV0dGVyLXNwYWNpbmc6IDAuMDI1cmVtO1xuICAgIG1hcmdpbi1ib3R0b206IDAuMjVyZW07XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IG1pbi1jb250ZW50IDFmcjtcbn1cblxuLmxvZy1oZWFkZXIge1xuICAgIGNvbG9yOiAjZmVmZWZlO1xuICAgIGZvbnQtZmFtaWx5OiBtb25vc3BhY2U7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIHBhZGRpbmc6IDAuMXJlbTtcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2VlZTtcbn1cblxuLmxvZyB7XG4gICAgY29sb3I6IGhzbCgzMTAsIDEwMCUsIDg4JSk7XG4gICAgZm9udC1zaXplOiAwLjg1cmVtO1xuICAgIHBhZGRpbmc6IDNweCA1cHg7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cblxuLmxvZy1zcGFuIHtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbi5sb2ctbGluZS1zdW5rIHtcbiAgZm9udC1zdHlsZTogaXRhbGljO1xuICBjb2xvcjogeWVsbG93O1xuICBmb250LXdlaWdodDogYm9sZDtcbn1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksU0FBUztJQUNULFVBQVU7SUFDVjtBQUNKOztBQUVBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGVBQWU7SUFDZix3RUFBd0U7QUFDNUU7O0FBSUE7SUFDSSxxR0FBcUc7SUFDckcsNEJBQTRCO0lBQzVCLGNBQWM7SUFDZCxpQkFBaUI7SUFDakIsZ0NBQWdDO0lBQ2hDLGFBQWE7SUFDYixzQkFBc0I7SUFDdEIsbUJBQW1CO0lBQ25CLFdBQVc7QUFDZjs7QUFFQTtJQUNJLHNCQUFzQjtJQUN0QixlQUFlO0lBQ2Ysc0JBQXNCO0lBQ3RCLGtCQUFrQjtJQUNsQixrQkFBa0I7O0FBRXRCOztBQUVBO0lBQ0ksZUFBZTtJQUNmLFdBQVc7SUFDWCxtQkFBbUI7SUFDbkIsa0JBQWtCO0lBQ2xCLGFBQWE7SUFDYixtQkFBbUI7SUFDbkIsdUJBQXVCO0lBQ3ZCLHNCQUFzQjtJQUN0Qjs2Q0FDeUM7SUFDekMsWUFBWTtJQUNaLFlBQVk7SUFDWixpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxnQkFBZ0I7SUFDaEIsbUJBQW1CO0lBQ25CLDRCQUE0QjtJQUM1QixpQkFBaUI7SUFDakIsZ0JBQWdCO0lBQ2hCLHVCQUF1QjtBQUMzQjs7QUFFQTtFQUNFLDBDQUEwQztFQUMxQyx3QkFBd0I7QUFDMUI7O0FBRUE7RUFDRSxlQUFlO0VBQ2Ysb0NBQW9DO0FBQ3RDOztBQUVBO0lBQ0ksc0JBQXNCO0lBQ3RCLGFBQWE7SUFDYix1QkFBdUI7SUFDdkIsZUFBZTtJQUNmLFdBQVc7QUFDZjs7QUFFQTtJQUNJLDJCQUEyQjtJQUMzQix3QkFBd0I7QUFDNUI7O0FBRUE7SUFDSSxzQkFBc0I7SUFDdEIsYUFBYTtJQUNiLDhDQUE4QztJQUM5Qyx1QkFBdUI7SUFDdkIsV0FBVztJQUNYLHdCQUF3QjtBQUM1Qjs7QUFFQTtJQUNJLHdDQUF3QztJQUN4QyxlQUFlO0FBQ25COztBQUVBO0lBQ0ksc0JBQXNCO0lBQ3RCLGtCQUFrQjtJQUNsQiw0QkFBNEI7SUFDNUIsd0JBQXdCO0lBQ3hCO0FBQ0o7O0FBRUE7SUFDSSxZQUFZO0lBQ1osZ0JBQWdCO0lBQ2hCLFlBQVk7SUFDWixpQkFBaUI7SUFDakIsaUJBQWlCO0lBQ2pCLDhCQUE4QjtJQUM5QixhQUFhO0lBQ2IsdUJBQXVCO0lBQ3ZCLG1CQUFtQjtBQUN2Qjs7QUFFQTtJQUNJLG1CQUFtQjtJQUNuQixtQkFBbUI7SUFDbkIsYUFBYTtJQUNiLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSxZQUFZO0lBQ1osV0FBVztJQUNYLHlCQUF5QjtJQUN6QixrQkFBa0I7SUFDbEIsYUFBYTtJQUNiLHVCQUF1QjtJQUN2QixtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxzQkFBc0I7SUFDdEIsY0FBYztJQUNkLGlCQUFpQjtJQUNqQix1QkFBdUI7SUFDdkIsNEJBQTRCO0FBQ2hDOztBQUVBO0lBQ0ksVUFBVTtJQUNWLFdBQVc7SUFDWCxrQkFBa0I7SUFDbEIsNEJBQTRCO0FBQ2hDOztBQUVBO0lBQ0ksZ0JBQWdCO0lBQ2hCLHNCQUFzQjtJQUN0QixhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLGtCQUFrQjtJQUNsQiw0QkFBNEI7SUFDNUIsd0JBQXdCO0lBQ3hCLHNCQUFzQjtJQUN0QixhQUFhO0lBQ2IsbUNBQW1DO0FBQ3ZDOztBQUVBO0lBQ0ksY0FBYztJQUNkLHNCQUFzQjtJQUN0QixrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLDZCQUE2QjtBQUNqQzs7QUFFQTtJQUNJLDBCQUEwQjtJQUMxQixrQkFBa0I7SUFDbEIsZ0JBQWdCO0lBQ2hCLGFBQWE7SUFDYixzQkFBc0I7SUFDdEIseUJBQXlCO0lBQ3pCLGdCQUFnQjtBQUNwQjs7QUFFQTtFQUNFLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixhQUFhO0VBQ2IsaUJBQWlCO0FBQ25CXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIioge1xcbiAgICBtYXJnaW46IDA7XFxuICAgIHBhZGRpbmc6IDA7XFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3hcXG59XFxuXFxuOnJvb3Qge1xcbiAgICBiYWNrZ3JvdW5kOiAjMjIyO1xcbiAgICBmb250LXNpemU6IDE4cHg7XFxuICAgIGZvbnQtZmFtaWx5OiAnRnJhbmtsaW4gR290aGljIE1lZGl1bScsICdBcmlhbCBOYXJyb3cnLCBBcmlhbCwgc2Fucy1zZXJpZjtcXG59XFxuXFxuQGltcG9ydCB1cmwoJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9Tm90YWJsZSZkaXNwbGF5PXN3YXAnKTtcXG5cXG4uY29udGFpbmVyIHtcXG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDE3OGRlZywgaHNsKDQ2LCA1MCUsIDc1JSksIGhzbCgzNiwgNDQlLCA2NCUpIDEyJSwgaHNsKDM2LCA0MCUsIDQzJSkgMTA4JSk7XFxuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XFxuICAgIG1hcmdpbjogMCBhdXRvO1xcbiAgICBtaW4taGVpZ2h0OiAxMDB2aDtcXG4gICAgd2lkdGg6IGNsYW1wKDQzMHB4LCA5NSUsIDEyODBweCk7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGdhcDogMC42cmVtO1xcbn1cXG5cXG5oMSB7XFxuICAgIGZvbnQtZmFtaWx5OiBcXFwiTm90YWJsZVxcXCI7XFxuICAgIGZvbnQtc2l6ZTogM3JlbTtcXG4gICAgbGV0dGVyLXNwYWNpbmc6IDAuMnJlbTtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICBtYXJnaW4tdG9wOiAwLjVyZW07XFxuICAgIFxcbn1cXG5cXG4ubWFycXVlZSB7XFxuICAgIHBhZGRpbmc6IDAuNXJlbTtcXG4gICAgY29sb3I6ICMzMzM7XFxuICAgIGJhY2tncm91bmQ6ICNmZWZlZmU7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIGJvcmRlci1yYWRpdXM6IDAuMjVyZW07XFxuICAgIGJveC1zaGFkb3c6IGluc2V0IDJweCAycHggNHB4ICM4ODgsXFxuICAgICAgICAgICAgICAgIGluc2V0IC0ycHggLTJweCAycHggbGlnaHRncmF5O1xcbiAgICB3aWR0aDogNDAwcHg7XFxuICAgIGhlaWdodDogNHJlbTtcXG4gICAgZm9udC1zaXplOiAxLjJyZW07XFxufVxcblxcbi5idXR0b24jc3RhcnQge1xcbiAgICBwYWRkaW5nOiA1cHggOHB4O1xcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xcbiAgICBib3gtc2hhZG93OiAxcHggMXB4IDRweCAjODg4O1xcbiAgICBmb250LXdlaWdodDogYm9sZDtcXG4gICAgYmFja2dyb3VuZDogI2ZmZjtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxufVxcblxcbi5idXR0b24jc3RhcnQ6YWN0aXZlIHtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgxcHgpIHRyYW5zbGF0ZVkoMXB4KTsgXFxuICBib3gtc2hhZG93OiAwIDAgMnB4ICM4ODg7XFxufVxcblxcbi5idXR0b24jc3RhcnQ6aG92ZXIge1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE0NiwgMjUyLCAxNTUpO1xcbn1cXG5cXG4uc2hpcC1jb250YWluZXIge1xcbiAgICB3aWR0aDogbWluKDUwMHB4LCA5OCUpO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgZmxleC13cmFwOiB3cmFwO1xcbiAgICBnYXA6IDAuNnJlbTtcXG59XFxuXFxuLnJvdGF0ZWQge1xcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiAyMHB4IDIwcHg7XFxuICAgIHRyYW5zZm9ybTogcm90YXRlKDkwZGVnKTtcXG59XFxuXFxuLmJvYXJkcy1jb250YWluZXIge1xcbiAgICB3aWR0aDogbWluKDk4JSwgOTIwcHgpO1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdChhdXRvLWZpdCwgNDEycHgpO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgZ2FwOiAwLjhyZW07XFxuICAgIHBhZGRpbmc6IDAuMjVyZW0gMC43NXJlbTtcXG59XFxuXFxuI3AyIC5jZWxsOmhvdmVyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyMCwgMjAsIDIwLCAwLjA1KTtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4uYm9hcmQtY29udGFpbmVyIHtcXG4gICAgYm9yZGVyOiA2cHggc29saWQgIzIyMjtcXG4gICAgYm9yZGVyLXJhZGl1czogNnB4O1xcbiAgICBib3gtc2hhZG93OiAxcHggMnB4IDRweCAjODg4O1xcbiAgICBsZXR0ZXItc3BhY2luZzogMC4wMjVyZW07XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHNreWJsdWVcXG59XFxuXFxuLmJvYXJkLWhlYWRlciB7XFxuICAgIGhlaWdodDogNDBweDtcXG4gICAgYmFja2dyb3VuZDogI2RkZDtcXG4gICAgcGFkZGluZzogNHB4O1xcbiAgICBmb250LXNpemU6IDEuM3JlbTtcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICAgIGJvcmRlci1ib3R0b206IDNweCBzb2xpZCBibGFjaztcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbi5ib2FyZCB7XFxuICAgIGJhY2tncm91bmQ6IGluaGVyaXQ7XFxuICAgIGhlaWdodDogbWluLWNvbnRlbnQ7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtd3JhcDogd3JhcDtcXG59XFxuXFxuLmNlbGwge1xcbiAgICBoZWlnaHQ6IDQwcHg7XFxuICAgIHdpZHRoOiA0MHB4O1xcbiAgICBvdXRsaW5lOiAxcHggZG90dGVkIGJsYWNrO1xcbiAgICBib3JkZXItcmFkaXVzOiA4cHg7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4uc2hpcCA+IC5jZWxsIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzg4ODs7XFxuICAgIGNvbG9yOiAjZmVmZWZlO1xcbiAgICBmb250LXdlaWdodDogYm9sZDtcXG4gICAgb3V0bGluZTogMXB4IHNvbGlkICM0NDQ7XFxuICAgIGJveC1zaGFkb3c6IDFweCAycHggM3B4ICM1NTU7XFxufVxcblxcbi5tYXJrZXIge1xcbiAgICB3aWR0aDogNTUlO1xcbiAgICBoZWlnaHQ6IDU1JTtcXG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgICBib3gtc2hhZG93OiAwcHggMXB4IDRweCAjMzMzO1xcbn1cXG5cXG4ubG9nLWNvbnRhaW5lciB7XFxuICAgIGJhY2tncm91bmQ6ICMxMTE7XFxuICAgIHdpZHRoOiBtaW4oOTglLCA2MDBweCk7XFxuICAgIGhlaWdodDogMTk2cHg7XFxuICAgIGJvcmRlcjogMnB4IHNvbGlkICNlZWU7XFxuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gICAgYm94LXNoYWRvdzogMXB4IDFweCA0cHggIzg4ODtcXG4gICAgbGV0dGVyLXNwYWNpbmc6IDAuMDI1cmVtO1xcbiAgICBtYXJnaW4tYm90dG9tOiAwLjI1cmVtO1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IG1pbi1jb250ZW50IDFmcjtcXG59XFxuXFxuLmxvZy1oZWFkZXIge1xcbiAgICBjb2xvcjogI2ZlZmVmZTtcXG4gICAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZTtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICBwYWRkaW5nOiAwLjFyZW07XFxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZWVlO1xcbn1cXG5cXG4ubG9nIHtcXG4gICAgY29sb3I6IGhzbCgzMTAsIDEwMCUsIDg4JSk7XFxuICAgIGZvbnQtc2l6ZTogMC44NXJlbTtcXG4gICAgcGFkZGluZzogM3B4IDVweDtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuXFxuLmxvZy1zcGFuIHtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cXG5cXG4ubG9nLWxpbmUtc3VuayB7XFxuICBmb250LXN0eWxlOiBpdGFsaWM7XFxuICBjb2xvcjogeWVsbG93O1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cbiAgY3NzICs9IG9iai5jc3M7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH1cblxuICAvLyBGb3Igb2xkIElFXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7fSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCJjb25zdCBjb2xzID0gW1wiQVwiLCBcIkJcIiwgXCJDXCIsIFwiRFwiLCBcIkVcIiwgXCJGXCIsIFwiR1wiLCBcIkhcIiwgXCJJXCIsIFwiSlwiXTtcblxuY29uc3Qgcm93ID0gKHJvd0Nvb3JkKSA9PiB7XG4gICAgaWYgKHJvd0Nvb3JkID4gMTAgfHwgcm93Q29vcmQgPCAxKSB0aHJvdyBuZXcgRXJyb3IoJ091dCBvZiBib3VuZHMhJylcbiAgICByZXR1cm4gcm93Q29vcmQgLSAxO1xufVxuXG5jb25zdCBjb2x1bW4gPSAoY29sdW1uQ29vcmQpID0+IHtcbiAgY29uc3QgaW5kZXggPSBjb2xzLmluZGV4T2YoY29sdW1uQ29vcmQpO1xuICBcbiAgaWYgKGluZGV4ID4gOSB8fCBpbmRleCA8IDApIHRocm93IG5ldyBFcnJvcignT3V0IG9mIGJvdW5kcyEnKVxuICByZXR1cm4gaW5kZXhcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IHJvdywgY29sdW1uLCBjb2xzIH0iLCJjb25zdCB7IGlzT2NjdXBpZWQgfSA9IHJlcXVpcmUoJy4vaGVscGVycycpO1xuY29uc3QgeyBjb2xzLCByb3csIGNvbHVtbiB9ID0gcmVxdWlyZSgnLi9jb252ZXJzaW9ucycpO1xuY29uc3QgR2FtZWJvYXJkID0gcmVxdWlyZSgnLi9nYW1lYm9hcmQnKTtcblxuZnVuY3Rpb24gY3JlYXRlRE9NRWxlbWVudCAoZWxlbWVudCwgY2xhc3NlcywgaWQpIHtcbiAgICBjb25zdCBuZXdFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChlbGVtZW50KTtcbiAgICBpZiAoY2xhc3NlcykgY2xhc3Nlcy5mb3JFYWNoKHZhbHVlID0+IG5ld0VsZW1lbnQuY2xhc3NMaXN0LmFkZCh2YWx1ZSkpXG4gICAgaWYgKGlkKSBuZXdFbGVtZW50LnNldEF0dHJpYnV0ZSgnaWQnLCBpZCk7XG5cbiAgICByZXR1cm4gbmV3RWxlbWVudDtcbn1cblxuY29uc3QgcmVuZGVyQm9hcmQgPSAoaWQpID0+IHtcbiAgICBjb25zdCBib2FyZCA9IEdhbWVib2FyZCgpLnJlYWRCb2FyZCgpO1xuICAgIGNvbnN0IGRvbUJvYXJkID0gY3JlYXRlRE9NRWxlbWVudCgnZGl2JywgWydib2FyZCddLCBpZCk7XG4gICAgbGV0IG5ld0NlbGxcbiAgICBib2FyZC5mb3JFYWNoKGJvYXJkUm93ID0+IGJvYXJkUm93LmZvckVhY2goKGNlbGwsIGluZGV4KSA9PiB7XG4gICAgICAgIGlmIChpZCA9PT0gJ3AxJykgbmV3Q2VsbCA9IGNyZWF0ZURPTUVsZW1lbnQoJ2RpdicsIFsnY2VsbCcsICdkcm9wcGFibGUnXSk7ZWxzZSBuZXdDZWxsID0gY3JlYXRlRE9NRWxlbWVudCgnZGl2JywgWydjZWxsJ10pO1xuICAgICAgICBuZXdDZWxsLmRhdGFzZXQuY29sdW1uID0gY29sc1tpbmRleF07XG4gICAgICAgIG5ld0NlbGwuZGF0YXNldC5yb3cgPSBib2FyZC5pbmRleE9mKGJvYXJkUm93KSArIDE7XG4gICAgICAgIGRvbUJvYXJkLmFwcGVuZENoaWxkKG5ld0NlbGwpO1xuICAgIH0pKTtcbiAgICByZXR1cm4gZG9tQm9hcmRcbn1cblxuY29uc3QgY3JlYXRlU2hpcCA9IGZ1bmN0aW9uIGNyZWF0ZVNoaXBPbkRpc3BsYXkoaWQsIGxlbmd0aCkge1xuICAgIGNvbnN0IG5ld1NoaXAgPSBjcmVhdGVET01FbGVtZW50KCdkaXYnLCBbJ3NoaXAnXSwgaWQpO1xuICAgIG5ld1NoaXAuc3R5bGUuY3Vyc29yID0gXCJtb3ZlXCJcbiAgICBuZXdTaGlwLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIlxuICAgIGxldCBuID0gMFxuICAgIHdoaWxlIChsZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBuZXdDZWxsID0gY3JlYXRlRE9NRWxlbWVudCgnZGl2JywgWydjZWxsJ10pO1xuICAgICAgaWYgKG4gPCAzKSBuZXdDZWxsLnRleHRDb250ZW50ID0gaWQudG9TdHJpbmcoKS5zdWJzdHJpbmcobiwgbiArIDEpLnRvVXBwZXJDYXNlKCk7XG4gICAgICBuZXdTaGlwLmFwcGVuZENoaWxkKG5ld0NlbGwpXG4gICAgICBsZW5ndGgtLTtcbiAgICAgIG4rKztcbiAgICB9XG4gICAgcmV0dXJuIG5ld1NoaXA7XG59XG5cbmNvbnN0IHJlbmRlckNlbGxzID0gKGdhbWVib2FyZCwgZG9tQm9hcmQsIHNob3dTaGlwcyA9IHRydWUpID0+IHtcbiAgICBjb25zdCBib2FyZCA9IGdhbWVib2FyZC5yZWFkQm9hcmQoKTtcbiAgICBsZXQgbmV3Q2VsbDtcbiAgICB3aGlsZSAoZG9tQm9hcmQuZmlyc3RDaGlsZCkgZG9tQm9hcmQucmVtb3ZlQ2hpbGQoZG9tQm9hcmQubGFzdENoaWxkKTtcbiAgICBib2FyZC5mb3JFYWNoKGJvYXJkUm93ID0+IGJvYXJkUm93LmZvckVhY2goKGNlbGwsIGluZGV4KSA9PiB7XG4gICAgICAgIGlmIChkb21Cb2FyZC5pZCA9PT0gJ3AyJykgbmV3Q2VsbCA9IGNyZWF0ZURPTUVsZW1lbnQoJ2RpdicsIFsnY2VsbCddKTtcbiAgICAgICAgZWxzZSBuZXdDZWxsID0gY3JlYXRlRE9NRWxlbWVudCgnZGl2JywgWydjZWxsJywgJ2Ryb3BwYWJsZSddKTtcbiAgICAgICAgbmV3Q2VsbC5kYXRhc2V0LmNvbHVtbiA9IGNvbHNbaW5kZXhdO1xuICAgICAgICBuZXdDZWxsLmRhdGFzZXQucm93ID0gYm9hcmQuaW5kZXhPZihib2FyZFJvdykgKyAxO1xuICAgICAgICBpZiAoaXNPY2N1cGllZChjZWxsKSkge1xuICAgICAgICAgICAgaWYgKHNob3dTaGlwcykgbmV3Q2VsbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnIzg4OCc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNlbGwgPT09ICdYJykge1xuICAgICAgICAgICAgY29uc3QgbmV3TWFya2VyID0gY3JlYXRlRE9NRWxlbWVudCgnZGl2JywgWydtYXJrZXInXSk7XG4gICAgICAgICAgICBuZXdNYXJrZXIuZGF0YXNldC5jb2x1bW4gPSBjb2xzW2luZGV4XTtcbiAgICAgICAgICAgIG5ld01hcmtlci5kYXRhc2V0LnJvdyA9IGJvYXJkLmluZGV4T2YoYm9hcmRSb3cpICsgMTtcbiAgICAgICAgICAgIG5ld01hcmtlci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAncmdiKDI1NSwgNjAsIDIwKSc7XG4gICAgICAgICAgICBuZXdDZWxsLmFwcGVuZENoaWxkKG5ld01hcmtlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNlbGwgPT09ICdPJykge1xuICAgICAgICAgICAgY29uc3QgbmV3TWFya2VyID0gY3JlYXRlRE9NRWxlbWVudCgnZGl2JywgWydtYXJrZXInXSk7XG4gICAgICAgICAgICBuZXdNYXJrZXIuZGF0YXNldC5jb2x1bW4gPSBjb2xzW2luZGV4XTtcbiAgICAgICAgICAgIG5ld01hcmtlci5kYXRhc2V0LnJvdyA9IGJvYXJkLmluZGV4T2YoYm9hcmRSb3cpICsgMTtcbiAgICAgICAgICAgIG5ld01hcmtlci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnI2VlZSc7XG4gICAgICAgICAgICBuZXdDZWxsLmFwcGVuZENoaWxkKG5ld01hcmtlcik7XG4gICAgICAgIH1cbiAgICAgICAgZG9tQm9hcmQuYXBwZW5kQ2hpbGQobmV3Q2VsbCk7XG4gICAgfSkpO1xufVxuXG5jb25zdCBhZGRUb0xvZyA9IChwbGF5ZXIsIGNlbGwsIG9wcG9uZW50LCBvcHBCb2FyZCwgc2hpcFN1bmssIGRvbUxvZykgPT4ge1xuICAgIGNvbnN0IGF0dGFja2VkQ2VsbCA9IG9wcEJvYXJkLnJlYWRCb2FyZCgpW3JvdyhjZWxsWzFdKV1bY29sdW1uKGNlbGxbMF0pXTtcblxuICAgIGNvbnN0IG5ld0xpbmUgPSBjcmVhdGVET01FbGVtZW50KCdwJywgWydsb2ctbGluZSddKTtcbiAgICBuZXdMaW5lLnRleHRDb250ZW50ID0gYCR7cGxheWVyLmdldE5hbWUoKX0gYXR0YWNrZWQgJHtjZWxsLmpvaW4oJywgJyl9IC4uLiBpdCdzIGEgYDtcbiAgICBjb25zdCBzcGFuID0gY3JlYXRlRE9NRWxlbWVudCgnc3BhbicsIFsnbG9nLXNwYW4nXSk7XG4gICAgaWYgKGF0dGFja2VkQ2VsbCA9PT0gJ1gnKSB7XG4gICAgICAgIHNwYW4udGV4dENvbnRlbnQgPSAnSElUISc7XG4gICAgICAgIHNwYW4uc3R5bGUuY29sb3IgPSAncmdiKDI1NSwgNjAsIDIwKSc7XG4gICAgfSBlbHNlIGlmIChhdHRhY2tlZENlbGwgPT09ICdPJykge1xuICAgICAgICBzcGFuLnRleHRDb250ZW50ID0gJ01JU1MhJztcbiAgICAgICAgc3Bhbi5zdHlsZS5jb2xvciA9ICcjZWVlJ1xuICAgIH1cbiAgICBuZXdMaW5lLmFwcGVuZENoaWxkKHNwYW4pXG4gICAgZG9tTG9nLmFwcGVuZENoaWxkKG5ld0xpbmUpO1xuICAgIGlmIChzaGlwU3Vuaykge1xuICAgICAgICBjb25zdCBzdW5rTGluZSA9IGNyZWF0ZURPTUVsZW1lbnQoJ3AnLCBbJ2xvZy1saW5lLXN1bmsnXSlcbiAgICAgICAgc3Vua0xpbmUudGV4dENvbnRlbnQgPSBgJHtvcHBvbmVudC5nZXRQb3NzZXNzaXZlKCl9ICR7c2hpcFN1bmt9IGhhcyBiZWVuIHN1bmshYDtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7IGRvbUxvZy5hcHBlbmRDaGlsZChzdW5rTGluZSl9LCAxNTApICAgXG4gICAgfVxufVxuXG5jb25zdCBjaGFuZ2VNYXJxdWVlID0gKHRleHRDb250ZW50LCBkb21Ob2RlLCBzaXplKSA9PiB7XG4gICAgY29uc3QgbWVzc2FnZSA9IHRleHRDb250ZW50LnRvU3RyaW5nKCk7XG4gICAgY29uc3Qgbm9kZSA9IGRvbU5vZGU7XG4gICAgaWYgKG1lc3NhZ2UuaW5jbHVkZXMoJ0Vycm9yJykpIHtcbiAgICAgICAgbm9kZS5zdHlsZS5jb2xvciA9ICdvcmFuZ2VyZWQnXG4gICAgICAgIG5vZGUudGV4dENvbnRlbnQgPSBtZXNzYWdlICsgJyBUcnkgYWdhaW4uJztcbiAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLnRleHRDb250ZW50ID0gbWVzc2FnZTtcbiAgICAgICAgbm9kZS5zdHlsZS5jb2xvciA9ICcjMzMzJztcbiAgICB9XG4gICAgbm9kZS5zdHlsZS5mb250U2l6ZSA9IGAke3NpemV9cHhgO1xuICAgIHJldHVybiBub2RlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgY3JlYXRlRE9NRWxlbWVudCwgcmVuZGVyQm9hcmQsIHJlbmRlckNlbGxzLCBhZGRUb0xvZywgY2hhbmdlTWFycXVlZSwgY3JlYXRlU2hpcCB9IiwiY29uc3QgeyByZW5kZXJCb2FyZCwgcmVuZGVyQ2VsbHMsIGFkZFRvTG9nLCBjaGFuZ2VNYXJxdWVlLCBjcmVhdGVTaGlwIH0gPSByZXF1aXJlKCcuL2Rpc3BsYXktaGVscGVycycpO1xuXG5jb25zdCBtYXJxdWVlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1hcnF1ZWUnKVxuY29uc3QgcDFDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncDFDb250YWluZXInKVxuY29uc3QgcDJDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncDJDb250YWluZXInKVxuY29uc3QgcDFIZWFkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncDFIZWFkZXInKVxuY29uc3QgcDJIZWFkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncDJIZWFkZXInKVxuY29uc3QgZ2FtZWxvZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sb2cnKVxuY29uc3Qgc2hpcENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zaGlwLWNvbnRhaW5lcicpXG5sZXQgcDFCb2FyZDtcbmxldCBwMkJvYXJkO1xuXG5jb25zdCBEaXNwbGF5ID0geyAgXG4gICAgcmVuZGVyQm9hcmRzICgpIHtcbiAgICAgICAgd2hpbGUgKHAxQ29udGFpbmVyLmNvbnRhaW5zKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwMScpKSkge1xuICAgICAgICAgICAgcDFDb250YWluZXIucmVtb3ZlQ2hpbGQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3AxJykpO1xuICAgICAgICB9XG4gICAgICAgIHAxQ29udGFpbmVyLmFwcGVuZENoaWxkKHJlbmRlckJvYXJkKCdwMScpKTtcbiAgICAgICAgd2hpbGUgKHAyQ29udGFpbmVyLmNvbnRhaW5zKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwMicpKSkge1xuICAgICAgICAgICAgcDJDb250YWluZXIucmVtb3ZlQ2hpbGQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3AyJykpO1xuICAgICAgICB9IFxuICAgICAgICBwMkNvbnRhaW5lci5hcHBlbmRDaGlsZChyZW5kZXJCb2FyZCgncDInKSk7XG4gICAgICAgIHAxSGVhZGVyLnRleHRDb250ZW50ID0gJ1lvdSc7XG4gICAgICAgIHAySGVhZGVyLnRleHRDb250ZW50ID0gJ0NvbXB1dGVyJztcbiAgICAgICAgZ2FtZWxvZy50ZXh0Q29udGVudCA9ICcnO1xuICAgICAgICBwMUJvYXJkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3AxJyk7XG4gICAgICAgIHAyQm9hcmQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncDInKTtcbiAgICB9LFxuICAgIFxuICAgIHN0YXJ0R2FtZSAoKSB7XG4gICAgICAgIHRoaXMucmVuZGVyQm9hcmRzKCk7XG4gICAgICAgIHRoaXMucmVuZGVyU2hpcHMoKTtcbiAgICAgICAgbWFycXVlZS50ZXh0Q29udGVudCA9ICdQbGFjZSB5b3VyIHNoaXBzIGJ5IGRyYWdnaW5nIHRoZW0gb250byB5b3VyIGJvYXJkIChwcmVzcyBSIHRvIHJvdGF0ZSkuJ1xuICAgICAgICBtYXJxdWVlLnN0eWxlLmZvbnRTaXplID0gJzIwcHgnO1xuICAgIH0sXG5cbiAgICByZW5kZXJTaGlwcygpIHtcbiAgICAgICAgY29uc3Qgc2hpcHMgPSBbXG4gICAgICAgICAgICBjcmVhdGVTaGlwKCdDYXJyaWVyJywgNSksXG4gICAgICAgICAgICBjcmVhdGVTaGlwKCdCYXR0bGVzaGlwJywgNCksXG4gICAgICAgICAgICBjcmVhdGVTaGlwKCdDcnVpc2VyJywgMyksXG4gICAgICAgICAgICBjcmVhdGVTaGlwKCdTdWJtYXJpbmUnLCAzKSxcbiAgICAgICAgICAgIGNyZWF0ZVNoaXAoJ0Rlc3Ryb3llcicsIDIpXG4gICAgICAgIF07XG4gICAgICAgIHdoaWxlIChzaGlwQ29udGFpbmVyLmZpcnN0Q2hpbGQpIHNoaXBDb250YWluZXIucmVtb3ZlQ2hpbGQoc2hpcENvbnRhaW5lci5sYXN0Q2hpbGQpO1xuICAgICAgICBzaGlwcy5mb3JFYWNoKHNoaXAgPT4gc2hpcENvbnRhaW5lci5hcHBlbmRDaGlsZChzaGlwKSlcbiAgICB9LFxuXG4gICAgcDFVcGRhdGVCb2FyZCAoYm9hcmQpIHsgcmVuZGVyQ2VsbHMoYm9hcmQsIHAxQm9hcmQpIH0sXG4gICAgcDJVcGRhdGVCb2FyZCAoYm9hcmQpIHsgcmVuZGVyQ2VsbHMoYm9hcmQsIHAyQm9hcmQsIGZhbHNlKSB9LFxuICAgIHVwZGF0ZURpc3BsYXkgKHBsYXllciwgY2VsbCwgb3Bwb25lbnQsIG9wcEJvYXJkLCBzaGlwU3Vuaykge1xuICAgICAgICB0aGlzLnVwZGF0ZU1hcnF1ZWUoYCR7b3Bwb25lbnQuZ2V0UG9zc2Vzc2l2ZSgpfSB0dXJuYCwgMjYpO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGFkZFRvTG9nKHBsYXllciwgY2VsbCwgb3Bwb25lbnQsIG9wcEJvYXJkLCBzaGlwU3VuaywgZ2FtZWxvZyk7XG4gICAgICAgIH0sIDEwMCk7ICBcbiAgICB9LFxuICAgIHVwZGF0ZU1hcnF1ZWUgKHRleHQsIHNpemUpIHtcbiAgICAgICAgY2hhbmdlTWFycXVlZSh0ZXh0LCBtYXJxdWVlLCBzaXplKTtcbiAgICB9LFxuICAgIGdhbWVPdmVyKHdpbm5lcikgeyBtYXJxdWVlLnRleHRDb250ZW50ID0gYFdpbm5lcjogJHt3aW5uZXIuZ2V0TmFtZSgpfWAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IERpc3BsYXk7XG4iLCJjb25zdCB7IHJvdywgY29sdW1uIH0gPSByZXF1aXJlKCcuL2NvbnZlcnNpb25zJyk7XG5jb25zdCB7IGNoZWNrQ29sbGlzaW9ucywgaXNPY2N1cGllZCB9ID0gcmVxdWlyZSAoJy4vaGVscGVycycpXG5cbmNvbnN0IEdhbWVib2FyZCA9ICgpID0+IHtcbiAgY29uc3QgYm9hcmQgPSBbXTtcbiAgKGZ1bmN0aW9uIGNyZWF0ZUJvYXJkKCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkrKykge1xuICAgICAgY29uc3QgbmV3Um93ID0gW107XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDEwOyBqKyspIHtcbiAgICAgICAgbmV3Um93LnB1c2goXCIgXCIpO1xuICAgICAgfVxuICAgICAgYm9hcmQucHVzaChuZXdSb3cpO1xuICAgIH1cbiAgfSkoKTtcbiAgXG4gIGNvbnN0IHJlYWRCb2FyZCA9ICgpID0+IGJvYXJkO1xuICBjb25zdCBhbGxTaGlwcyA9IFtdO1xuICBjb25zdCBnZXRBbGxTaGlwcyA9ICgpID0+IGFsbFNoaXBzO1xuXG4gIGZ1bmN0aW9uIGFsbFNoaXBzU3VuayAoKSB7XG4gICAgaWYgKGFsbFNoaXBzLmxlbmd0aCA8IDUpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gYWxsU2hpcHMuZmlsdGVyKHNoaXAgPT4gc2hpcC5pc1N1bmsoKSkubGVuZ3RoID09PSA1OyBcbiAgfVxuXG4gIGZ1bmN0aW9uIHBsYWNlU2hpcChzaGlwT2JqLCB4LCB5LCBvcmllbnRhdGlvbikge1xuICAgIGlmIChhbGxTaGlwcy5sZW5ndGggPiA0KSB0aHJvdyBuZXcgRXJyb3IgKCdTaGlwIGxpbWl0IGV4Y2VlZGVkLicpXG4gICAgbGV0IGNvbEluZGV4ID0gY29sdW1uKHgpO1xuICAgIGxldCByb3dJbmRleCA9IHJvdyh5KTtcbiAgIFxuICAgIHRyeSB7XG4gICAgICAoY2hlY2tDb2xsaXNpb25zKGJvYXJkLCB4LCB5LCBvcmllbnRhdGlvbiwgc2hpcE9iaikpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBlcnJvcjtcbiAgICB9XG4gICBcbiAgICBhbGxTaGlwcy5wdXNoKHNoaXBPYmopO1xuICAgIGlmKG9yaWVudGF0aW9uID09PSAndmVydGljYWwnKSB7XG4gICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBzaGlwT2JqLmdldFNoaXBMZW5ndGgoKTsgaSsrKSB7XG4gICAgICAgIGJvYXJkW3Jvd0luZGV4XVtjb2xJbmRleF0gPSBzaGlwT2JqO1xuICAgICAgICByb3dJbmRleCsrO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBzaGlwT2JqLmdldFNoaXBMZW5ndGgoKTsgaSsrKSB7XG4gICAgICAgIGJvYXJkW3Jvd0luZGV4XVtjb2xJbmRleF0gPSBzaGlwT2JqO1xuICAgICAgICBjb2xJbmRleCsrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlY2VpdmVBdHRhY2soeCwgeSkge1xuICAgIGxldCBzdW5rU2hpcCA9IG51bGw7XG4gICAgY29uc3QgYXR0YWNrZWRDZWxsID0gYm9hcmRbcm93KHkpXVtjb2x1bW4oeCldO1xuICAgIGlmIChhdHRhY2tlZENlbGwgPT09IFwiWFwiIHx8IGF0dGFja2VkQ2VsbCA9PT0gXCJPXCIpIHRocm93IG5ldyBFcnJvcignQ2VsbCBhbHJlYWR5IGhpdCEnKVxuICAgIGVsc2UgaWYgKGlzT2NjdXBpZWQoYXR0YWNrZWRDZWxsKSkge1xuICAgICAgYXR0YWNrZWRDZWxsLmhpdCgpO1xuICAgICAgaWYgKGF0dGFja2VkQ2VsbC5pc1N1bmsoKSkgc3Vua1NoaXAgPSBhdHRhY2tlZENlbGwubmFtZVxuICAgICAgYm9hcmRbcm93KHkpXVtjb2x1bW4oeCldID0gXCJYXCI7XG4gICAgfSBlbHNlIGJvYXJkW3Jvdyh5KV1bY29sdW1uKHgpXSA9IFwiT1wiO1xuICAgIFxuICAgIHJldHVybiB7IGNlbGw6IFt4LCB5XSwgc3Vua1NoaXAgfTtcbiAgfVxuXG4gIHJldHVybiB7IHJlYWRCb2FyZCwgcmVjZWl2ZUF0dGFjaywgcGxhY2VTaGlwLCBhbGxTaGlwc1N1bmssIGdldEFsbFNoaXBzIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEdhbWVib2FyZDtcbiIsImNvbnN0IFBsYXllciA9IHJlcXVpcmUoJy4vcGxheWVyJyk7XG5jb25zdCB7IHN0YXJ0UGxhY2VtZW50UGhhc2UsIHBsYWNlbWVudFBoYXNlT3ZlciB9ID0gcmVxdWlyZSgnLi9zaGlwLXBsYWNlbWVudCcpXG5jb25zdCBEaXNwbGF5ID0gcmVxdWlyZSgnLi9kaXNwbGF5Jyk7XG5jb25zdCBHYW1lYm9hcmQgPSByZXF1aXJlKCcuL2dhbWVib2FyZCcpO1xuXG5mdW5jdGlvbiBHYW1lKCkge1xuICBEaXNwbGF5LnN0YXJ0R2FtZSgpO1xuICBjb25zdCBwbGF5ZXIxID0gUGxheWVyKCdZb3UnKTtcbiAgY29uc3QgcGxheWVyMiA9IFBsYXllcignQ29tcHV0ZXInLCB0cnVlKTtcbiAgY29uc3QgcDFCb2FyZCA9IEdhbWVib2FyZCgpO1xuICBjb25zdCBwMkJvYXJkID0gR2FtZWJvYXJkKCk7XG4gIGxldCBjdXJyZW50UGxheWVyID0gcGxheWVyMTtcbiAgc3RhcnRQbGFjZW1lbnRQaGFzZSgpO1xuICBjb25zdCBwMkRpc3BsYXlCb2FyZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwMicpO1xuICBwbGF5ZXIxLnBsYWNlU2hpcHMocDFCb2FyZClcbiAgcGxheWVyMi5wbGFjZVNoaXBzKHAyQm9hcmQsICdyYW5kb20nKTtcbiAgRGlzcGxheS5wMlVwZGF0ZUJvYXJkKHAyQm9hcmQpO1xuXG4gIGZ1bmN0aW9uIGlzR2FtZU92ZXIoKSB7XG4gICAgcmV0dXJuIHAyQm9hcmQuYWxsU2hpcHNTdW5rKCkgfHwgcDFCb2FyZC5hbGxTaGlwc1N1bmsoKTtcbiAgfVxuXG4gIHAyRGlzcGxheUJvYXJkLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICBpZiAocGxhY2VtZW50UGhhc2VPdmVyKCkgJiYgY3VycmVudFBsYXllciA9PT0gcGxheWVyMSAmJiAhaXNHYW1lT3ZlcigpKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBlLnRhcmdldC5kYXRhc2V0O1xuICAgICAgICBjb25zdCBjZWxsQXR0YWNrZWQgPSBwMkJvYXJkLnJlY2VpdmVBdHRhY2soZGF0YS5jb2x1bW4sIGRhdGEucm93KTtcbiAgICAgICAgRGlzcGxheS5wMlVwZGF0ZUJvYXJkKHAyQm9hcmQpO1xuICAgICAgICBEaXNwbGF5LnVwZGF0ZURpc3BsYXkocGxheWVyMSwgY2VsbEF0dGFja2VkLmNlbGwsIHBsYXllcjIsIHAyQm9hcmQsIGNlbGxBdHRhY2tlZC5zdW5rU2hpcCk7XG4gICAgICAgIGlmIChpc0dhbWVPdmVyKCkpIHJldHVybiBEaXNwbGF5LmdhbWVPdmVyKHBsYXllcjEpXG4gICAgICAgIGN1cnJlbnRQbGF5ZXIgPSBwbGF5ZXIyO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBjb25zdCBjaG9pY2UgPSBwbGF5ZXIyLnJhbmRvbUF0dGFjayhwMUJvYXJkKTtcbiAgICAgICAgY29uc3QgY29tcHV0ZXJBdHRhY2sgPSBwMUJvYXJkLnJlY2VpdmVBdHRhY2soY2hvaWNlWzBdLCBjaG9pY2VbMV0pO1xuICAgICAgICBEaXNwbGF5LnAxVXBkYXRlQm9hcmQocDFCb2FyZCk7XG4gICAgICAgIERpc3BsYXkudXBkYXRlRGlzcGxheShwbGF5ZXIyLCBjb21wdXRlckF0dGFjay5jZWxsLCBwbGF5ZXIxLCBwMUJvYXJkLCBjb21wdXRlckF0dGFjay5zdW5rU2hpcCk7XG4gICAgICAgIGlmIChpc0dhbWVPdmVyKCkpIHJldHVybiBEaXNwbGF5LmdhbWVPdmVyKHBsYXllcjIpO1xuICAgICAgICBjdXJyZW50UGxheWVyID0gcGxheWVyMTtcbiAgICB9LCA1MDApXG4gIH0pXG59XG5cbm1vZHVsZS5leHBvcnRzID0gR2FtZTtcbiIsImNvbnN0IHsgcm93LCBjb2x1bW4gfSA9IHJlcXVpcmUoJy4vY29udmVyc2lvbnMnKVxuXG5mdW5jdGlvbiBpc09jY3VwaWVkKGNlbGwpIHtcbiAgcmV0dXJuIHR5cGVvZiBjZWxsID09PSAnb2JqZWN0Jztcbn1cblxuY29uc3QgY2hlY2tDb2xsaXNpb25zID0gZnVuY3Rpb24gY2hlY2tGb3JTaGlwUGxhY2VtZW50Q29sbGlzaW9ucyhib2FyZCwgeCwgeSwgb3JpZW50YXRpb24sIHNoaXApIHtcbiAgY29uc3Qgc2hpcFNsb3QgPSBbXTtcbiAgbGV0IGNvbENoZWNrID0gY29sdW1uKHgpO1xuICBsZXQgcm93Q2hlY2sgPSByb3coeSk7XG5cbiAgaWYob3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8PSBzaGlwLmdldFNoaXBMZW5ndGgoKTsgaSsrKSB7XG4gICAgICBpZiAoY29sQ2hlY2sgPiA5IHx8IHJvd0NoZWNrID4gOSkgdGhyb3cgbmV3IEVycm9yKCdPdXQgb2YgYm91bmRzIScpXG4gICAgICBzaGlwU2xvdC5wdXNoKGJvYXJkW3Jvd0NoZWNrXVtjb2xDaGVja10pO1xuICAgICAgcm93Q2hlY2srKztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gc2hpcC5nZXRTaGlwTGVuZ3RoKCk7IGkrKykge1xuICAgICAgaWYgKGNvbENoZWNrID4gOSB8fCByb3dDaGVjayA+IDkpIHRocm93IG5ldyBFcnJvcignT3V0IG9mIGJvdW5kcyEnKVxuICAgICAgc2hpcFNsb3QucHVzaChib2FyZFtyb3dDaGVja11bY29sQ2hlY2tdKTtcbiAgICAgIGNvbENoZWNrKys7XG4gICAgfVxuICB9XG4gIFxuICBpZiAoc2hpcFNsb3QuZmluZChpc09jY3VwaWVkKSkgdGhyb3cgbmV3IEVycm9yKCdTaGlwIENvbGxpc2lvbiEnKTtcbiAgcmV0dXJuIEVycm9yO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgY2hlY2tDb2xsaXNpb25zLCBpc09jY3VwaWVkIH1cbiIsImNvbnN0IHsgaXNPY2N1cGllZCB9ID0gcmVxdWlyZSgnLi9oZWxwZXJzJyk7XG5jb25zdCB7IHBsYWNlQWxsU2hpcHMsIHBsYWNlUmFuZG9tU2hpcHMgfSA9IHJlcXVpcmUoJy4vc2hpcC1wbGFjZW1lbnQnKVxuY29uc3QgeyBjb2xzIH0gPSByZXF1aXJlKCcuL2NvbnZlcnNpb25zJyk7XG5cbmZ1bmN0aW9uIFBsYXllcihuYW1lLCBjb21wdXRlciA9IGZhbHNlKSB7XG4gICAgY29uc3QgZ2V0TmFtZSA9ICgpID0+IG5hbWU7XG4gICAgY29uc3QgZ2V0UG9zc2Vzc2l2ZSA9ICgpID0+IG5hbWUgPT09ICdZb3UnID8gJ1lvdXInIDogYCR7bmFtZX0nc2A7XG4gICAgY29uc3QgaXNDb21wdXRlciA9ICgpID0+IGNvbXB1dGVyID09PSB0cnVlO1xuXG4gICAgY29uc3QgcmFuZG9tQXR0YWNrID0gKGJvYXJkKSA9PiB7XG4gICAgICAgIGNvbnN0IG9wcEJvYXJkID0gYm9hcmQucmVhZEJvYXJkKCk7XG4gICAgICAgIGNvbnN0IGF0dGFja2FibGVDZWxscyA9IFtdO1xuICAgICAgICBvcHBCb2FyZC5mb3JFYWNoKG9wcFJvdyA9PiBvcHBSb3cuZm9yRWFjaCgoY2VsbCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGlmKGlzT2NjdXBpZWQoY2VsbCkgfHwgY2VsbCA9PT0gJyAnKSBhdHRhY2thYmxlQ2VsbHMucHVzaChbY29sc1tpbmRleF0sIG9wcEJvYXJkLmluZGV4T2Yob3BwUm93KSArIDFdKVxuICAgICAgICB9KSk7XG4gICAgICAgIGNvbnN0IGNob3NlbkNlbGwgPSBhdHRhY2thYmxlQ2VsbHNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYXR0YWNrYWJsZUNlbGxzLmxlbmd0aCldXG5cbiAgICAgICAgcmV0dXJuIGNob3NlbkNlbGw7XG4gICAgfTtcblxuICAgIGNvbnN0IHBsYWNlU2hpcHMgPSAoYm9hcmQsIHJhbmRvbSA9IGZhbHNlKSA9PiB7XG4gICAgICAgIGlmICghcmFuZG9tKSBwbGFjZUFsbFNoaXBzKGJvYXJkKTtcbiAgICAgICAgZWxzZSBwbGFjZVJhbmRvbVNoaXBzKGJvYXJkKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHsgZ2V0TmFtZSwgZ2V0UG9zc2Vzc2l2ZSwgaXNDb21wdXRlciwgcmFuZG9tQXR0YWNrLCBwbGFjZVNoaXBzIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQbGF5ZXJcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG4vKiBlc2xpbnQtZGlzYWJsZSBwcmVmZXItdGVtcGxhdGUgKi9cbmNvbnN0IFNoaXAgPSByZXF1aXJlKCcuL3NoaXAnKTtcbmNvbnN0IERpc3BsYXkgPSByZXF1aXJlKCcuL2Rpc3BsYXknKTtcbmNvbnN0IHsgY29scyB9ID0gcmVxdWlyZSgnLi9jb252ZXJzaW9ucycpO1xuXG5jb25zdCBhbGxTaGlwcyA9IFsnQ2FycmllcicsICdCYXR0bGVzaGlwJywgJ0NydWlzZXInLCAnU3VibWFyaW5lJywgJ0Rlc3Ryb3llciddO1xubGV0IHBsYWNlbWVudFBoYXNlID0gdHJ1ZTtcbmZ1bmN0aW9uIHN0YXJ0UGxhY2VtZW50UGhhc2UgKCkgeyBwbGFjZW1lbnRQaGFzZSA9IHRydWUgfVxuY29uc3QgcGxhY2VtZW50UGhhc2VPdmVyID0gKCkgPT4gIXBsYWNlbWVudFBoYXNlXG5cbmZ1bmN0aW9uIHBsYWNlQWxsU2hpcHMgKGJvYXJkKSB7XG4gIGNvbnN0IHNoaXBzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNoaXAnKVxuICBzaGlwcy5mb3JFYWNoKHNoaXAgPT4ge1xuICAgIHNoaXAub25tb3VzZWRvd24gPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgY29uc3Qgc2hpcENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zaGlwLWNvbnRhaW5lcicpO1xuICAgICAgbGV0IG9yaWVudGF0aW9uID0gJydcbiAgICAgIHNoaXAuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgc2hpcC5zdHlsZS56SW5kZXggPSAxMDtcbiAgXG4gICAgICBmdW5jdGlvbiBtb3ZlQXQocGFnZVgsIHBhZ2VZKSB7XG4gICAgICAgIHNoaXAuc3R5bGUubGVmdCA9IHBhZ2VYIC0gMjAgKyAncHgnO1xuICAgICAgICBzaGlwLnN0eWxlLnRvcCA9IHBhZ2VZIC0gc2hpcC5vZmZzZXRIZWlnaHQgLyAyICsgJ3B4JztcbiAgICAgIH1cbiAgXG4gICAgICBtb3ZlQXQoZXZlbnQucGFnZVgsIGV2ZW50LnBhZ2VZKTtcbiAgXG4gICAgICBmdW5jdGlvbiBvbk1vdXNlTW92ZShldmVudDIpIHtcbiAgICAgICAgbW92ZUF0KGV2ZW50Mi5wYWdlWCwgZXZlbnQyLnBhZ2VZKVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByb3RhdGVTaGlwKGV2ZW50Mykge1xuICAgICAgICBpZiAoZXZlbnQzLmtleSA9PT0gJ3InICYmIG9yaWVudGF0aW9uICE9PSAndmVydGljYWwnKSB7XG4gICAgICAgICAgb3JpZW50YXRpb24gPSAndmVydGljYWwnO1xuICAgICAgICAgIHNoaXAuY2xhc3NMaXN0LmFkZCgncm90YXRlZCcpXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgb3JpZW50YXRpb24gPSAnJztcbiAgICAgICAgICBzaGlwLmNsYXNzTGlzdC5yZW1vdmUoJ3JvdGF0ZWQnKVxuICAgICAgICB9XG4gICAgICB9XG4gIFxuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Nb3VzZU1vdmUpO1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCByb3RhdGVTaGlwKVxuICBcbiAgICAgIHNoaXAub25tb3VzZXVwID0gKGV2ZW50NCkgPT4ge1xuICAgICAgICBzaGlwLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgY29uc3QgZWxlbUJlbG93ID0gZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludChldmVudDQuY2xpZW50WCwgZXZlbnQ0LmNsaWVudFkpO1xuICAgICAgICBzaGlwLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Nb3VzZU1vdmUpO1xuICAgICAgICBpZighZWxlbUJlbG93LmNsYXNzTGlzdC5jb250YWlucygnZHJvcHBhYmxlJykpIHtcbiAgICAgICAgICBzaGlwLnN0eWxlLnBvc2l0aW9uID0gJ3N0YXRpYyc7XG4gICAgICAgICAgc2hpcC5jbGFzc0xpc3QucmVtb3ZlKCdyb3RhdGVkJyk7XG4gICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCByb3RhdGVTaGlwKTtcbiAgICAgICAgICByZXR1cm4gICAgICBcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwbGFjZWRTaGlwID0gYm9hcmQucGxhY2VTaGlwKFNoaXAoc2hpcC5pZCksIGVsZW1CZWxvdy5kYXRhc2V0LmNvbHVtbiwgZWxlbUJlbG93LmRhdGFzZXQucm93LCBvcmllbnRhdGlvbik7XG4gICAgICAgIGlmIChwbGFjZWRTaGlwID09PSB0cnVlKSB7XG4gICAgICAgICAgRGlzcGxheS5wMVVwZGF0ZUJvYXJkKGJvYXJkKTtcbiAgICAgICAgICBzaGlwQ29udGFpbmVyLnJlbW92ZUNoaWxkKHNoaXApO1xuICAgICAgICAgIERpc3BsYXkudXBkYXRlTWFycXVlZSgnUGxhY2UgeW91ciBzaGlwcyBieSBkcmFnZ2luZyB0aGVtIG9udG8geW91ciBib2FyZCAocHJlc3MgUiB0byByb3RhdGUpLicsIDIwKVxuICAgICAgICAgIGlmICghc2hpcENvbnRhaW5lci5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICAgICAgICAgIHBsYWNlbWVudFBoYXNlID0gZmFsc2U7XG4gICAgICAgICAgICBEaXNwbGF5LnVwZGF0ZU1hcnF1ZWUoXCJZb3UncmUgdXAsIEFkbWlyYWwhIENob29zZSBhIGNlbGwgb24geW91ciBvcHBvbmVudCdzIGJvYXJkIHRvIGF0dGFjay5cIiwgMjApXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICBzaGlwLnN0eWxlLnBvc2l0aW9uID0gJ3N0YXRpYyc7XG4gICAgICAgIHNoaXAuY2xhc3NMaXN0LnJlbW92ZSgncm90YXRlZCcpO1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHJvdGF0ZVNoaXApXG4gICAgICAgIERpc3BsYXkudXBkYXRlTWFycXVlZShwbGFjZWRTaGlwLCAyNCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBwbGFjZVJhbmRvbVNoaXBzIChib2FyZCwgaW5kZXggPSAwKSB7XG4gIGlmIChpbmRleCA+PSBhbGxTaGlwcy5sZW5ndGgpIHJldHVybjtcbiAgY29uc3Qgb3JpZW50YXRpb24gPSBbJ2hvcml6b25hbCcsICd2ZXJ0aWNhbCddW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIpXTtcbiAgY29uc3QgY29sID0gY29sc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCldO1xuICBjb25zdCByb3cgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCkgKyAxO1xuICBjb25zdCBwbGFjZWRTaGlwID0gYm9hcmQucGxhY2VTaGlwKFNoaXAoYWxsU2hpcHNbaW5kZXhdKSwgY29sLCByb3csIG9yaWVudGF0aW9uKTtcbiAgaWYgKHBsYWNlZFNoaXAgPT09IHRydWUpIHBsYWNlUmFuZG9tU2hpcHMoYm9hcmQsICsraW5kZXgpO1xuICBlbHNlIHBsYWNlUmFuZG9tU2hpcHMoYm9hcmQsIGluZGV4KVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgcGxhY2VBbGxTaGlwcywgcGxhY2VSYW5kb21TaGlwcywgc3RhcnRQbGFjZW1lbnRQaGFzZSwgcGxhY2VtZW50UGhhc2VPdmVyIH07IiwiY29uc3QgU2hpcCA9IChuYW1lKSA9PiB7XG4gIGxldCBzaGlwTGVuZ3RoO1xuXG4gIHN3aXRjaCAobmFtZSkge1xuICAgIGNhc2UgKCdDYXJyaWVyJyk6XG4gICAgICBzaGlwTGVuZ3RoID0gNTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgKCdCYXR0bGVzaGlwJyk6XG4gICAgICBzaGlwTGVuZ3RoID0gNDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgKCdDcnVpc2VyJyk6XG4gICAgY2FzZSAoJ1N1Ym1hcmluZScpOlxuICAgICAgc2hpcExlbmd0aCA9IDM7XG4gICAgICBicmVhaztcbiAgICBjYXNlICgnRGVzdHJveWVyJyk6XG4gICAgICBzaGlwTGVuZ3RoID0gMjtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IgKCdVbmV4cGVjdGVkIHNoaXAgbmFtZS4nKVxuICB9XG5cbiAgbGV0IGhpdHMgPSAwO1xuICBjb25zdCByZWFkSGl0cyA9ICgpID0+IGhpdHM7XG4gIGNvbnN0IGdldFNoaXBMZW5ndGggPSAoKSA9PiBzaGlwTGVuZ3RoO1xuICBjb25zdCBpc1N1bmsgPSAoKSA9PiBoaXRzID09PSBzaGlwTGVuZ3RoO1xuICBjb25zdCBoaXQgPSAoKSA9PiB7IFxuICAgIGlmICghaXNTdW5rKCkpIGhpdHMgKz0gMTtcbiAgfVxuXG4gIHJldHVybiB7IG5hbWUsIHJlYWRIaXRzLCBnZXRTaGlwTGVuZ3RoLCBoaXQsIGlzU3VuayB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2hpcDtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZXMuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZXMuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0ICcuL3N0eWxlcy5jc3MnO1xuXG5jb25zdCBEaXNwbGF5ID0gcmVxdWlyZSgnLi9kaXNwbGF5Jyk7XG5jb25zdCBHYW1lID0gcmVxdWlyZSgnLi9nYW1lcGxheScpO1xuXG5jb25zdCBzdGFydEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2J1dHRvbiNzdGFydCcpXG5cbkRpc3BsYXkucmVuZGVyQm9hcmRzKCk7XG5cbnN0YXJ0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgR2FtZSkiXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJjb2xzIiwicm93Iiwicm93Q29vcmQiLCJjb2x1bW4iLCJjb2x1bW5Db29yZCIsImluZGV4T2YiLCJpc09jY3VwaWVkIiwiR2FtZWJvYXJkIiwiY3JlYXRlRE9NRWxlbWVudCIsImNsYXNzZXMiLCJuZXdFbGVtZW50IiwiZm9yRWFjaCIsInZhbHVlIiwiY2xhc3NMaXN0IiwiYWRkIiwicmVuZGVyQm9hcmQiLCJib2FyZCIsInJlYWRCb2FyZCIsImRvbUJvYXJkIiwibmV3Q2VsbCIsImJvYXJkUm93IiwiY2VsbCIsImRhdGFzZXQiLCJyZW5kZXJDZWxscyIsImdhbWVib2FyZCIsInNob3dTaGlwcyIsImxhc3RDaGlsZCIsImJhY2tncm91bmRDb2xvciIsIm5ld01hcmtlciIsImFkZFRvTG9nIiwicGxheWVyIiwib3Bwb25lbnQiLCJvcHBCb2FyZCIsInNoaXBTdW5rIiwiZG9tTG9nIiwiYXR0YWNrZWRDZWxsIiwibmV3TGluZSIsInRleHRDb250ZW50IiwiZ2V0TmFtZSIsInNwYW4iLCJjb2xvciIsInN1bmtMaW5lIiwiZ2V0UG9zc2Vzc2l2ZSIsInNldFRpbWVvdXQiLCJjaGFuZ2VNYXJxdWVlIiwiZG9tTm9kZSIsInNpemUiLCJtZXNzYWdlIiwibm9kZSIsImluY2x1ZGVzIiwiZm9udFNpemUiLCJjcmVhdGVTaGlwIiwibmV3U2hpcCIsImN1cnNvciIsImRpc3BsYXkiLCJuIiwic3Vic3RyaW5nIiwidG9VcHBlckNhc2UiLCJtYXJxdWVlIiwicDFDb250YWluZXIiLCJnZXRFbGVtZW50QnlJZCIsInAyQ29udGFpbmVyIiwicDFIZWFkZXIiLCJwMkhlYWRlciIsImdhbWVsb2ciLCJzaGlwQ29udGFpbmVyIiwicDFCb2FyZCIsInAyQm9hcmQiLCJEaXNwbGF5IiwicmVuZGVyQm9hcmRzIiwiY29udGFpbnMiLCJzdGFydEdhbWUiLCJyZW5kZXJTaGlwcyIsInNoaXBzIiwic2hpcCIsInAxVXBkYXRlQm9hcmQiLCJwMlVwZGF0ZUJvYXJkIiwidXBkYXRlRGlzcGxheSIsInVwZGF0ZU1hcnF1ZWUiLCJ0ZXh0IiwiZ2FtZU92ZXIiLCJ3aW5uZXIiLCJjaGVja0NvbGxpc2lvbnMiLCJuZXdSb3ciLCJqIiwiYWxsU2hpcHMiLCJyZWNlaXZlQXR0YWNrIiwieCIsInkiLCJzdW5rU2hpcCIsImhpdCIsImlzU3VuayIsIm5hbWUiLCJwbGFjZVNoaXAiLCJzaGlwT2JqIiwib3JpZW50YXRpb24iLCJjb2xJbmRleCIsInJvd0luZGV4IiwiZXJyb3IiLCJnZXRTaGlwTGVuZ3RoIiwiYWxsU2hpcHNTdW5rIiwiZmlsdGVyIiwiZ2V0QWxsU2hpcHMiLCJQbGF5ZXIiLCJzdGFydFBsYWNlbWVudFBoYXNlIiwicGxhY2VtZW50UGhhc2VPdmVyIiwicGxheWVyMSIsInBsYXllcjIiLCJjdXJyZW50UGxheWVyIiwicDJEaXNwbGF5Qm9hcmQiLCJpc0dhbWVPdmVyIiwicGxhY2VTaGlwcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJjZWxsQXR0YWNrZWQiLCJjaG9pY2UiLCJyYW5kb21BdHRhY2siLCJjb21wdXRlckF0dGFjayIsInNoaXBTbG90IiwiY29sQ2hlY2siLCJyb3dDaGVjayIsImZpbmQiLCJwbGFjZUFsbFNoaXBzIiwicGxhY2VSYW5kb21TaGlwcyIsImNvbXB1dGVyIiwiaXNDb21wdXRlciIsImF0dGFja2FibGVDZWxscyIsIm9wcFJvdyIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsIlNoaXAiLCJwbGFjZW1lbnRQaGFzZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJvbm1vdXNlZG93biIsImV2ZW50IiwibW92ZUF0IiwicGFnZVgiLCJwYWdlWSIsImxlZnQiLCJ0b3AiLCJvZmZzZXRIZWlnaHQiLCJvbk1vdXNlTW92ZSIsImV2ZW50MiIsInJvdGF0ZVNoaXAiLCJldmVudDMiLCJrZXkiLCJwb3NpdGlvbiIsInpJbmRleCIsIm9ubW91c2V1cCIsImV2ZW50NCIsImVsZW1CZWxvdyIsImVsZW1lbnRGcm9tUG9pbnQiLCJjbGllbnRYIiwiY2xpZW50WSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJwbGFjZWRTaGlwIiwiaGFzQ2hpbGROb2RlcyIsImNvbCIsInNoaXBMZW5ndGgiLCJoaXRzIiwicmVhZEhpdHMiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwibmMiLCJsb2NhbHMiLCJHYW1lIiwic3RhcnRCdXR0b24iXSwic291cmNlUm9vdCI6IiJ9