(()=>{var n={365:(n,e,t)=>{"use strict";t.d(e,{A:()=>s});var o=t(354),r=t.n(o),a=t(314),i=t.n(a)()(r());i.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Anton&family=Notable&display=swap);"]),i.push([n.id,"* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box\n}\n\n:root {\n    background: #222;\n    font-size: 18px;\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n}\n\n.container {\n    background: linear-gradient(178deg, hsl(46, 50%, 75%), hsl(36, 44%, 64%) 12%, hsl(36, 40%, 43%) 108%);\n    background-repeat: no-repeat;\n    margin: 0 auto;\n    min-height: 100vh;\n    width: clamp(430px, 95%, 1280px);\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 0.6rem;\n}\n\nh1 {\n  font-size: 3rem;\n  font-family: \"Notable\";\n  background: transparent;\n  background-image: linear-gradient(178deg, rgb(0, 0, 100) 40%, #333);\n  -webkit-background-clip: text;\n  background-clip: text;\n  -webkit-text-fill-color: transparent;\n  letter-spacing: 0.25rem;\n  text-align: center;\n}\n\n.marquee {\n    padding: 0.5rem;\n    color: #333;\n    background: #fefefe;\n    text-align: center;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 0.25rem;\n    box-shadow: inset 2px 2px 4px #888,\n                inset -1px -1px 3px lightgray;\n    width: 400px;\n    height: 4rem;\n    font-size: 1.2rem;\n}\n\n.button#start {\n    padding: 8px 14px;\n    border-radius: 24px;\n    box-shadow: 2px 2px 4px #777;\n    font-size: 0.9rem;\n    font-weight: bold;\n    background-color: hsl(120, 70%, 80%);\n    border: 1px solid #555;\n}\n\n.button#start:hover {\n  cursor: pointer;  \n  transform: translate(1px, 1px); \n  box-shadow: 1px 1px 2px #777;\n}\n\n.button#start:active {\n    box-shadow: 0px 0px 1px #888;\n    transform: translateX(2px) translateY(2px); \n  }\n\n.ships-container {\n    width: min(500px, 98%);\n    justify-content: center;\n    align-items: center;\n    flex-wrap: wrap;\n    gap: 0.6rem;\n}\n\n.randomize {\n    width: min-content;\n    height: 2rem;\n    padding: 0.25rem;\n    background-color: #eee;\n    font-size: 1rem;\n    border: 1px solid #555;\n    border-radius: 10px;\n    box-shadow: 1px 1px 2px #555;\n}\n\n.randomize:hover {\n    cursor: pointer;\n    background-color: hsl(290, 90%, 90%);\n    transform: translate(1px, 1px);\n    box-shadow: 0 0 1px #555;\n}\n\n.rotated {\n    transform-origin: 20px 20px;\n    transform: rotate(90deg);\n}\n\n.boards-container {\n    width: min(98%, 920px);\n    display: grid;\n    grid-template-columns: repeat(auto-fit, 412px);\n    justify-content: center;\n    gap: 0.8rem;\n    padding: 0.25rem 0.75rem;\n}\n\n#p2 .cell:hover {\n    background-color: rgba(20, 20, 20, 0.05);\n    cursor: pointer;\n}\n\n.board-container {\n    border: 6px solid #222;\n    border-radius: 6px;\n    box-shadow: 1px 2px 4px #888;\n    letter-spacing: 0.025rem;\n    background-color: skyblue\n}\n\n.board-header {\n    height: 40px;\n    background: #ddd;\n    padding: 4px;\n    font-size: 1.3rem;\n    font-weight: bold;\n    border-bottom: 3px solid black;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.board {\n    position: relative;\n    background: inherit;\n    height: min-content;\n    display: flex;\n    flex-wrap: wrap;\n}\n\n.cell {\n    height: 40px;\n    width: 40px;\n    outline: 1px dotted black;\n    border-radius: 8px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.ship > .cell {\n    background-color: #888;;\n    color: #fefefe;\n    font-weight: bold;\n    outline: 1px solid #444;\n    box-shadow: 1px 2px 3px #555;\n}\n\n.ship:hover > .cell {\n    box-shadow: 2px 4px 4px #444;\n    opacity: 0.9;\n}\n\n.marker {\n    width: 50%;\n    height: 50%;\n    border-radius: 50%;\n    box-shadow: 0px 1px 4px #333;\n}\n\n.start-text {\n    position: absolute;\n    left: 47%;\n    top: 18%;\n    font-size: 0.18rem;\n    font-family: 'Anton';\n    opacity: 0.9;\n    letter-spacing: 0rem;\n    color: rgb(255, 245, 30);\n}\n\n.win-text {\n    position: absolute;\n    left: 48%;\n    top: 44%;\n    font-size: 6px;\n    font-family: 'Anton';\n    opacity: 0.9;\n    color: hsl(110, 97%, 70%);  \n}\n\n.sunken {\n    position: absolute;\n    left: 31%;\n    top: 50%;\n    font-size: 36px;\n    font-family: 'Anton';\n    opacity: 0.95;\n    color: orangered;\n}\n\n.enlarge {\n    scale: 18;\n    transition: scale 800ms cubic-bezier(0.8, 0, 1, 0.3) 100ms;\n}\n\n.enlarge-fade {\n    opacity: 0;\n    scale: 14;\n    transition: scale 800ms ease-in-out 50ms,\n                opacity 1000ms 1400ms;\n}\n\n.upshift-fade {\n    opacity: 0;\n    transform: translateY(-150px);\n    scale: 1.2;\n    transition: transform 400ms ease-in-out 0ms,\n                scale 200ms 50ms,\n                opacity 200ms 400ms;\n}\n\n.log-container {\n    background: #111;\n    width: min(98%, 520px);\n    height: 196px;\n    border: 2px solid #eee;\n    border-radius: 4px;\n    box-shadow: 1px 1px 4px #888;\n    letter-spacing: 0.025rem;\n    margin-bottom: 0.25rem;\n    display: grid;\n    grid-template-rows: min-content 1fr;\n}\n\n.log-header {\n    color: #fefefe;\n    font-family: monospace;\n    text-align: center;\n    padding: 0.1rem;\n    border-bottom: 1px solid #eee;\n}\n\n.log {\n    color: hsl(310, 100%, 88%);\n    font-size: 0.85rem;\n    padding: 3px 5px;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    overflow: hidden;\n    letter-spacing: 0.12rem;\n}\n\n.log-span {\n  font-weight: bold;\n}\n\n.log-line-sunk {\n  font-style: italic;\n  color: yellow;\n  font-weight: bold;\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"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",sourcesContent:["* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box\n}\n\n:root {\n    background: #222;\n    font-size: 18px;\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n}\n\n@import url('https://fonts.googleapis.com/css2?family=Anton&family=Notable&display=swap');\n\n.container {\n    background: linear-gradient(178deg, hsl(46, 50%, 75%), hsl(36, 44%, 64%) 12%, hsl(36, 40%, 43%) 108%);\n    background-repeat: no-repeat;\n    margin: 0 auto;\n    min-height: 100vh;\n    width: clamp(430px, 95%, 1280px);\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 0.6rem;\n}\n\nh1 {\n  font-size: 3rem;\n  font-family: \"Notable\";\n  background: transparent;\n  background-image: linear-gradient(178deg, rgb(0, 0, 100) 40%, #333);\n  -webkit-background-clip: text;\n  background-clip: text;\n  -webkit-text-fill-color: transparent;\n  letter-spacing: 0.25rem;\n  text-align: center;\n}\n\n.marquee {\n    padding: 0.5rem;\n    color: #333;\n    background: #fefefe;\n    text-align: center;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 0.25rem;\n    box-shadow: inset 2px 2px 4px #888,\n                inset -1px -1px 3px lightgray;\n    width: 400px;\n    height: 4rem;\n    font-size: 1.2rem;\n}\n\n.button#start {\n    padding: 8px 14px;\n    border-radius: 24px;\n    box-shadow: 2px 2px 4px #777;\n    font-size: 0.9rem;\n    font-weight: bold;\n    background-color: hsl(120, 70%, 80%);\n    border: 1px solid #555;\n}\n\n.button#start:hover {\n  cursor: pointer;  \n  transform: translate(1px, 1px); \n  box-shadow: 1px 1px 2px #777;\n}\n\n.button#start:active {\n    box-shadow: 0px 0px 1px #888;\n    transform: translateX(2px) translateY(2px); \n  }\n\n.ships-container {\n    width: min(500px, 98%);\n    justify-content: center;\n    align-items: center;\n    flex-wrap: wrap;\n    gap: 0.6rem;\n}\n\n.randomize {\n    width: min-content;\n    height: 2rem;\n    padding: 0.25rem;\n    background-color: #eee;\n    font-size: 1rem;\n    border: 1px solid #555;\n    border-radius: 10px;\n    box-shadow: 1px 1px 2px #555;\n}\n\n.randomize:hover {\n    cursor: pointer;\n    background-color: hsl(290, 90%, 90%);\n    transform: translate(1px, 1px);\n    box-shadow: 0 0 1px #555;\n}\n\n.rotated {\n    transform-origin: 20px 20px;\n    transform: rotate(90deg);\n}\n\n.boards-container {\n    width: min(98%, 920px);\n    display: grid;\n    grid-template-columns: repeat(auto-fit, 412px);\n    justify-content: center;\n    gap: 0.8rem;\n    padding: 0.25rem 0.75rem;\n}\n\n#p2 .cell:hover {\n    background-color: rgba(20, 20, 20, 0.05);\n    cursor: pointer;\n}\n\n.board-container {\n    border: 6px solid #222;\n    border-radius: 6px;\n    box-shadow: 1px 2px 4px #888;\n    letter-spacing: 0.025rem;\n    background-color: skyblue\n}\n\n.board-header {\n    height: 40px;\n    background: #ddd;\n    padding: 4px;\n    font-size: 1.3rem;\n    font-weight: bold;\n    border-bottom: 3px solid black;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.board {\n    position: relative;\n    background: inherit;\n    height: min-content;\n    display: flex;\n    flex-wrap: wrap;\n}\n\n.cell {\n    height: 40px;\n    width: 40px;\n    outline: 1px dotted black;\n    border-radius: 8px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.ship > .cell {\n    background-color: #888;;\n    color: #fefefe;\n    font-weight: bold;\n    outline: 1px solid #444;\n    box-shadow: 1px 2px 3px #555;\n}\n\n.ship:hover > .cell {\n    box-shadow: 2px 4px 4px #444;\n    opacity: 0.9;\n}\n\n.marker {\n    width: 50%;\n    height: 50%;\n    border-radius: 50%;\n    box-shadow: 0px 1px 4px #333;\n}\n\n.start-text {\n    position: absolute;\n    left: 47%;\n    top: 18%;\n    font-size: 0.18rem;\n    font-family: 'Anton';\n    opacity: 0.9;\n    letter-spacing: 0rem;\n    color: rgb(255, 245, 30);\n}\n\n.win-text {\n    position: absolute;\n    left: 48%;\n    top: 44%;\n    font-size: 6px;\n    font-family: 'Anton';\n    opacity: 0.9;\n    color: hsl(110, 97%, 70%);  \n}\n\n.sunken {\n    position: absolute;\n    left: 31%;\n    top: 50%;\n    font-size: 36px;\n    font-family: 'Anton';\n    opacity: 0.95;\n    color: orangered;\n}\n\n.enlarge {\n    scale: 18;\n    transition: scale 800ms cubic-bezier(0.8, 0, 1, 0.3) 100ms;\n}\n\n.enlarge-fade {\n    opacity: 0;\n    scale: 14;\n    transition: scale 800ms ease-in-out 50ms,\n                opacity 1000ms 1400ms;\n}\n\n.upshift-fade {\n    opacity: 0;\n    transform: translateY(-150px);\n    scale: 1.2;\n    transition: transform 400ms ease-in-out 0ms,\n                scale 200ms 50ms,\n                opacity 200ms 400ms;\n}\n\n.log-container {\n    background: #111;\n    width: min(98%, 520px);\n    height: 196px;\n    border: 2px solid #eee;\n    border-radius: 4px;\n    box-shadow: 1px 1px 4px #888;\n    letter-spacing: 0.025rem;\n    margin-bottom: 0.25rem;\n    display: grid;\n    grid-template-rows: min-content 1fr;\n}\n\n.log-header {\n    color: #fefefe;\n    font-family: monospace;\n    text-align: center;\n    padding: 0.1rem;\n    border-bottom: 1px solid #eee;\n}\n\n.log {\n    color: hsl(310, 100%, 88%);\n    font-size: 0.85rem;\n    padding: 3px 5px;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    overflow: hidden;\n    letter-spacing: 0.12rem;\n}\n\n.log-span {\n  font-weight: bold;\n}\n\n.log-line-sunk {\n  font-style: italic;\n  color: yellow;\n  font-weight: bold;\n}"],sourceRoot:""}]);const s=i},314:n=>{"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var A=this[s][0];null!=A&&(i[A]=!0)}for(var l=0;l<n.length;l++){var c=[].concat(n[l]);o&&i[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),r&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=r):c[4]="".concat(r)),e.push(c))}},e}},354:n=>{"use strict";n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},72:n=>{"use strict";var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var a={},i=[],s=0;s<n.length;s++){var A=n[s],l=o.base?A[0]+o.base:A[0],c=a[l]||0,d="".concat(l," ").concat(c);a[l]=c+1;var p=t(d),u={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var m=r(u,o);o.byIndex=s,e.splice(s,0,{identifier:d,updater:m,references:1})}i.push(d)}return i}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var a=o(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var A=o(n,r),l=0;l<a.length;l++){var c=t(a[l]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}a=A}}},659:n=>{"use strict";var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},540:n=>{"use strict";n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,t)=>{"use strict";n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},825:n=>{"use strict";n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{"use strict";n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},785:n=>{const e=["A","B","C","D","E","F","G","H","I","J"];n.exports={row:n=>{if(n>10||n<1)throw new Error("Out of bounds!");return n-1},column:n=>{const t=e.indexOf(n);if(t>9||t<0)throw new Error("Out of bounds!");return t},cols:e}},414:(n,e,t)=>{const{isOccupied:o}=t(89),{cols:r,row:a,column:i}=t(785),s=t(906);function A(n,e,t){const o=document.createElement(n);return e&&e.forEach((n=>o.classList.add(n))),t&&o.setAttribute("id",t),o}n.exports={createDOMElement:A,renderBoard:n=>{const e=s().readBoard(),t=A("div",["board"],n);let o;return e.forEach((a=>a.forEach(((i,s)=>{o=A("div","p1"===n?["cell","droppable"]:["cell"]),o.dataset.column=r[s],o.dataset.row=e.indexOf(a)+1,t.appendChild(o)})))),t},renderCells:(n,e,t=!0)=>{const a=n.readBoard();let i;for(;e.firstChild;)e.removeChild(e.lastChild);a.forEach((n=>n.forEach(((s,l)=>{if(i="p2"===e.id?A("div",["cell"]):A("div",["cell","droppable"]),i.dataset.column=r[l],i.dataset.row=a.indexOf(n)+1,o(s)&&t&&(i.style.backgroundColor="#888"),"X"===s){const e=A("div",["marker"]);e.dataset.column=r[l],e.dataset.row=a.indexOf(n)+1,e.style.backgroundColor="rgb(255, 60, 20)",i.appendChild(e)}if("O"===s){const e=A("div",["marker"]);e.dataset.column=r[l],e.dataset.row=a.indexOf(n)+1,e.style.backgroundColor="#eee",i.appendChild(e)}e.appendChild(i)}))))},addToLog:(n,e,t,o,r,s)=>{const l=o.readBoard()[a(e[1])][i(e[0])],c=A("p",["log-line"]);c.textContent=`${n.getName()} attacked ${e.join(", ")} ... it's a `;const d=A("span",["log-span"]);if("X"===l?(d.textContent="HIT!",d.style.color="rgb(255, 60, 20)"):"O"===l&&(d.textContent="MISS!",d.style.color="#eee"),c.appendChild(d),s.appendChild(c),r){const n=A("p",["log-line-sunk"]);n.textContent=`${t.getPossessive()} ${r} has been SUNK!`,setTimeout((()=>{s.appendChild(n)}),150)}},changeMarquee:(n,e,t,o)=>{const r=n.toString(),a=e;return r.includes("Error")?a.textContent=r+" Try again":a.textContent=r,a.style.backgroundColor=o,a.style.fontSize=`${t}px`,a},createShip:function(n,e){const t=A("div",["ship-container"],`${n}-container`);t.style.height="42px",t.style.width=40*e+"px";const o=A("div",["ship"],n);o.style.cursor="grab",o.style.display="flex";let r=0;for(;e>0;){const t=A("div",["cell"]);r<3&&(t.textContent=n.toString().substring(r,r+1).toUpperCase()),o.appendChild(t),e--,r++}return t.appendChild(o),t}}},34:(n,e,t)=>{const{renderBoard:o,renderCells:r,addToLog:a,changeMarquee:i,createShip:s,createDOMElement:A}=t(414),{delay:l}=t(89),c=document.querySelector(".marquee"),d=document.getElementById("p1Container"),p=document.getElementById("p2Container"),u=document.getElementById("p1Header"),m=document.getElementById("p2Header"),f=document.querySelector(".log"),B=document.querySelector(".ships-container");let h,C;const g={renderBoards(){for(;d.contains(document.getElementById("p1"));)d.removeChild(document.getElementById("p1"));for(d.appendChild(o("p1"));p.contains(document.getElementById("p2"));)p.removeChild(document.getElementById("p2"));p.appendChild(o("p2")),u.textContent="You",m.textContent="Computer",f.textContent="",h=document.getElementById("p1"),C=document.getElementById("p2")},startGame(){this.renderBoards(),this.renderShips(),this.updateMarquee("Place your ships by dragging them onto your board (press R to rotate).",20)},playGame(){const n=A("p",["start-text"]);n.textContent="Enemy ships sighted!",C.appendChild(n),setTimeout((()=>{n.classList.add("enlarge-fade"),setTimeout((()=>{n.style.display="none"}),2200)}),0)},renderShips(){const n=[s("Carrier",5),s("Battleship",4),s("Cruiser",3),s("Submarine",3),s("Destroyer",2)];for(;B.firstChild;)B.removeChild(B.lastChild);B.style.display="flex",n.forEach((n=>B.appendChild(n)));const e=A("button",["randomize"]);e.textContent="Random",B.appendChild(e)},p1UpdateBoard(n){r(n,h)},p2UpdateBoard(n){r(n,C)},updateDisplay(n,e,t,o,r,a){if(r){console.log("sunk?: "+r);const n=A("p",["sunken"]);n.textContent="Ship SUNK!",a.appendChild(n),console.log(n.classList+" created"),l(0).then((()=>{console.log("fading"),n.classList.add("upshift-fade")})),l(600).then((()=>{console.log("removing"),n.style.display="none"}))}this.updateMarquee(`${t.getPossessive()} turn`,28),this.updateLog(n,e,t,o,r)},updateMarquee(n,e,t){t||(t="#fefefe"),i(n,c,e,t)},updateLog(n,e,t,o,r){a(n,e,t,o,r,f)},gameOver(n,e){let t;t=n.isComputer()?"rgb(255, 140, 140)":"rgb(180, 235, 180",this.updateMarquee(`Winner: ${n.getName()}`,30,t);const o=A("p",["win-text"]);o.textContent="WINNER",e.appendChild(o),l(0).then((()=>{o.classList.add("enlarge")}))}};n.exports=g},906:(n,e,t)=>{const{row:o,column:r}=t(785),{checkCollisions:a,isOccupied:i}=t(89);n.exports=()=>{const n=[];!function(){for(let e=0;e<10;e++){const e=[];for(let n=0;n<10;n++)e.push(" ");n.push(e)}}();const e=[];return{readBoard:()=>n,receiveAttack:function(e,t){let a=null;const s=n[o(t)][r(e)];if("X"===s||"O"===s)throw new Error("Cell already hit!");return i(s)?(s.hit(),s.isSunk()&&(a=s.name),n[o(t)][r(e)]="X"):n[o(t)][r(e)]="O",{cell:[e,t],sunkShip:a}},placeShip:function(t,i,s,A){if(e.length>4)throw new Error("Ship limit exceeded.");let l=r(i),c=o(s);try{a(n,i,s,A,t)}catch(n){return n}if(e.push(t),"vertical"===A)for(let e=1;e<=t.getShipLength();e++)n[c][l]=t,c++;else for(let e=1;e<=t.getShipLength();e++)n[c][l]=t,l++;return!0},allShipsSunk:function(){return!(e.length<5)&&5===e.filter((n=>n.isSunk())).length},getAllShips:()=>e}}},138:(n,e,t)=>{const o=t(211),{startPlacementPhase:r,placementPhaseOver:a}=t(742),i=t(34),s=t(906),{delay:A}=t(89);n.exports=function(){i.startGame();const n=o("You"),e=o("Computer",!0),t=s(),l=s();let c=n;r();const d=document.getElementById("p1"),p=document.getElementById("p2");function u(){return l.allShipsSunk()||t.allShipsSunk()}n.placeShips(t),e.placeShips(l,"random"),i.p2UpdateBoard(l),p.addEventListener("click",(async o=>{if(!a()||c!==n||u())return null;{const t=o.target.dataset,r=l.receiveAttack(t.column,t.row);if(i.p2UpdateBoard(l),i.updateDisplay(n,r.cell,e,l,r.sunkShip,p),u())return i.gameOver(n,d);c=e}let r=null;const s=A(400).then((()=>{const n=e.randomAttack(t);r=t.receiveAttack(n[0],n[1])}));await s,i.p1UpdateBoard(t),i.updateDisplay(e,r.cell,n,t,r.sunkShip,d),A(600).then((()=>{console.log("checking and switching"),u()?c=n:A(600).then((()=>i.gameOver(e,p)))}))}))}},89:(n,e,t)=>{const{row:o,column:r}=t(785);function a(n){return"object"==typeof n}n.exports={checkCollisions:function(n,e,t,i,s){const A=[];let l=r(e),c=o(t);if("vertical"===i)for(let e=1;e<=s.getShipLength();e++){if(l>9||c>9)throw new Error("Out of bounds!");A.push(n[c][l]),c++}else for(let e=1;e<=s.getShipLength();e++){if(l>9||c>9)throw new Error("Out of bounds!");A.push(n[c][l]),l++}if(A.find(a))throw new Error("Ship Collision!");return Error},isOccupied:a,delay:function(n){return new Promise((e=>{setTimeout(e,n)}))}}},211:(n,e,t)=>{const{isOccupied:o}=t(89),{placeAllShips:r,placeRandomShips:a}=t(742),{cols:i}=t(785);n.exports=function(n,e=!1){return{getName:()=>n,getPossessive:()=>"You"===n?"Your":`${n}'s`,isComputer:()=>!0===e,randomAttack:n=>{const e=n.readBoard(),t=[];return e.forEach((n=>n.forEach(((r,a)=>{(o(r)||" "===r)&&t.push([i[a],e.indexOf(n)+1])})))),t[Math.floor(Math.random()*t.length)]},placeShips:(n,e=!1)=>{e?a(n):r(n)}}}},742:(n,e,t)=>{const o=t(432),r=t(34),{cols:a}=t(785),i=["Carrier","Battleship","Cruiser","Submarine","Destroyer"];let s=!0;function A(n,e=0){if(e>=i.length)return;const t=["horizonal","vertical"][Math.floor(2*Math.random())],r=a[Math.floor(10*Math.random())],s=Math.floor(10*Math.random())+1,l=n.placeShip(o(i[e]),r,s,t);A(n,!0===l?++e:e)}n.exports={placeAllShips:function(n){const e=document.querySelector(".randomize"),t=document.querySelector(".ships-container"),a=document.querySelectorAll(".ship"),l=[];function c(){t.style.display="none",s=!1,r.updateMarquee("You're up, Admiral! Choose a cell on your opponent's board to attack.",20),r.playGame()}e.addEventListener("click",(()=>{A(n,l.length),r.p1UpdateBoard(n),c()})),a.forEach((e=>{function t(){e.style.transform="translate(-1px, -2px)"}e.onmouseover=t,e.onmouseout=()=>e.style.transform="",e.onmousedown=function(a){const s=document.querySelector(`#${e.id}-container`);let A="";function d(n,t){e.style.left=n-20+"px",e.style.top=t-e.offsetHeight/2+"px"}function p(n){d(n.pageX,n.pageY)}function u(n){"r"===n.key&&"vertical"!==A?(A="vertical",e.classList.add("rotated")):(A="",e.classList.remove("rotated"))}e.style.transform="",e.onmouseover=null,e.style.cursor="grabbing",e.style.position="absolute",e.style.zIndex=10,d(a.pageX,a.pageY),document.addEventListener("mousemove",p),window.addEventListener("keydown",u),e.onmouseup=a=>{e.style.display="none";const d=document.elementFromPoint(a.clientX,a.clientY);if(e.style.display="flex",document.removeEventListener("mousemove",p),!d.classList.contains("droppable"))return e.style.position="static",e.classList.remove("rotated"),e.onmouseover=t,void window.removeEventListener("keydown",u);const m=n.placeShip(o(e.id),d.dataset.column,d.dataset.row,A);!0===m?(r.p1UpdateBoard(n),l.push(e.id),s.removeChild(e),r.updateMarquee("Place your ships by dragging them onto your board (press R to rotate).",20),l.length===i.length&&c()):(e.style.position="static",e.classList.remove("rotated"),window.removeEventListener("keydown",u),r.updateMarquee(m,24,"rgb(255, 140, 140)"),e.onmouseover=t)}}}))},placeRandomShips:A,startPlacementPhase:function(){s=!0},placementPhaseOver:()=>!s}},432:n=>{n.exports=n=>{let e;switch(n){case"Carrier":e=5;break;case"Battleship":e=4;break;case"Cruiser":case"Submarine":e=3;break;case"Destroyer":e=2;break;default:throw new Error("Unexpected ship name.")}let t=0;const o=()=>t===e;return{name:n,readHits:()=>t,getShipLength:()=>e,hit:()=>{o()||(t+=1)},isSunk:o}}}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var a=e[o]={id:o,exports:{}};return n[o](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{"use strict";var n=t(72),e=t.n(n),o=t(825),r=t.n(o),a=t(659),i=t.n(a),s=t(56),A=t.n(s),l=t(540),c=t.n(l),d=t(113),p=t.n(d),u=t(365),m={};m.styleTagTransform=p(),m.setAttributes=A(),m.insert=i().bind(null,"head"),m.domAPI=r(),m.insertStyleElement=c(),e()(u.A,m),u.A&&u.A.locals&&u.A.locals;const f=t(34),B=t(138),h=document.querySelector("button#start");f.renderBoards(),h.addEventListener("click",B)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,